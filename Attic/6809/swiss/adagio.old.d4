( adagio )

forth tt

decimal

code *  ( unsigned 16x16 -> 32 multiply )
  1 u #) ldd   ( d=a0:b1)
  mul
  << b >> pshu  ( low byte of a0b1 )
  (     3  4  1  2  0       )
  ( u: b1 b0 a1 a0 lo:a0b1 )
  1 u #) lda
  4 u #) ldb  ( d=a1:b0 )
  mul
  u )    addb ( b=lo:a0b1 + a1b0 )
  u )    stb
  2 u #) lda
  4 u #) ldb  ( d=a0:b0 )
  mul
  u )    adda ( d=a0b0 + {lo:a0b1+a1b0}*256 )
  3 u #) leau ( pop stack )
  u )    std
  next end-code

( the *real* sequence stuff )

decimal
var vcA ( voice A )  4 allot
var vcB ( voice B )  4 allot

var current-transpose

( offsets within voices )
( : rhythm^ 0 + ;   ( 2 bytes )
: melody^ 2 + ;
: beats   4 + ;  ( byte )
: beat#   5 + ;

hex
: beat? ( beat# voice -- f )
  >r
  r@ beats c@ mod dup 3 rshift ( which byte? )
  r> ( rhythm^ ) @ + c@ 80 rot 7 and rshift and ;

decimal
: transpose ( note -- note' )
  current-transpose @ + dup 99 > if 60 - endif ;

: note  ( beat# voice -- )
  melody^ @ swap 12 mod + c@ transpose add-note ;

( note plays a note if there is a )
( beat in its rhythm at beat# mod beats. )
: note? ( beat# voice -- )
  2dup beat? if
    dup beat# dup 1+c! ( beat# voice voice-beat^ )
    c@ over note    ( play the note )
  endif
  drop drop ;


hex
create times ( a-beats:b-beats )
  1818 , 180b , 1810 , 180c , 1808 , 1806 , 1805 , 1807 , 1818 ,

decimal

create rhyA  ( a voice rhythms -- all 24 beats )

24 rhy: * - - - * - - - * - - - * - - - * - - - * - - -  ;rhy
24 rhy: - - * - - * - - * - - * - - * - - * - - * - - *  ;rhy
24 rhy: * - - - * - * - - - * - * - - - * - * - - - * -  ;rhy
24 rhy: - - - * - - - - - * - - - - - * - - - - - * - -  ;rhy

create rhyB  ( b rhythms )

24 rhy: * - * -  - * - *  * - * -  - * - *  * - * -  - * - * ;rhy
24 rhy: * - - *  * - * -  - - * -  * - * -  * - * *  - * - * ;rhy
24 rhy: * - * *  - * - *  * - * *  - * - *  * - * -  * - * - ;rhy
24 rhy: - * * - * * -   - * * - * * -   - * * - * * -  - * * ;rhy


( groups of instruments: )
( 0     == splash )
( 1 2   == stem hi )
( 3 4   == cylinder -- lowest )
( 5 7 9 == resonator horns )
( 6 8   == aluminum -- snare-sound )

create mdyA  ( always lower tones, at least *before* transpose )
( so groups 3,4,6,8  )
( also *splash* )

12 melody: 40 50 60 70 80 90 93 83 73 63 53 43
12 melody: 64 74 63 73 54 84 53 83 44 94 43 93
12 melody: 45 47 49 55 57 59 65 67 69 75 77 79
12 melody: 99 97 95 89 87 85 79 77 75 69 67 65

create mdyB
12 melody: 62 61 52 51 42 41 72 71 82 81 92 91
12 melody: 46 48 46 58 56 58 66 68 66 78 76 78
12 melody: 40 61 53 76 68 75 97 84 42 93 55 46
12 melody: 96 98 96 88 86 88 76 78 76 68 66 68

: adagio

  ( set melody, rhythm for both voices )
  random @
  dup 3 and 12 * mdyA + vcA melody^ !
  2 rshift dup 3 and 12 * mdyB  + vcB melody^ !
  2 rshift dup 3 and 3 *  rhyA  + vcA ( rhythm^ ) !
  2 rshift 3 and 3 *  rhyB  + vcB ( rhythm^ ) !

  9 0 do  ( for all time signatures )
    i 2* times + dup c@ vcA beats c! 1+ c@ vcB beats c!
    ( leave beat# values where they were! )
    i current-transpose !
    200 tempo !

    vcA beats c@ 8 * 0 do
      i vcA note?
      i vcB note?
      tempo @ wait
    loop
  loop ;



