( uuencode.mu4 - uuencode the image for download to AEB-1.)

( 2002-mar-29. Converted to muForth.)

( 17-may-2000. Created, after studying GNU sharutils source for uuencode
  and uudecode.)

( Encodes 3 chars of 8 bits - 24 bits - into 4 chars of 6 bits.)

cr s" UUencode "  file[#

( with native)

( I tried a fancy buffering scheme but it wasn't faster enough that it
  mattered. Or, alternatively, the simple way is fast enough that improving
  it is frankly unnecessary.)

( 1 line of chars: 45 input bytes -> 60 output, plus count and cr)
64 buffer uubuf
variable u
: clean  uubuf u ! ;
: uflush  uubuf  u @  over - type ;
: u,  u @  c!  1 u +! ;

( This was the fancy stuff:
  [ uubuf 1 Ki 1- + ]  over u< if  drop uflush uubuf  then  
  And uflush would call clean.)


[with] native not [if]  ( using native code versions)
: uu1encode   63 and  bl +  ;
: uupeel   dup 6 rshift  ;
: uu4peel   uupeel  uupeel  uupeel  ;
[then]

: uu1encode,   uu1encode  u,  ;

( high to low:  c0:c1:c2)
: c@+ count ;
: 8b@   ( a n - a+1 n')  8 lshift  push  c@+  pop  +  ;
: uu4encode,
   uu4peel   uu1encode,  uu1encode,  uu1encode,  uu1encode,  ;

[with] native [if]
: uu3   ( a - a+3)     uu3@+               ( 0:c0:c1:c2)   uu4encode,  ;
[else]
: uu3   ( a - a+3)  0  8b@  8b@  8b@       ( 0:c0:c1:c2)   uu4encode,  ;
[then]
: uu2   ( a - a+2)  0  8b@  8b@  8 lshift  ( 0:c0:c1:0)    uu4encode,  ;
: uu1   ( a - a+1)  0  8b@      16 lshift  ( 0:c0:0:0)     uu4encode,  ;

: cr,   ctrl J  u,  ;

: uuleft  ( a 0|1|2 - a+)  jump  nope  uu1  uu2  -;
: uuline  ( a n - a+n)
   clean
   cr,  dup uu1encode, ( count)
   3 /mod  ( r q)  swap push  for  uu3  next   pop uuleft
   uflush ;

: uuimage  ( a len)
   45 /mod  ( r q)  swap push  for  45 uuline  next
                          pop  dup  if uuline drop ^  then  2drop ;

: uu(  ." begin 600 image" ;
: )uu  cr  0 uu1encode emit  cr  ." end"  cr  ;
: uu  uu(  uuimage  )uu  ;

#]file

( Tests)

0 [if]
ld ARM/memory.d4   ram

0 constant r/o   '1101 constant w/o  ( O_TRUNC | O_CREAT | O_WRONLY)
: fopen   ( z" flags - fd)  '666  open  ;

jiffies
[then]

: tt  z" /tmp/aeb.uue" w/o open-file  dup writes
   z" ../../ARM/AEB-1/Revc1.bin"  open-file dup mmap-file  ( a #)  uu
    close-file ( aeb.uue)  close-file     >stdout ;
  [else]

( 'image #image)  "40000000 "b4000  uu  close drop  [then]

>stdout  (  jiffies  swap-  .  ." jiffies "  0  bye)
[then]


