: <comment>  begin s" </comment>" token "= until ;

variable imm-valid
variable imm-value

<comment>

This is the Mippy assembler.

The instruction format is:

	0x0000 .. 0x3FFF <- Literal word, the instruction value
			    itself is pushed on the stack

	0x4000 .. 0x407F <- Regular instructions
	0x4080 .. 0x40FF <- Undefined

	0x41xx .. 0x7Fxx <- Instructions with 8bit sign extended
			    immediate data in the 'xx' field

	0x8xxx .. 0x9xxx <- Call instruction: the xxx is the target
			    address (in Mippy II, that address will
			    be shifted left two bits)

	0xC000 .. 0xFFFF <- Literal word, the instruction value
			    itself is pushed on the stack

All of the op-<> words will, when executed, have the instruction number
on the stack.  Any run-time parameters will have been compiled into the
code.

</comment>

16 Ki * cell constant mippy-memory-size
             variable m
16 Ki * cell buffer   mippy-memory

mippy-memory m !

: m, m @ !   1 m @ + m !  ;

: clr-imm 0 imm-value ! ;
: get-imm imm-value @ clr-imm ;
: set-imm imm-value ! 1 imm-value ! ;

: op-reg
	create 
	does>	"4000 or m,
		clr-imm
;

: op-reg-imm
	create
	does>	imm-valid @ if
	( make an immediate version ) 8 << get-imm or "4000 or m, ^ then
	( make a stack based version ) "4000 or m, clr-imm
;

: op-imm16
	create
	does>	( compile LIT instruction # ) m,
		( compile LIT value ) m,
		clr-imm
;

: >= < not ;

: op-self-imm
	create
	does>	drop ( remove the 'instruction #' from the stack )
		clr-imm
		dup "FF80 >= if dup set-imm m, ^ then
		dup "0080 <  if dup set-imm m, ^ then
		dup "C000 >= if             m, ^ then
		dup "4000 <  if             m, ^ then
		81 op-imm16
;

: op-self-rel create does> ." CALL not implemented -- use implicitly " ;
: op-rel-abs create does> ." BRANCH and JUMP instructions not implement " ;

chain .mippy-compiler.
: mippy-compiler .mippy-compiler.  definitions ;

mippy-compiler

 0 op-reg     nope

 1 op-reg-imm +
 2 op-reg-imm -
 3 op-reg-imm and
 4 op-reg-imm or
 5 op-reg-imm xor

 6 op-reg-imm =
 7 op-reg-imm <>
 8 op-reg-imm <
 9 op-reg-imm >
10 op-reg-imm <=
11 op-reg-imm >=
12 op-reg-imm u<
13 op-reg-imm u>
14 op-reg-imm u<=
15 op-reg-imm u>=

16 op-reg-imm pea
17 op-reg-imm pick

18 op-reg-imm rol
19 op-reg-imm ror
20 op-reg-imm asr
21 op-reg-imm lsr

22 op-rel-abs bra
23 op-rel-abs bz
24 op-rel-abs bnz
25 op-rel-abs jump

64 op-reg     !
65 op-reg-imm +!
66 op-reg     @
67 op-reg     dup
68 op-reg     ?dup
69 op-reg     drop
70 op-reg     swap

72 op-reg     sp!
73 op-reg     sp@
74 op-reg     rp!
75 op-reg     rp@
76 op-reg     pc!
77 op-reg     pc@

78 op-reg     r>
79 op-reg     >r
80 op-reg     r@

81 op-imm16   lit

122 op-reg     rtz
123 op-reg     dis-intr
124 op-reg     en-intr
125 op-reg     reset
126 op-reg     rti
127 op-reg     rts

128 op-self-imm lit-self
129 op-self-rel call-self

