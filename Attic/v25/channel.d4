( channel.d4 - midi channel and display code)

0 ?[
( channels)
CREATE digits   ( 0 = omni; 1 .. 16)
 (  habcdefg              habcdefg              habcdefg  )
   %00010011 C, ( omni)  %00110000 C, ( 1)     %01101101 C, ( 2)
   %01111001 C, ( 3)     %00110011 C, ( 4)     %01011011 C, ( 5)
   %01011111 C, ( 6)     %01110010 C, ( 7)     %01111111 C, ( 8)
   %01111011 C, ( 9)     %11111110 C, ( 10)    %10110000 C, ( 11)
   %11101101 C, ( 12)    %11111001 C, ( 13)    %10110011 C, ( 14)
   %11011011 C, ( 15)    %11011111 C, ( 16)    ( Phew!!)

#####  on 0 2 4 sets  a g d  resp.
#....  on 0 2 4 does nothing
....#  ditto
#...#  ditto
.....  on 0 2 4  sets nothing but increments line#

##### on 1 3 is illegal
#.... on 1 3  sets  f e  resp
....# on 1 3  sets  b c  resp
#...# on 1 3  sets  f&b  e&c  resp
..... on 1 3  does nothing; incr line#

]?


{
: segment   ( bits which - bits')  pop  3  |vector|  or  ;
: -pix    c" bad digit picture" throw  ;
: ?pix    if  -pix  then  ;
: +line   1 +under  ;
: line   over push  +line  pop  ;
: grafik  constant  ;
: odd    ( line# bits - line# bits which odd)  line  2 u/mod  swap  ;

: digit   0 constant    0 0  ( line# bits)  ;
0 ?[
: .binary8  binary  0 <#  # # # # # # # #  #> type  decimal  ;
: d;      nip  ( - bits)  dup .binary8  cr  ( C,)  ;  ( debug)
]?
: d;      nip  ( - bits)  here cell- !  ;

(   +  +-a-+
    h  f   b
    +  +-g-+
    h  e   c
    +  +-d-+   )

( habcdefg)
 %10000000 grafik h
 %01000000 grafik a
 %00100000 grafik b
 %00010000 grafik c
 %00001000 grafik d
 %00000100 grafik e
 %00000010 grafik f
 %00000001 grafik g
 b f or    grafik bf
 c e or    grafik ce

: ten+   h or  ;

: .....   +line  ;
: #####   odd ?pix   segment  a   g   d     -pix  -;
: #....   odd if     segment  f   e   -pix  -pix  then  drop  ;
: ....#   odd if     segment  b   c   -pix  -pix  then  drop  ;
: #...#   odd if     segment  bf  ce  -pix  -pix  then  drop  ;


digit omni  ( lightning)
    #....  ( nothing)
    #....  ( sets f)
    #####  ( g)
    ....#  ( c)
    ....#  ( nothing)  d;  ( omni!)

digit `0'
    #####
    #...#
    #...#
    #...#
    #####  d;

digit `1'
    ....#
    ....#
    ....#
    ....#
    ....#  d;

digit `2'
    #####
    ....#
    #####
    #....
    #####  d;

digit `3'
    #####
    ....#
    #####
    ....#
    #####  d;

digit `4'
    #...#
    #...#
    #####
    ....#
    ....#  d;

digit `5'
    #####
    #....
    #####
    ....#
    #####  d;

digit `6'
    #####
    #....
    #####
    #...#
    #####  d;

digit `7'
    #####  ( sets a)
    #...#  ( sets f b)
    ....#  ( nothing)
    ....#  ( sets c)
    ....#  ( nothing)  d;

digit `8'
    #####
    #...#
    #####
    #...#
    #####  d;

digit `9'
    #####
    #...#
    #####
    ....#
    #####  d;
}

( The digits!)
CREATE digits
   omni C,
   `1' C,       `2' C,       `3' C,       `4' C,
   `5' C,       `6' C,       `7' C,       `8' C,
   `9' C,       `0' ten+ C,  `1' ten+ C,  `2' ten+ C,
   `3' ten+ C,  `4' ten+ C,  `5' ten+ C,  `6' ten+ C,


( Channels.)
: SHOW  ( chan# -)
   1+  ( 0=omni; 1-16)  digits + ROM@  display IO!  ;

: SURF  ( ie channels)  +MIDI-IRQS  +MIDI   +IRQ
   OMNI  BEGIN  channel @ SHOW  player LISTEN
   200 MS  8 "f08 LOW  CHANNEL+  CLEAR  AGAIN  -;
          ( this part )

( Should be something like this. Add code to select initial channel based
  on port T.)
: SURF  ( ie channels)
  ( ??   +MIDI-IRQS  +MIDI  +CHANNEL-IRQ  +IRQ ??)
   strobes/channel-irq IO@  %10000 AND  IF   OMNI
   BEGIN  channel @ SHOW  player LISTEN ( This is different; MIDIcore)
      1DOWN  CHANNEL+  CLEAR  200 ms  AGAIN  -;
  ( could be a 1DOWN ..; the INTR would do UP; as it is it's in the task
    loop waiting for a wire to change state...bit of a waste)

]?



