Chat!  The V25 communications software.
(c) 1995 David Frech.

1 is load block












( Chat! load block)
EPROM SKIP   ( don't load if EPROM)

CR ." (( Chat "    02 10 +THRU    ." )) "












( chat code)

FORTH target













( Serial chat interrupt)
32 QUEUE CONSOLE  ( 16 words of buffer)

CODE serial-in-chat  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  ' CONSOLE >DATA #, BX MOV,
   $F60 #, DI MOV,  ( serial0)  serial-in-irq jump,  C;

: +SERIAL-CHAT    32 CONSOLE QINIT   0 SERIAL  -IRQ
   9600 BPS  8N1  +Rx  +Tx
   lit serial-in-chat 13 INSTALL  +IRQ  7 RxIRQ IO!  ;

SKIP  Gotta use serial0 because that's what the ROM monitor
uses for initial code download.  Drag.



( Serial)                              DECIMAL
: putb  ( b -)  BEGIN  PAUSE  TxIRQ IO@ $80 AND  UNTIL
   $47 TxIRQ IO! ( clr irq)  TxData IO!  ;  ( order critical)

: put  ( word -)  SPLIT ( hi lo)  putb  putb  ;
: get   ( - w)
   2 AWAIT  CONSOLE Q@  CONSOLE Q@  ( lo hi) JOIN  ;


SKIP  when we were using ROM routines...
CODE (put  ( b -)   BL AL MOV,  9 #, INT,  top POP,  NEXT,  C;

: (put  ( b -)  $47 $f6e IO!  $f62 IO!  ;
: putb  ( b -)  BEGIN  PAUSE  $f6e IO@ $80 AND  UNTIL  (put  ;


( debugging)
: IRQs  +CLOCK  +SERIAL-CHAT ( V25 monitor has turned it off) ;

CODE breakpt   INT3,  NEXT,  C;

: FINAGLE   POP POP  SWAP  PUSH PUSH  breakpt  ;
: *DEBUG*  -2 put  -CLOCK   FINAGLE  ( exits to debugged word)
           ( .. which EXITs to here)  IRQs  ;

: brk   -2 put
   -CLOCK  breakpt ( goes into V25 monitor)  IRQs  ;

SKIP  After exiting from V25 monitor the target will have sent
a binary `0' which will be lost by the host, which must put a
fake 0 into its input queue.

( low level)
CODE ROM! ( w a -)
   AX POP,  CS: AX 0 [top] MOV,  top POP,  NEXT,  C;

( chat comm words)
: gets   SP!  get ( #)  ?FOR  get  NEXT  THEN  ;
: puts   DEPTH DUP put ( #)  ?FOR  put  NEXT  THEN  ;
: loads  get get ( a #)
             FOR  get ( a w)  OVER ROM! 2 +   NEXT   DROP  ;

HOST  ( so we get the right ! )
' gets 'gets !    ' puts 'puts !   ' loads 'loads !




( NMI support)
VARIABLE #nmi  ( `semaphore' so only first trigger runs)

: +NMI
   1 #nmi !   $F40 IO@  -2 AND
   lit [[ HERE ]] nope 2  ( patched by nmi)
   -IRQ  INSTALL  $F40 IO!  ( nmi falling)  +IRQ  ;
   ( interrupts off for as short as possible)








( chat comm words)
: ?STACK  ( - f)  DEPTH 0< DUP IF  SP! -3 THEN  ;  ( underflow)
: ack  ?STACK put  ;  ( acknowledge the receipt of pfa)
: OBEY
   RP!  BEGIN  ack  get ( pfa)  +NMI  EXECUTE  AGAIN  ; RECOVER

: BOOT  +DIVIDE  600 uS  IRQs  OBEY  ;  RECOVER
   ( simple, eh?)








( chat debug )
VARIABLE bogus  ( task that `crashed')
: ip  ( - 'var)  bogus @  TOP HERS @  ;  ( use @ or !)
: rp  ( - 'var)  ip 2+  ;
: -@  ( a - a-2 w)  2- DUP  @  SWAP  ;

: stack@  ( - x1 .. xn)
   SP!  bogus @ S0 HERS @  2- DUP  ( bot Dstack)
   ip 4 + ( skip saved ip,rp)  - 2/  ( #w)
   ?FOR  -@  NEXT THEN  DROP  ;

: ret@  ( - x1 .. xn)
   SP!  bogus @  DUP  ( bottom Rstack)
   rp @  - 2/  ( #w)  ?FOR  -@  NEXT THEN  DROP  ;


( NMI handler for debugging)
CODE nmi                        ' nmi SWAP !  ( fixup +NMI)
   ' #nmi >DATA ) W-PTR DEC, ( nmi semaphore)
   0=, IF,  SI PUSH,  DI PUSH,  SP DI MOV, ( save)
   ' Operator >DATA #, SI MOV,  4 [SI] SP MOV, ( S0)
   -1 #, 0 [SI] W-PTR MOV,  ( STATUS)
   $68 C, $AAAA ,  SI PUSH,  $68 C, ' OBEY ,  ( top rp ip)
   SP 6 [SI] MOV, ( TOP)   DI SP MOV, ( old)
   DI POP,  SI POP,  THEN,  IRET,  C;

SKIP  Let the tasker run the newly configured Operator task.
This is a `soft' NMI.  If we just clobbered the currently-run-
ning task and tried to save its context we might screw up its
stack since we don't know at the moment of the interrupt if
Forth or native machine code is running.  This is the only safe
way.   ** ASSUMES DS = SS = RAM and is OK!! **
