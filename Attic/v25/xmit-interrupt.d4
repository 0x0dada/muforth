( xmit-interrupt)

( This is the junkyard for xmit interrupt code. It's sad because it was very
  orthogonal, and just like the receive code.)

00 ?[

02 USER output

CODE OUTPUT-ROOM       ( - 'q 'sema)
   SS: | u ) w MOV, ( get user to w)  SS: | output [w] w MOV,
   t PUSH,  w PUSH, ( q)   qroom [w] t LEA,  NEXT,  C;

CODE Q!   ( ch 'q)     ( increment AVAILABLE, maybe wake xmitter)
   AX POP, ( ch)
   SS:        qwr [t] w MOV,  SS: AL qdata [t+w] MOV,  w INC,
   SS:      qmask [t] w AND,  SS:  w     qwr [t] MOV,
   SS: 1 # qavail [t]   ADD,  carry IF, ( wake xmitter)
   SS:      qport [t] t MOV,  ES:  "80 # SerialMode [t] BYTE OR,  THEN,
   t POP,  NEXT,  C;

: EMIT?  ( - #)       OUTPUT-ROOM   NIP  @  ;
: EMIT  ( ch)         OUTPUT-ROOM  1DOWN  Q!  ;

( TransmitISR has to do the equivalent of `INPUT-AVAILABLE  1DOWN  Q@'.)

assemble
LABEL TransmitISR  ( common code; t = queue)
   SS: qavail [t]   DEC,  0< IF, ( nothing to send; disable tx)
   SS:  qport [t] t MOV,  ES: "80 invert # SerialMode [t] BYTE AND,
                              ( bic tx enable)
                          t POP,  FINT,  IRET,  THEN,
   w PUSH,  AX PUSH,
   SS:     qrd [t] w MOV,  SS: qdata [t+w] AL MOV,  w INC,
   SS:   qmask [t] w AND,  SS:  w     qrd [t] MOV,
   SS:   qport [t] w MOV,  ES: AL     TxD [w] MOV, ( send it)
   SS: 1 # qroom [t] ADD,  carry IF,
   SS:   qtask [t] w MOV,  SS: RUN # 0 [w] MOV, ( wake it)  THEN,
   AX POP,  w POP,  t POP, ( caller)  FINT,  IRET,

LABEL TransmitISR0
   STI,  t PUSH,  ( t <- 'q)  ( set up regs)
   TransmitISR ) JMP,  C;


01 serial  16  | output }  QUEUE to-host  2drop

assemble
LABEL TransmitISR1
   STI,  t PUSH,  | to-host # t MOV,  TransmitISR ) JMP,  C;

( 'code vector# priority IRQpri IRQreg)
TransmitISR1  18  serial1-priority  ErrIRQ  TxIRQ
HANDLER TransmitISR1
00 serial connect

]?


