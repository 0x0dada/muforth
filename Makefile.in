# $Id$
#
# This file is part of muFORTH; for project details, visit
# 
#    http://nimblemachines.com/browse?show=MuForth
#
# Copyright (c) 1997-2006 David Frech. All rights reserved, and all wrongs
# reversed.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or see the file LICENSE in the top directory of this distribution.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
### Makefile for muforth, a "micro" Forth
###

VERSION=	0.03

CFLAGS=		-O2 -Wall -fomit-frame-pointer
#CFLAGS=	-g -Wall -fomit-frame-pointer -DDEBUG -DBEING_DEFINED
LDFLAGS=

# Core objects
COREOBJS=	kernel.o interpret.o compile.o dict.o file.o \
			error.o time.o tty.o select.o

# Different compile & execution engines: native and ITC
ENGINE=		engine-#engine#.o
CFLAGS+=	-Dengine_#engine#

# If any of these files changes, make a new version.h
VERSOBJS=	${COREOBJS} ${ENGINE}

ALLOBJS=	${VERSOBJS} muforth.o
DEPFILES=	Makefile muforth.h env.h

.PHONY: all clean httplink diffsed

all : public.h muforth

${ALLOBJS} : ${DEPFILES}

muforth.o : version.h

public.h : ${ALLOBJS:.o=.ph}
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	cat ${.ALLSRC}) > ${.TARGET}

forth_chain.h : public.h scripts/gen_dict_chain.sed
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	sed -E \
		-e '/^void mu_compiler/d' \
		-f scripts/gen_dict_chain.sed public.h \
	) > ${.TARGET}

compiler_chain.h : public.h scripts/gen_dict_chain.sed
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	sed -E \
		-e '/^void mu_compiler/!d' \
		-e 's/mu_compiler_/mu_/' \
		-f scripts/gen_dict_chain.sed \
		-e 's/mu_/mu_compiler_/' public.h \
	) > ${.TARGET}

dict.o : forth_chain.h compiler_chain.h

.SUFFIXES : .ph

.c.ph : Makefile
	@echo Making ${.TARGET}
	@(echo "/* ${.IMPSRC} */"; \
	sed -E -n \
		-e '/^#if/,/^#endif/d' \
		-e '/^static /d' \
		-e 's/^([a-z]+ \**[a-z_0-9]+)\((void)?\).*$$/\1(void);/p' \
		-e 's/^(pw [a-z_0-9]+).*;$$/extern \1;/p' \
		${.IMPSRC}; \
	echo) > ${.TARGET}

env.h : envtest
	./envtest > ${.TARGET}

version.h : Makefile ${VERSOBJS:.o=.c}
	@echo Making ${.TARGET}
	@echo "#define VERSION \"${VERSION}\"" > version.h
	@echo "time_t build_time = `date \"+%s\"`;" >> version.h

muforth : ${ALLOBJS} ${DEPFILES}
	${CC} ${LDFLAGS} -o $@ ${ALLOBJS} ${LIBS}

.c.asm : Makefile muforth.h
	${CC} ${CFLAGS} -S -o ${.TARGET} -c ${.IMPSRC}

# put or modify links to homepage in source files
SEDFILES=	README Makefile.in muforth.h *.c *.mu4
MU4DIRS=	Test cf games lib target target/common target-arm
httplink :
	for f in ${SEDFILES}; do \
		sed -E -f scripts/httplink.sed $$f > $$f.sed; done
	for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			sed -E -f scripts/httplink.sed $$f > $$f.sed; done; done

diffsed :
	-(for f in ${SEDFILES}; do diff -u $$f $$f.sed ; done) | less
	-(for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			diff -u $$f $$f.sed; done; done) | less

mvsed :
	for f in ${SEDFILES}; do mv -f $$f.sed $$f ; done
	for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			mv -f $$f.sed $$f; done; done

# make the files that are hard to make, eg , for people on Windows ;-)
HFILES=		version.h public.h forth_chain.h compiler_chain.h
hfiles : ${HFILES}

# This target isn't quite right... 
MUFORTH!=	basename ${.CURDIR}
dist : ${HFILES}
	(cd ..; tar cvf - \
		--exclude .svn \
		--exclude "*~" \
		--exclude "*.sed" ${MUFORTH}) | \
		gzip -9 > muforth-dist.tar.gz

clean :
	rm -f muforth version.h *.o *.asm *.ph
	rm -f public.h forth_chain.h compiler_chain.h

### BSD start ###
## For merging changes in other branches into HEAD
.if defined (BRANCH)

syncpoint !
	cvs rtag -r ${BRANCH} -F ${BRANCH}_merged_to_HEAD muforth

do_merge !
	cvs update -j ${BRANCH}_merged_to_HEAD -j ${BRANCH}

merge ! do_merge syncpoint

.elif make(syncpoint) || make(do_merge) || make(merge)
.error You need to define a source BRANCH to merge from.
.endif
### BSD end ###
