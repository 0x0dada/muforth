( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)


loading Vertical scan bitmap compiler


( Since we're designing chars to scan with a vertical row of LEDs, our
  glyph patterns need to be written as a left-to-right raster - for ease
  of the author - but compiled as a top-to-bottom raster. This isn't as
  hard as it sounds.)

( We allocate a cell for each column of pixels. This is probably overkill,
  but it's also really easy, and doesn't use that much memory.)

5 cells constant width  ( XXX really, "caller" should set this)

: or!  ( mask a)  tuck  @ or  swap ! ;

: .   ( mask a - mask a')   cell+ ;                   ( unset pixel)
: X   ( mask a - mask a')   2dup or!  . ;             ( set pixel)
: |   ( mask a - mask' a')  swap 2* swap  width - ;   ( end of raster line)
: |;  ( mask a)             2drop ;                   ( end of character)

( Assuming 128 chars, less controls and space)
128 33 - width *  buffer bitmaps
: letter  ( - mask a)
   1 ( mask)  \f char  33 - ( skip controls & space)  width *  bitmaps + ;

( XXX currently no way to mark descenders, and no way to create "icons"
  that are a different shape than the standard character box.)

