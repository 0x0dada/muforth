variable rnd-seed
clock rnd-seed !  ( Init the random seed from the system clock)
( The linear congruence algorithm here was found on the web and described as:
        gsl_rng_vax
  This is the VAX generator MTH$RANDOM. Its sequence
            x_{n+1} = [a x_n + c] mod m
  with a = 69069, c = 1 and m = 2^32.
  The seed specifies the initial value, x_1.
  The period of this generator is 2^32 and
  it uses 1 word of storage per generator.)
: random (s n -- random )
	push rnd-seed @ 69069 um* 1 0 d+ drop ( calc next seed)
        dup rnd-seed !
	s->d pop um/mod drop ( drop the quotient leaving the remainder)
;

0 [if]
256 array random-array
: test-random-char dup 0     = if drop bl ^ then
                   dup 10   u< if char 0 + ^ then
		   dup 100  u< if drop char + ^ then
		   drop char * ;
: clear-random
	random-array 256 for 0 over ! cell + next drop
;
(
  <n>  test-random
  This routine will run the random number generator some number
  of times and then draw a graph showing the number of times a
  particular graph coordinate was hit.  The default algorithm
  uses a 16x16 graph, thus 256 cells.  Feel free to change it
  for other test sizes.
)
: test-random (s n -- )
	for 1 256 random cells random-array + +! next
	random-array
	16 for
		16 for dup @ s->d <# # # # #> type space cell + next cr
	next drop
;
[then]
