( swiss deal -- keyboard scanner + sequencer for liquid perc )
( daf  6-jan-93  created )
( daf 20-jan-93  'fixed' wait by using +loop instead of loop; )
(         now it will catch up accurately if ticks > 1 when )
(         wait is called. )

forth target

code lrotate8
  1 u #) asl
  u< if  ( carry set )
    1 u #) inc
  endif next end-code

( this version is dangerous when a<0; so I've recoded in assem. )
( the new version treats a and b as *unsigned*, not exactly )
( 83-standard.  So I renamed the function umod. )
( : mod  ( a b -- a mod b )
(  >r begin r@ - dup 0< until r> + ; )

code umod  ( a b -- a mod b )
  2 u #)  ldd  ( d=a )
  begin
    u ) subd
  u< until
  u )++ addd
  u )   std  next end-code


hex
( define some equates; these do *not* generate code on the target )
( but only create mnemonics useful for assembler programming. )

( via address constants )
b400 equ driver-port
b401 equ keybd-port
b402 equ driver-dir
b403 equ keybd-dir
b404 equ timer1
b40b equ aux-cntl
b40c equ cntl
b40d equ intp-flags  ( interrupt flags reg )
b40e equ intp-masks  ( interrupt mask reg )

decimal

40  equ hold-time  ( in ms )

var ticks  -1 allot ( byte count of clock ticks that have occurred )
var button -1 allot ( byte flag: has button been pushed? )
( var random -1 allot ( byte var: value of timer low byte at time )
                    ( of button push )
var tempo
var keys 6 allot  ( 8 bytes total )

var notes  62 allot  ( room for 32 time-note pairs )
label notesMax  ( used only in code words )
var notesMac    ( pointer just past last time-note pair )

hex
code add-note  ( midinote# -- )  ( easier than in forth, and faster )
  << d >> pulu    ( note# in b reg )
  addr notesMac ^ ldx  ( get latest ptr )
  notesMax # cmpx ( any room? )
  u< if
    hold-time #   lda  ( on-time in ms )
    7f #   andb ( mask off high bit just in case )
    x )++  std  ( put in array )
    addr notesMac ^ stx  ( new value )
    80 #   orb
    driver-port ^ stb  ( turn on note -- portb of via )
  endif
  next end-code

( because this is real-time interrupt code, we have to be a little )
( bit careful; to wit, to avoid race conditions with 'tick' )
( interrupt, we grab the value of ticks at the start of this )
( routine, and use that value -- pushed on to the stack -- )
( to decrement the note timers.  Then at the end we subtract )
( our save tick count from the actual tick count at the time of )
( the subtract instructions.  That way, if an interrupt occurs )
( during the processing of the list, that tick is not lost. )
( Also, in order for the operation )
(   lda   ticks )
(   suba  ,u )
(   sta   ticks )
( to be *atomic*, as it must be if we want to ensure that a )
( tick occuring during *that* operation is not lost, we must )
( disable interrupts. )

hex
code age-notes  ( -- ) ( check if ticks !=0; decr if so )
  addr ticks ^ lda
  0!= if
    << y a >> pshu  ( save y, ticks -- ticks are on top )
    addr notes # ldx
    addr notes # ldy   ( point to array of time-note pairs )
    w[
      x )++ ldd   ( next pair )
      u )   suba  ( subt ticks from time remaining )
      u<= if
        driver-port ^ stb  ( turn off note )
      else
        y )++  std  ( keep in array if time != 0 )
      endif
    ]w
      addr notesMac ^ cmpx  ( done? )
    u< while
    addr notesMac ^ sty  ( y is new pointer to end of array )
    50 # orcc  ( mask interrupts )
    addr ticks ^ lda
    u ) suba
    addr ticks ^ sta   ( subtract from ticks our saved ticks )
    0af # andcc  ( enable interrupts )
    << y a >> pulu  ( restore y, pop tick count )
  endif
  next end-code

: wait  ( delay --   delay in ms )
  ?dup if  ( if 0 time, skip -- otherwise do will exec 65536 times )
    0 do
      begin ticks c@ ?dup until  ( wait for tick )
      ( # of ticks on stack -- could be > 1 )
      age-notes  ( age notes, decr ticks )
    +loop   ( 'skip' those ticks )
  endif ;

hex
firq handler ( via interrupt handler )
  ( firq doesn't save *any* registers )
  << d >> pshs
  intp-flags ^ lda  ( which interrupt )
  40 # bita
  0!= if ( timer1 )
    addr ticks ^ inc
    timer1 ^ lda  ( clr interrupt by reading timer1 low )
  else  ( button -- ca2 )
    intp-flags ^ sta  ( reset ca2 flag )
    addr button ^ sta  ( set button != 0 )
    ( timer1 ^ lda       ( get low byte of timer )
    ( addr random ^ sta  ( now we have a random #! )
  endif
  << d >> puls
  rti end-handler

hex
: clear-notes
  80 0 do i b400 c! loop
  notes notesMac ! ;


only forth defs
