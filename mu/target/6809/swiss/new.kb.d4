( swiss deal -- new keyboard scanner + sequencer for liquid perc )
( daf  6-jan-93  created )
( daf 20-jan-93  'fixed' wait by using +loop instead of loop; )
(         now it will catch up accurately if ticks > 1 when )
(         wait is called. )

( ** this version is only for test ** )

forth tt

code rrotate8
  1 u #) lda
         lsra ( lsb -> cy )
  1 u #) ror  ( cy->b7 . . . b0 -> cy )
  next end-code

code lshift ( x count -- x' )
  u )++ ldx  ( x=count )
  w[
    1 u #) lsl   ( shift low byte )
    u )    rol   ( shift high byte )
   -1 x #) leax  ( decr count )
  ]w
  0!= while
  next end-code

hex
( we better have set up the firq interrupt vector before this! )
( I made this code for space reasons. )
code init-via
  ff #         lda
  driver-dir ^ sta  ( all bits of portb are output )
  ( by doing nothing, porta is all input )
  0a2 #        lda
  cntl ^       sta ( portb is pulse mode; ca2 is neg-edge interrupt )
  0004 #       ldd ( 0400 *hex*, ~1.024 ms, byte-swapped )
  timer1 ^     std  ( ~1ms interrupts )
  40 #         lda
  aux-cntl ^   sta   ( continuous interrupts from timer1 )
  0c1 #        lda
  intp-masks ^ sta   ( timer1 and ca2 will generate interrupt )
  0af #        andcc      ( **enable interrupts** )
  next end-code


hex
: keycol!  b800 c! ;
: keyrow@  b401 c@ ;

: 2dup  over over ;
: -rot  rot rot ;

decimal
: 8keys  ( col# mask -- mask' ) ( check 8 consecutive keys )
  ( caller has set portc to the proper mask for this col# )
  keyrow@   ( get row mask for this column of matrix )
  over xor  ( mask of 1's for keys which have changed state )
  ?dup if  ( if mask = 0 we're done )
    8 0 do
      ( col# old.mask chg.mask )
      2dup and 1 and if ( if key *changed* and *was* up )
        rot dup i 3 lshift + 36 + add-note -rot ( play note )
      endif
      swap rrotate8 swap rrotate8 ( rotate old, chg masks )
      ( rotates right; lsb is lowest key flag )
    loop
    xor ( old.mask xor change = new mask )
  endif
  swap drop ( drop col# ) ;

hex
: scan  ( scan keybd *once*, aging notes as you go )
  0fe
  8 0 do  ( columns )
    age-notes
    dup keycol!  ( write mask to portc )
    i keys +  i over c@  8keys  swap c!
    lrotate8
  loop drop ;

: clear-keys
  keys 8 + keys do -1 i ! 2 +loop ;

( *** TEMPORARY KLUDGE *** )
( this maps notes to marimba frames )
( map maps note x8 to x2 and x9 to x3, then maps 40 -> 46 )
( where the marimba frames start. )
decimal
: map   dup 10 umod 7 - 0> if 6 - endif 6 + ;

( add-note is redefined to first mask off high bit -- )
( it really screws up the modulo calculation in map! -- )
( and then call the old add-note. )
: add-note  127 and  map add-note ;

( ** END KLUDGE ** )


