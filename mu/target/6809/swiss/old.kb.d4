( old.kb -- the *real* swiss keybd driver )
( daf  11-feb-93 created )

forth target

hex
code high-bit?
  clra clrb
  1 u #) tst
  0< if 1 # subd endif
  u ) std  next end-code

code 1+c!
  u )++ [] inc  next end-code

b401 const keybd    ( porta on via )

: 8keys  ( mask -- mask' ) ( check 8 consecutive keys )
  8 0 do
    age-notes
    lrotate8  ( rotates left; msb is lowest key flag )
    keybd c@ high-bit? if  ( key down )
      dup 1 and 0= if  ( and if key *was* up )
        keybd c@ 24 + add-note 1 or  ( set bit in vector )
      endif
    else ( key is *up* )
      0fe and ( clear bit in vector )
    endif
    keybd 1+c! ( next key )
  loop ;

hex
( we better have set up the firq interrupt vector before this! )
( I made this code for space reasons. )
code init-via
  ff #         lda
  driver-dir ^ sta  ( all bits of portb are output )
  7f #         lda
  keybd-dir ^  sta  ( keybd is low 7 out, high 1 in )
  0a2 #        lda
  cntl ^       sta ( portb is pulse mode; ca2 is neg-edge interrupt )
  0004 #       ldd ( 0400 *hex*, ~1.024 ms, byte-swapped )
  timer1 ^     std  ( ~1ms interrupts )
  40 #         lda
  aux-cntl ^   sta   ( continuous interrupts from timer1 )
  0c1 #        lda
  intp-masks ^ sta   ( timer1 and ca2 will generate interrupt )
  0af #        andcc      ( **enable interrupts** )
  next end-code

: scan  ( scan *once*, aging notes )
  0 keybd c!  ( lowest note )
  keys 8 + keys do
    i c@ ( get vector byte )
    8keys i c!
  loop ;

: clear-keys
  keys 8 + keys do 0 i ! 2 +loop   ( clear vector ) ;



