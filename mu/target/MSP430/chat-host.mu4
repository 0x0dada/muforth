( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2015 David Frech. (Read the LICENSE for details.)

loading MSP430 serial chat protocol (host)

hex

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  Idle   - these command bytes are ignored

10  GetVersion  - get the chat protocol version
11  SetAddr     - set the memory address pointer
12  GetSP       - get stack pointer - points to saved regs
13  ReadWord    - read a word from memory, incr pointer
14  ReadWords   - read N words, incrementing as we go
15  WriteWord   - write a word to memory, incr pointer
16  Run         - set the pc in the saved frame, pop the registers and
                - saved status, and go
17  FlashWord   - write word to flash, incr pointer
                - execute command saved on chat frame
                - target returns flash status
18  GetCheck    - get target's checksum value

19 - ff  Idle   - these command bytes are ignored
)

variable checksum
: sum!  0 checksum ! ;
: sum  ( w)  checksum @  xor  checksum ! ;

: >b         dup sum  send ;
: b>   recv  dup sum ;

: >w                     dup sum  >hilo  send send ;
: w>   recv recv  lohi>  dup sum ;


: c.Idle                   0 >b         ;
: c.GetVersion  ( - n)    10 >b      w> w>  ( lo hi)  10 << + ;
: c.SetAddr     ( a)      11 >b  >w     ;
: c.GetSP       ( - sp)   12 >b      w> ;
: c.ReadWord    ( - w)    13 >b      w> ;
: c.ReadWords   ( n)      14 >b  >b     ;  ( then read streamed bytes)
: c.WriteWord   ( w)      15 >b  >w     ;
: c.Run         ( )       16 >b         ;
: c.FlashWord   ( w - w)  17 >b  >w  w> ;
: c.GetCheck    ( )       18 >b      w> drop ;


.ifdef paranoid

( Reset host's and target's checksum accumulator.)
: ?reset   c.GetCheck              sum! ;
: ?ok      c.GetCheck  checksum @  sum!
   =if  ." checksum failed: " u.  ^  then  drop ;

.else

: ?reset ;
: ?ok ;

.then


( Send two no-ops, let them transmit, _then_ throw away any input bytes.)
: resync  c.Idle  c.Idle  drain  flush ;

: c.setup-chunk  ( buf a u - #words)
   swap c.SetAddr  swap m !  1+ 2/ ( words) ;

( Copy flash command to target stack)
( NOTE: already has FKEY set!)
: c.copy-fcmd  ( fcmd)
   c.GetSP .FCMD + c.SetAddr  c.WriteWord ;

( For a tiny bit of protection against accidental flashing, let's zero the
  FCMD after a page erase or chunk of flashword commands.)
: c.clear-fcmd   0 c.copy-fcmd ;

( Hook into interact code.)
: c.Hello
   #115200 bps  resync
   ?reset
.ifndef ignore-version
   cr ." Chat firmware version "  c.GetVersion  ?ok
   radix preserve  hex  sep preserve  -sep   u.
.then ;

: c.ReadChunk    ( buf a u)
   c.setup-chunk  dup c.ReadWords  ?for  w> >hilo  m& m&  next  then
   ?ok ;

: c.WriteChunk   ( buf a u)
   c.setup-chunk  ?for  m* m* lohi>  c.WriteWord  next  then
   ?ok ;

( We used to do ?reset in c.Run, but if we're resetting the chip we'll lose
  the GetCheck command and time out. Doing it here makes more sense.)

: c.GetRegs  ( buf - sp)  ?reset  c.GetSP  dup push  .LAST  c.ReadChunk  pop ;
: c.SetRegs  ( buf)               c.GetSP            .LAST  c.WriteChunk ;

: c.ErasePage ( a fcmd - status)
   c.copy-fcmd  c.SetAddr  0 c.FlashWord  c.clear-fcmd ;

( Or together the statuses from each FlashWord command and return it.)
: c.FlashChunk   ( buf a u fcmd - status)
   c.copy-fcmd
   c.setup-chunk  0 swap  ?for  m* m* lohi>  c.FlashWord  or  next  then
   c.clear-fcmd
   ?ok ;


( The interact interfaces for ReadWord and WriteWord take an address. Let's
  make that work, but also streamline the conversation with the target to
  only set the address if necessary.)

variable chat-addr  chat-addr on
: ?set-addr  ( a)
   chat-addr @ over xor if  dup c.SetAddr  then  \m cell+  chat-addr ! ;

: c.ReadWordAddr   ( a - w)  ?set-addr  c.ReadWord   ?ok ;
: c.WriteWordAddr  ( w a)    ?set-addr  c.WriteWord  ?ok ;


( NOTE: We don't define RunWait separately. Since we will always be reading
  the registers back after Run, that first command - the GetSP in GetRegs -
  will block until the target is ready.)

: chat
   chat-via  c.Hello  c.GetRegs  c.SetRegs  c.ReadWordAddr  c.WriteWordAddr
             c.ReadChunk  c.WriteChunk  c.ErasePage  c.FlashChunk  c.Run ;
