( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2014 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading MSP430 serial chat protocol (core)

hex

__meta

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  Idle   - these command bytes are ignored

10  GetVersion  - get the chat protocol version
11  SetAddr     - set the memory address pointer
12  GetSP       - get stack pointer - points to saved regs
13  ReadWord    - read a word from memory, incr pointer
14  ReadWords   - read N words, incrementing as we go
15  WriteWord   - write a word to memory, incr pointer
16  Run         - pop the registers and save status, and go

17 - ff  Idle   - these command bytes are ignored
)

( XXX How do we write to the flash?

  Not sure yet about these last two... Can we write flash a word at a time?
  Or does that violate the "cumulative charge time" for a block? We may end
  up having to copy a RAM-resident routine that loadss a buffer into the
  flash all at once. And in that case, we might as well use Run to execute
  it...

  FlashWord
  FlashStatus
)

( Register conventions:
  Use   i as memory pointer
      cnt as byte count
        t to pass a parameter around
        x as scratch)

label get-byte
   begin  01 # IFG2 & bitb  0!= until
   UCA0RXBUF & t movb  ret  ;c

label put-byte
   begin  02 # IFG2 & bitb  0!= until
   t UCA0TXBUF & movb  ret  ;c

label get-word
   get-byte c  t x mov
   get-byte c  t swpb  x t bis  ret  ;c

label put-word
   put-byte c  t swpb  put-byte j  ;c

( NOTE: This should be incremented with any change to the command set!)
label get-version
   0001 # t mov  put-word j  ;c

label set-addr
   get-word c  t i mov  ret  ;c

label get-sp
   sp t mov  2 # t add  put-word j  ;c

label read-word
   i )+ t mov  put-word j  ;c

label read-words
   get-byte c  t cnt mov
   begin  read-word c  1 # cnt sub  0= until  ret  ;c

label write-word
   get-word c  t i ) mov  2 # i add  ret  ;c

label run
   2 # sp add  ( skip return address to chat-entry)
     i pop  r pop  t pop
   cnt pop  x pop  y pop
   reti  ;c

( Dispatch.)
label process
   get-byte c  ( cmd)

   10 # t sub  get-version   0!= until
   01 # t sub  set-addr      0!= until
   01 # t sub  get-sp        0!= until
   01 # t sub  read-word     0!= until
   01 # t sub  read-words    0!= until
   01 # t sub  write-word    0!= until
   01 # t sub  run           0!= until

.ifdef bootloader

   ( Support for self-programming.)
   ( XXX this is crap from AVR iic code)
   20 xl cpi  0= if  write-word         rjmp  then
   21 xl cpi  0= if  erase-page         rjmp  then
   22 xl cpi  0= if  program-page       rjmp  then
   23 xl cpi  0= if  clear-page-buffer  rjmp  then
   24 xl cpi  0= if  app-start          rjmp  then
   25 xl cpi  0= if  app-stop           rjmp  then

.then

   ( unknown... restart!)
   ret  ;c

( Push registers and start conversing with host.)
label chat-entry
   ( call has already pushed PC)
   sr push  sr clr  ( disable interrupts!)
   y push  x push  cnt push
   t push  r push    i push
   begin  process c  again  ;c

label interact
   begin  chat-entry c  again  ;c

Vreset handler
   -- set SP to end of RAM
   @ram #ram +  # sp mov

   -- disable watchdog timer
   5a80 # WDTCTL & mov

   -- Set clock to factory-calibrated 16 MHz
   -- See G2553 datasheet, p15
   TAG_DCO_30 CAL_BC1_16MHZ + & BCSCTL1 & movb
   TAG_DCO_30 CAL_DCO_16MHZ + & DCOCTL & movb
   BCSCTL2 & clrb

   -- Configure UART for 115,200 bps, 8 bits, no parity
   81 # UCA0CTL1 & bisb          -- enable SMCLK
                                 -- hold UART in reset while configuring
   UCA0CTL0 & clrb               -- reset to defaults: 8 bits, no parity, 1 stop
   UCA0BR1 & clrb                -- set baud rate divisor
   8 # UCA0BR0 & movb
   %1011_0001 # UCA0MCTL & movb  -- 16x oversample; set modulator for 115,200
   01 # UCA0CTL1 & bicb          -- bring UART out of reset

   -- Connect port pins P1.1 and P1.2 to UART
   -- SEL=1 & SEL2=1
   %0000_0110 # P1SEL & bisb
   %0000_0110 # P1SEL2 & bisb

   -- Set up flash clock; needs to be between 257 and 476 kHz (no joke)
   -- We're running at 16M, so set it to 16M/40 = 400k.
   0a500 ( FWKEY)  #39 ( divisor-1) +  %0100_0000 ( MCLK)  + # FCTL2 & mov

   begin  interact c  again  ;c


( Set BSL flag to _not_ mass erase if wrong password entered during BSL
  "hello" sequence.)

here
Vbslkey org  0 ,
org
