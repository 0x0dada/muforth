( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2015 David Frech. (Read the LICENSE for details.)

loading MSP430 serial chat protocol (core)

hex

__meta

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  Idle   - these command bytes are ignored

10  GetVersion  - get the chat protocol version
11  SetAddr     - set the memory address pointer
12  GetSP       - get stack pointer - points to saved regs
13  ReadWord    - read a word from memory, incr pointer
14  ReadWords   - read N words, incrementing as we go
15  WriteWord   - write a word to memory, incr pointer
16  Run         - pop the registers and saved status, and go
17  FlashWord   - write a word to flash, using command byte saved on stack
                - can be used to initiate an erase, or to write a word
18  GetCheck    - return accumulated checksum to host

19 - ff  Idle   - these command bytes are ignored
)


( Register conventions:
  Use  ip as memory pointer
    count as byte count
      top to pass a parameter around
        x as scratch
        y as checksum)

label get-byte
   begin  01 # IFG2 & bitb  0!= until
   UCA0RXBUF & top movb  ret  ;c

label put-byte
   begin  02 # IFG2 & bitb  0!= until
   top UCA0TXBUF & movb  ret  ;c

label get-word
   get-byte c  top x mov
   get-byte c  top swpb  x top bis  top y xor  ret  ;c

label put-word
   top y xor  ( fall thru)  ;c

label put-word-unsummed
   put-byte c  top swpb  put-byte j  ;c

( Compile the first 32 bits of the current muforth Git commit.
  When asked for the version, return these two 16-bit words, in
  little-endian order.)

muforth-commit drop 8 evaluate
   dup 10 >>  swap  ( high low)

label get-version
   ( commit-lo) # top mov  put-word c
   ( commit-hi) # top mov  put-word j  ;c

label set-addr
   get-word c  top ip mov  ret  ;c

label get-sp
   sp top mov  2 # top add  put-word j  ;c

label read-word
   ip )+ top mov  put-word j  ;c

label read-words
   get-byte c  top tst  0!= if
      top y xor  top count mov
      begin  read-word c  1 # count sub  0= until
   then  ret  ;c

label write-word
   get-word c  top ip ) mov  2 # ip add  ret  ;c

label run
   4 # sp add  ( skip return address to chat-entry & flash command)
      ip pop  w pop  rp pop  count pop
     top pop  x pop   y pop
   reti  ;c

( Write a word into flash, using the flash command stored on the stack. It
  can be used to erase or program the flash.)

label flash-word
   get-word c                    -- get value to write
   FKEY         # FCTL3 & mov    -- clear FLOCK
   2 sp +) FCTL1 & mov           -- write flash command - must have FKEY!
   top ip ) mov  2 # ip add      -- write word and incr pointer
.ifdef in-ram
   begin  FBUSY # FCTL3 & bit  0= until
.then
   FKEY # FCTL1 & mov            -- clear command
   FKEY FLOCK + # FCTL3 & mov    -- set FLOCK
   FCTL3 & top mov  put-word j   -- read status and return it
   ;c

label get-check
   y top mov  0ffff # y mov  put-word-unsummed j  ;c

( Dispatch.)
label command-table
   ( 10) get-version ,
   ( 11) set-addr ,
   ( 12) get-sp ,
   ( 13) read-word ,
   ( 14) read-words ,
   ( 15) write-word ,
   ( 16) run ,
   ( 17) flash-word ,
   ( 18) get-check ,

label process
   get-byte c  ( cmd)
   top y xor

   10 # top sub   ( 00 to 0f become large unsigned numbers)
   process command-table - 2/ # top cmp  u< if
      top top add  command-table top +) pc mov  ( jump!)
   then

   ( unknown... ignore!)
   ret  ;c

( Push registers and start conversing with host.)
label chat-entry
   ( call has already pushed PC)
      sr push  sr clr  ( disable interrupts!)
       y push   x push  top push
   count push  rp push    w push  ip push
     0 # push  ( room for flash command)
   begin  process c  again  ;c

label interact
   begin  chat-entry c  again  ;c

Vreset handler
   -- set SP to end of RAM
   @ram #ram +  # sp mov

   -- disable watchdog timer
   WDTKEY 80 + # WDTCTL & mov

   -- Set clock to factory-calibrated 16 MHz
   -- See G2553 datasheet, p15
   TAG_DCO_30 CAL_BC1_16MHZ + & BCSCTL1 & movb
   TAG_DCO_30 CAL_DCO_16MHZ + & DCOCTL & movb
   BCSCTL2 & clrb

   -- Configure UART for 115,200 bps, 8 bits, no parity
   81 # UCA0CTL1 & bisb          -- enable SMCLK
                                 -- hold UART in reset while configuring
   UCA0CTL0 & clrb               -- reset to defaults: 8 bits, no parity, 1 stop
   UCA0BR1 & clrb                -- set baud rate divisor
   8 # UCA0BR0 & movb
   %1011_0001 # UCA0MCTL & movb  -- 16x oversample; set modulator for 115,200
   01 # UCA0CTL1 & bicb          -- bring UART out of reset

   -- Connect port pins P1.1 and P1.2 to UART
   -- SEL=1 & SEL2=1
   %0000_0110 # P1SEL & bisb
   %0000_0110 # P1SEL2 & bisb

   -- Set up flash clock; needs to be between 257 and 476 kHz (no joke)
   -- We're running at 16M, so set it to 16M/40 = 400k.
   FKEY #39 ( divisor-1) +  %0100_0000 ( MCLK)  + # FCTL2 & mov

   begin  interact c  again  ;c


( Set BSL flag to _not_ mass erase if wrong password entered during BSL
  "hello" sequence.)

here
Vbslkey org  0 ,
org
