( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2016 David Frech. (Read the LICENSE for details.)

loading MSP430 serial chat protocol v2 (core)

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 1f  Idle   - these command bytes are ignored

20  GetVersion  - get the chat protocol version
21  SetAddr     - set the memory address pointer
22  GetSP       - get stack pointer - points to saved regs
23  ReadWord    - read a word from memory, incr pointer
24  ReadWords   - read N words, incrementing as we go
25  WriteWord   - write a word to memory, incr pointer
26  Run         - pop the registers and saved status, and go
27  FlashWord   - write a word to flash, passing command each time
                - can be used to initiate an erase, or to write a word
28  GetCheck    - return accumulated checksum to host

29 - ff  Idle   - these command bytes are ignored
)

decimal

assembler
( The chat code saves and restores - but does not otherwise touch - the
  context pointer, cp. It is used to pass execution context between the
  host and target. By default we assume it is the first "callee-saved"
  register, r4.)

 04 constant cp     ( context pointer)

( These are all considered "caller saved" registers. They are scratch.
  Called code can freely clobber them.)

 12 constant top    ( current accumulator)
 13 constant mp     ( memory pointer)
 14 constant count  ( word count)
 15 constant check  ( checksum accumulator)
forth

hex

__meta

label get-byte
   begin  01 # IFG2 & bitb  0!= until
   UCA0RXBUF & top movb  ret  ;c

label put-byte
   begin  02 # IFG2 & bitb  0!= until
   top UCA0TXBUF & movb  ret  ;c

label get-word
   get-byte c  top push  ( save low byte)
   get-byte c  top swpb  sp )+ top bis  ( combine high and low)
   top check xor  ( xor into checksum)  ret  ;c

label get-check
   check top mov  ( fall thru)  ;c     -- zeroes checksum!

label put-word
   top check xor  ( xor into checksum)
   put-byte c  top swpb  put-byte j  ;c

( Compile the first 32 bits of the current muforth Git commit.
  When asked for the version, return these two 16-bit words, in
  little-endian order.)

muforth-commit drop 8 evaluate
   dup 10 >>  swap  ( high low)

label get-version
   ( commit-lo) # top mov  put-word c
   ( commit-hi) # top mov  put-word j  ;c

label set-addr
   get-word c  top mp mov  ret  ;c

label get-sp
   sp top mov  2 # top add  put-word j  ;c

label read-word
   mp )+ top mov  put-word j  ;c

label read-words
   get-byte c  top tst  0!= if
      top check xor  ( xor into checksum)  top count mov
      begin  read-word c  1 # count sub  0= until
   then  ret  ;c

label write-word
   get-word c  top mp ) mov  2 # mp add  ret  ;c

label run
   2 # sp add  ( skip return address to chat-entry)
   cp pop  ( context pointer)  reti  ;c

( Write a word into flash, using the flash command stored on the stack. It
  can be used to erase or program the flash.)

label flash-word
   get-word c  top push          -- get value to write
   get-word c                    -- get flash command + key
   FKEY         # FCTL3 & mov    -- clear FLOCK
   top FCTL1 & mov               -- write flash command - must have FKEY!
   mp ) pop  2 # mp add          -- write word and incr pointer
.ifdef in-ram
   begin  FBUSY # FCTL3 & bit  0= until
.then
   FKEY # FCTL1 & mov            -- clear command
   FKEY FLOCK + # FCTL3 & mov    -- set FLOCK
   FCTL3 & top mov  put-word j   -- read status and return it
   ;c

( Dispatch.)
label command-table
   ( 20) get-version ,
   ( 21) set-addr ,
   ( 22) get-sp ,
   ( 23) read-word ,
   ( 24) read-words ,
   ( 25) write-word ,
   ( 26) run ,
   ( 27) flash-word ,
   ( 28) get-check ,

label process
   get-byte c  ( cmd)
   top check xor   ( xor into checksum)

   20 # top sub   ( 00 to 1f become large unsigned numbers)
   process command-table - 2/ # top cmp  u< if
      top top add  command-table top +) pc mov  ( jump!)
   then

   ( unknown... ignore!)
   ret  ;c

( Push registers and start conversing with host.)
label chat-entry
   ( call has already pushed PC)
   sr push  sr clr  ( disable interrupts!)  cp push
   begin  process c  again  ;c

Vreset handler
   -- set SP to end of RAM
   @ram #ram +  # sp mov

.ifndef in-ram  ( the flash-based code already did all this)

   -- disable watchdog timer
   WDTKEY 80 + # WDTCTL & mov

   -- Set clock to factory-calibrated 16 MHz
   -- See G2553 datasheet, p15
   TAG_DCO_30 CAL_BC1_16MHZ + & BCSCTL1 & movb
   TAG_DCO_30 CAL_DCO_16MHZ + & DCOCTL & movb
   BCSCTL2 & clrb

   -- Configure UART for 115,200 bps, 8 bits, no parity
   81 # UCA0CTL1 & bisb          -- enable SMCLK
                                 -- hold UART in reset while configuring
   UCA0CTL0 & clrb               -- reset to defaults: 8 bits, no parity, 1 stop
   UCA0BR1 & clrb                -- set baud rate divisor
   8 # UCA0BR0 & movb
   %1011_0001 # UCA0MCTL & movb  -- 16x oversample; set modulator for 115,200
   01 # UCA0CTL1 & bicb          -- bring UART out of reset

   -- Connect port pins P1.1 and P1.2 to UART
   -- SEL=1 & SEL2=1
   %0000_0110 # P1SEL & bisb
   %0000_0110 # P1SEL2 & bisb

   -- Set up flash clock; needs to be between 257 and 476 kHz (no joke)
   -- We're running at 16M, so set it to 16M/40 = 400k.
   FKEY #39 ( divisor-1) +  %0100_0000 ( MCLK)  + # FCTL2 & mov

.then  ( not in-ram)

   chat-entry # push  ( so it's always available at the top of the stack)
   begin  chat-entry c  again  ( so we can be lazy and "ret" back into chat)
   ;c


( Set BSL flag to _not_ mass erase if wrong password entered during BSL
  "hello" sequence.)

here
Vbslkey org  0 ,
org
