( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2014 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading MSP430 Forth kernel

( Yes, you guessed it: The guts of Forth for the MSP430! This chip is
  awesomely well-suited to running Forth, and in fact, it will even run an
  ITC - indirect-threaded code - Forth with almost no overhead.

  Since this is the purest and most elegant expression of Forth, it's
  pretty great that it will fit nicely onto the chip. With 16-bit addresses
  and ITC, a ton of code will fit into the MSP430G2553's 16 KiB of flash.)

( XXX move these to meta?)
assembler
comment %%
  NOTE: if we did  w )+ pc mov  next would take 1 cycle more, but docolon
  and friends would be shorter and simpler... %%

: next     asm{  ip )+ w mov  w ) pc mov  } ;

: rpush    ( ea)  asm{   2 # rp sub   ( ea)  rp )  mov  } ;
: rpop     ( ea)  asm{       rp )+  \f swap ( ea)  mov  } ;

: nest     asm{  ip rpush  } ;
: unnest   asm{  ip rpop   } ;
forth

__meta
hex

implements dodoes    nest  ip pop  ( fall thru to dovar/docreate)  ;c

( Note the structural similarities!)
meta: create     name  0 ,   ;code   top push  2 # w add  w top mov  next  ;c
meta: constant   create  ,   ;code   top push        2 w +) top mov  next  ;c
meta: :          create  ]   ;code   nest      2 # w add   w ip mov  next  ;c

code*  ^                           unnest                  begin     next  ;c
codes nope

( Allocate space _before_ defining the buffer, so we can define them in
  ram as well as in flash!)

meta: buffer   ( #bytes)   'ram @  swap 'ram +!  constant  ;
meta: variable    2 buffer ;

code* (lit)  top push  ip )+ top mov  next  ;c

code*    (branch)      ip )   ip mov  next  ;c
code*   (0branch)   top tst  top pop  ' (branch) >body 0!= until  ( fall thru)  ;c
label        skip         2 # ip add  next  ;c
code*  (?0branch)   top tst  skip 0= until  top pop  ' (branch) >body j  ;c

( If we also wanted =0branch, it would look like this:)
code*  (=0branch)   top tst  skip 0= until           ' (branch) >body j  ;c

( Fast version, using count register)
code* (for)   ( u)   count rpush  top count mov  top pop  next  ;c
code* (next)     1 # count sub  ' (branch) >body 0= until  count rpop  skip j  ;c

( Slow version, keeping count on R stack)
( for is just >r. next is 3 cycles slower per iteration then fast next)
-- code* (next)     1 # rp ) sub  ' (branch) >body 0= until  2 # rp add  skip j  ;c


( Do-loop frame looks like this:

  +--------------------+
  |  saved count reg   |
  +--------------------+
  |       limit        |<--- rp
  +--------------------+

   Current index is in count register; current "user-visible" index is
   calculated as count + limit.)

code* (do)   ( limit start)
   4 # rp sub  ( make room on R stack - all in one go)
    count 2 rp +) mov  ( save count reg on R)
   x pop  x rp  ) mov  ( save limit to R)
   x top sub  top count mov  ( count = start - limit)
   top pop  next  ;c

( Increment count. If it overflows to zero, restore count register, pop
  stack frame, skip backwards jump, and continue. If non-zero, simply take
  the backwards jump.)

code* (loop)
   1 # count add  ' (branch) >body 0= until
label undo
   2 # rp add  rp )+ count mov  skip j  ;c

( Add incr to count. If the sign of count has changed, we've crossed the
  threshold, so restore count, pop frame, and skip jump. Otherwise, take
  the backwards jump.)

code* (+loop)  ( incr)
   count x mov  ( save count value)
   top count add   top pop   count x xor  undo 0>= until
   ' (branch) >body j  ;c

( Push current loop index. index = count + limit)
code i   ( - index)
  top push  count top mov  rp ) top add  next  ;c


( Basic unary ops.)
code invert   top inv               next  ;c
code negate   top inv  1 # top add  next  ;c

code 2*      top top add  next  ;c
code 2/          top asr  next  ;c
code u2/   clrc  top ror  next  ;c

( Basic binary ops.)
code +     sp )+ top add  next  ;c

code and   sp )+ top and  next  ;c
code or    sp )+ top bis  next  ;c
code xor   sp )+ top xor  next  ;c

( Stack ops.)
code dup    ( t - t t)            top push                   next  ;c
code swap   ( x t - t x)   x pop  top push        x top mov  next  ;c
code nip    ( x t - t)                           2 # sp add  next  ;c
code drop   ( x t - x)                              top pop  next  ;c
code over   ( x t - x t x)        top push  2 sp +) top mov  next  ;c

code tuck  (   x t - t x t)  x pop       top push    x push             next  ;c
code rot   ( y x t - x t y)  x pop  y pop  x push  top push  y top mov  next  ;c

( Return stack ops.)
code >r   ( w)    top rpush  top pop   next  ;c
code r>   ( - w)  top push   top rpop  next  ;c
code r@   ( - w)  top push   rp ) top mov  next  ;c

( Memory access.)
code @   ( a - w)  top ) top mov   next  ;c
code c@  ( a - b)  top ) top movb  next  ;c

code !   ( w a)    sp )+ top ) mov   top pop  next  ;c
code c!  ( b a)    sp )+ top ) movb  top pop  next  ;c


( These are a bit tricky, esp since borrow is ~carry. The idea is: get the
  inverse of the flag value we want into carry, then subtract top from
  itself - yielding zero - minus borrow, or -1 for true, 0 for false. It's
  efficient but non-obvious.)

code 0=                   1 # top sub  ( ~Z -> C)  ( fall thru)  ;c
label makeflag   top top subc  next  ;c

code 0<   8000 # top xor  top top add  ( ~N -> C)  makeflag j  ;c
code u<          x pop  top x cmp  ( ~uless -> C)  makeflag j  ;c

code  <          x pop  top x cmp  clrc  makeflag >= until
                                   setc  makeflag j  ;c

( Putting - here so you can see that it's more like < than +)
code -           x pop  top x sub  x top mov  next  ;c

code execute   ( cfa)    begin  top w mov  top pop  w ) pc mov  ;c
code @execute  ( 'cfa)   top ) top mov  again  ;c


( Small constants.)
-2 constant -2
-1 constant -1
 0 constant 0
 1 constant 1
 2 constant 2

( Incrementers by small constants. Shared code means they take up very
  little space!)

meta: incr   constant  ;code  2 w +) top add  next  ;c
 1 incr 1+
 2 incr 2+

-1 incr 1-
-2 incr 2-


ram

( For debugging and interactive execution.)
( Host should have set PC -> start-forth or continue-forth
                       SP -> top of R stack
                        W -> top of D stack
                      TOP -> word to execute)

code bug
   top push  ( so all of D stack is in memory)
   sp w mov  rp sp mov  ( D stack -> W, R stack -> SP)
implements bug-to-chat
   1000 # br  ;c  ( jump to chat-entry; address patched by hi)

( patched by start-forth)
label trampoline   ]  nope  begin  bug  again  [

implements start-forth
   trampoline # ip mov  top ip ) mov
   ( fall thru)  ;c

implements continue-forth
   sp rp mov  w sp mov  ( R stack -> RP, D stack -> SP)
   top pop  ( host pushed depth+1 things onto D stack)
   next  ;c

( Leave the user in ram.)
