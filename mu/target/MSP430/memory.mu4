( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2017 David Frech. (Read the LICENSE for details.)

loading MSP430 memory image

( Space for compiling into. I think MSP430s max out at 128 KiB, but for now
  let's limit ourselves to 64k address space. This is where most of the
  varieties I'm interested in max out.)

( Helpfully, all MSP430s start their RAM at the same place:)
"0200 constant @ram

( Also, AFAIK info memory always starts in the same place.) 
"1000 constant @info

( We are quickly prototyping this using a G2553 device, so default the size
  of ram, flash, and info flash accordingly:)
.ifndef #ram
  512 constant #ram
.then

.ifndef #flash
  16 Ki constant #flash
.then

.ifndef #info
   256 constant #info
.then

"1_0000 #flash - constant @flash

( Represent the entire address space. This way we don't worry about any
  translation issues - like forcing target address fc00 to refer to first
  byte of the image buffer.)

64 Ki constant #image

( MSP430s are little-endian.)
-d little-endian
-d aligned-words

ld target/common/memory-small-flat.mu4

( h points to one of:)
@ram   image-region ram     ( image-region sets origin and ptr)
@flash image-region flash
@info  image-region info


( XXX Deprecate flash slots for MSP430 too? I gave up these for the HC08
  and created a firmware-map instead.)

( Create a notion of flash "slots" for firmware, which I tend to program in
  chunks of 512 bytes - not coincidentally the MSP430 flash segment size.

  Use this to init the flash region to this slot. Slot 0 is the bootloader
  - ie, 0fe00. Slot 1 is "200 bytes before that: 0fc00. Etc.)

: fslot  ( num)  1+  "-200 *  [ @flash #flash + ]  +  dup @flash u< if
   error" Too many slots for flash!"  then
   h preserve  flash  ( don't want to change this for our caller)
   region! ;


( Erase image memory and default to ram region.)
wipe  ram
