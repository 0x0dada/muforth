0000 0000 0000 0000  nop

0000 0000 0000 0011  sleep
0000 0000 0000 0100  clrwdt   clear watchdog timer
0000 0000 0000 0101  push     inc STKPTR; TOS U:H:L = pc + 2
0000 0000 0000 0110  pop      dec STKPTR
0000 0000 0000 0111  daw      decimal adjust w

0000 0000 0000 1000  tblrd*    read program memory
0000 0000 0000 1001  tblrd*+   read program memory, post incr
0000 0000 0000 1010  tblrd*-   read program memory, post decr
0000 0000 0000 1011  tblrd+*   read program memory, pre incr

0000 0000 0000 1100  tblwt*    write program memory
0000 0000 0000 1101  tblwt*+   write program memory, post incr
0000 0000 0000 1110  tblwt*-   write program memory, post decr
0000 0000 0000 1111  tblwt+*   write program memory, pre incr

( s=1 means restore W, STATUS, BSR from shadow regs.)
0000 0000 0001 000s  retfie    return from interrupt and enable
0000 0000 0001 001s  return    subroutine return

0000 0000 1111 1111  reset

0000 0001 0000 kkkk  movlb   bank = k

0000 001a ffff ffff  mulwf  f = w * f
0000 01da ffff ffff  decf   f/w = f - 1

0000 1000 kkkk kkkk  sublw   w = k - w  ( !!)  ( rsub? rsb?)
0000 1001 kkkk kkkk  iorlw   w = k or w
0000 1010 kkkk kkkk  xorlw   w = k xor w
0000 1011 kkkk kkkk  andlw   w = k and w

0000 1100 kkkk kkkk  retlw   return with w = k
0000 1101 kkkk kkkk  mullw   w = k * w
0000 1110 kkkk kkkk  movlw   w = k
0000 1111 kkkk kkkk  addlw   w = k + w

( d=0 means dest is W; d=1 means dest is F
  a=0 means access RAM - BSF ignored
  a=1 means use BSF bank register)

0001 00da ffff ffff  iorwf
0001 01da ffff ffff  andwf
0001 10da ffff ffff  xorwf
0001 11da ffff ffff  comf   f/w = ~f

0010 00da ffff ffff  addwfc
0010 01da ffff ffff  addwf
0010 10da ffff ffff  incf   f/w = f + 1
0010 11da ffff ffff  decfsz  f/w = dec f, skip zero

0011 00da ffff ffff  rrcf   f/w = f rotate r thru C
0011 01da ffff ffff  rlcf   f/w = f rotate l thru C
0011 10da ffff ffff  swapf  f/w = swap_nybbles(f)
0011 11da ffff ffff  incfsz  f/w = inc f, skip zero

0100 00da ffff ffff  rrncf  f/w = f rotate r
0100 01da ffff ffff  rlncf  f/w = f rotate l
0100 10da ffff ffff  infsnz  f/w = inc f, skip nz
0100 11da ffff ffff  dcfsnz  f/w = dec f, skip nz

0101 00da ffff ffff  movf    f/w = f  ( affects N, Z)  ( tst?)
0101 01da ffff ffff  subfwb  f/w = w - f - borrow (~C)
0101 10da ffff ffff  subwfb  f/w = f - w - borrow
0101 11da ffff ffff  subwf   f/w = f - w

0110 000a ffff ffff  cpfslt  comp f - w, skip lt ( unsigned)
0110 001a ffff ffff  cpfseq  comp f - w, skip eq
0110 010a ffff ffff  cpfsgt  comp f - w, skip gt ( unsigned)
0110 011a ffff ffff  tstfsz  test f, skip if 0

0110 100a ffff ffff  setf    f = ff  ( no status chg)
0110 101a ffff ffff  clrf    f = 0   ( Z = 1)
0110 110a ffff ffff  negf    f = -f
0110 111a ffff ffff  movwf   f = w  ( no status chg)  ( store?)

0111 bbba ffff ffff  btg   bit toggle f
1000 bbba ffff ffff  bsf   bit set f
1001 bbba ffff ffff  bcf   bit clr f
1010 bbba ffff ffff  btfss  bit test, skip set
1011 bbba ffff ffff  btfsc  bit test, skip clr

1100 ffff ffff ffff  movff   + 1111 ffff ffff ffff

( pc = pc + 2 + 2n)
1101 0nnn nnnn nnnn  bra    branch relative
1101 1nnn nnnn nnnn  rcall  call relative

( pc = pc + 2 + 2n)
1110 0000 nnnn nnnn  bz    br if zero
1110 0001 nnnn nnnn  bnz   br if nz
1110 0010 nnnn nnnn  bc    br if carry
1110 0011 nnnn nnnn  bnc

1110 0100 nnnn nnnn  bov   br if overflow ( bv?)
1110 0101 nnnn nnnn  bnov
1110 0110 nnnn nnnn  bn    br if negative
1110 0111 nnnn nnnn  bnn   not negative!

1110 10xx            *unimplemented*

( s=1 means save W, STATUS, BSR in shadow regs.)
1110 110s kkkk kkkk   call  ( long)  + 1111 kkkk kkkk kkkk

1110 1110 00ff kkkk   lfsr           + 1111 kkkk kkkk kkkk  ( load pointer)
1110 1111 kkkk kkkk   goto  ( long)  + 1111 kkkk kkkk kkkk

1111 kkkk kkkk kkkk  nop   useful to extend an instruction with address bits
