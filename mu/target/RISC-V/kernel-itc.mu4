( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2017 David Frech. (Read the LICENSE for details.)

loading RISC-V Forth kernel (ITC)

( Yes, you guessed it: The guts of Forth for RISC-V!

  Because this is a true RISC architecture, doing threaded code doesn't
  seem to make a lot of sense. If you include NEXT inline in each code word -
  the speediest approach - you really need post-increment addressing.
  Otherwise NEXT can take up a lot of space!

  On RISC-V, NEXT for ITC - indirect-threaded code - is four instructions,
  and NEXT for DTC - direct-threaded code - is three.

  However! There are several advantages to doing ITC. One is that the
  system is dead simple, and it's easy to write "user-level" code that mucks
  about with the internals of words, since everything has a uniform
  structure.

  It's also cache-efficient, mostly separating data - pointers and
  variables - from code. In a native Forth these often end up next to each
  other in memory, making the caches' jobs more difficult. Since Forth is
  so simple, it's very likely that the entire native code implemenation will
  fit into the I-cache, making it potentially very fast. We'll see about
  this!

  Because this is a jump-and-link architecture that lets us specify the
  link register, we can do some tricks. This feature initially led me to
  think that a native Forth was the "best fit" for RISC-V. However, I still
  want to try ITC and see how well - or poorly - it works.)


-- ------------------------------------------------------------------------
-- Macros defining register conventions
-- ------------------------------------------------------------------------

assembler
\a a0  constant top
\a s1  constant ip  ( instruction pointer)
\a s0  constant rp  ( return stack pointer)
-- \a sp  constant sp  ( data stack pointer)
\a gp  constant kp  ( kernel origin pointer)  ( XXX needed?)
\a tp  constant up  ( "user" pointer - points to per-thread data)

( XXX these are outside of compressed instruction set's register range.)
\a s2  constant ix  ( loop index)
\a t0  constant w   ( scratch w, also "word" pointer)
\a t1  constant x   ( scratch x, also "execute" pointer)
\a t2  constant y   ( scratch y)
\a t3  constant z   ( scratch z)
forth

( Tell the disassembler about these register names.)
-:  ( reg)
   dup 0= if  drop  ." zero"  ^  then
   dup 16 u< if
            z"    ra sp kp up w  x  y  rp ip topa1 a2 a3 a4 a5 "
   else
      16 -  z" a6 a7 ix s3 s4 s5 s6 s7 s8 s9 s10s11z  t4 t5 t6 "
   then
   swap 3 * + 3 -trailing type ;

: forth-regs  [ ] is .regname ;  forth-regs

-- ------------------------------------------------------------------------
-- Macros defining common VM operations
-- ------------------------------------------------------------------------
assembler

( Compile NEXT inline.)
: next,   asm{  0 ip w lw   cell ip ip addi   -1 cells w x lw   0 x jr  } ;

( XXX Macros or subroutines?)
( Data stack macros.)
: push1  ( r1)            asm{  -1 cells sp sp addi   0 sp rot ( r1) sw  } ;

: push2  ( r2 r1)         asm{  -2 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw  } ;

: push3  ( r3 r2 r1)      asm{  -3 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw
                                                2 cells sp rot ( r3) sw  } ;

: push4  ( r4 r3 r2 r1)   asm{  -4 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw
                                                2 cells sp rot ( r3) sw
                                                3 cells sp rot ( r4) sw  } ;

: pop1  ( r1)             asm{  0 sp rot ( r1) lw      cell sp sp addi  } ;

: pop2  ( r2 r1)          asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw   2 cells sp sp addi  } ;

: pop3  ( r3 r2 r1)       asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw
                          2 cells sp rot ( r3) lw   3 cells sp sp addi  } ;

: pop4  ( r4 r3 r2 r1)    asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw
                          2 cells sp rot ( r3) lw
                          3 cells sp rot ( r4) lw   4 cells sp sp addi  } ;

( Return stack macros.)
: rpush1  ( r1)      asm{   -1 cells rp rp addi   0 rp rot ( r1) sw  } ;

: rpush2  ( r2 r1)   asm{   -2 cells rp rp addi   0 rp rot ( r1) sw
                                               cell rp rot ( r2) sw  } ;

: rpop1  ( r1)       asm{  0 rp rot ( r1) lw      cell rp rp addi  } ;

: rpop2  ( r2 r1)    asm{  0 rp rot ( r1) lw
                        cell rp rot ( r2) lw   2 cells rp rp addi  } ;

forth


-- ------------------------------------------------------------------------
-- The kernel begins here!
-- ------------------------------------------------------------------------
__meta
hex
meta  ( meta: host words should go into .meta. unless otherwise specified.)

meta: constant  new  ,  ;code  label doconst
                               0 w w lw  ( fetch constant into w)
                               ( fall thru)  ;c

meta: create    new     ;code  label dovar
                               label wpush
                               top push1   w top mv  ( move pfa to top)
                               label shared-next  next,  ;c

                               label dodoes
                               top push1   w top mv  ( move pfa to top)
                               x w mv  ( x is parent ip)  ( fall thru)  ;c

meta: :         new   __target-colon
                        ;code  label docolon
                               ip rpush1   w ip mv  ( pfa is new ip)   next,  ;c

definer
meta: does>   <;code>  asm{  dodoes x jal  }  __target-colon ;
meta

( Allocate buffer space _before_ defining the constant that pushes the
  buffer's address. This way we can define buffers in ram as well as in
  flash!)

meta: buffer   ( #bytes)
   h preserve  ram  here  swap aligned allot  constant ;

meta: variable     cell    buffer ;  ( A variable is a cell-sized buffer!)
meta: 2variable    cell 2* buffer ;

code*  ^    ( unnest)   ip rpop1   begin   next,  ;c
codes nope
code* (lit)   0 ip w lw   cell ip ip addi  ( fetch literal)   wpush j  ;c

code execute   ( pfa)      top w mv   begin   top pop1
                    -1 cells w x lw   0 x jr  ;c
code @execute  ( 'pfa)   0 top w lw   again  ;c

( Define one of two possible ways to compile NEXT for the rest of the
  kernel.)

.ifdef shared-next
( Compile a jump to a previous inline NEXT.)
meta: next   asm{  shared-next j  } ;
.else
meta: next   asm{  next,  } ;
.then

code*    (branch)
label branch        0 ip ip lw  ( follow branch)   next  ;c
code*   (0branch)   top w mv   top pop1   branch w 0!= until  ( fall thru)  ;c
label  skip         cell ip ip addi   next  ;c
code*  (?0branch)   skip top 0= until   top pop1   branch j  ;c
code*  (=0branch)   skip top 0= until              branch j  ;c

( Fast version, using loop register)
code* (for)   ( u)
   ix rpush1   top ix mv   top pop1   next  ;c

code* (next)
   -1 ix ix addi  branch ix 0= until  ix rpop1   skip j  ;c

( Do-loop frame looks like this:

  +------------------+
  |   saved ix reg   |
  +------------------+
  |      limit       |<--- rp
  +------------------+

  Current index is in ix register; current "user-visible" index is
  calculated as index + limit.)

code* (do)   ( limit start)
   top w mv     ( w = start)
   top x pop2   ( x = limit)
   ix x rpush2  ( push ix reg and limit onto R)
   w x ix sub   ( index = start - limit)
   next  ;c

( Increment index. If it overflows to zero, restore ix register, pop
  stack frame, skip backwards jump, and continue. If non-zero, simply take
  the backwards jump.)

code* (loop)
   1 ix ix addi   branch ix 0= until
label undo
   cell rp ix lw        ( restore saved ix from R stack)
   2 cells rp rp addi   ( pop R stack frame)
   skip j  ;c

( Add incr to index. If the sign of index has changed, we've crossed the
  threshold, so restore index, pop frame, and skip jump. Otherwise, take
  the backwards jump.)

code* (+loop)  ( incr)
   ix x mv  ( save ix *before* adding incr)
   top ix ix add   top pop1   ix x x xor   undo x 0>= until
   branch j  ;c

( Push current loop index. User-visible index = index + limit)
code i   ( - index)
   0 rp w lw   ix w w add   wpush j  ;c

( Basic unary ops.)
code invert   top top not   next  ;c
code negate   top top neg   next  ;c

code 2*   top 1 top slli   next  ;c   ( also: top top top add)
code 2/   top 1 top srai   next  ;c
code u2/  top 1 top srli   next  ;c

code <<    ( n shamt - n')   x pop1   x top top sll   next  ;c
code >>    ( n shamt - n')   x pop1   x top top sra   next  ;c
code u>>   ( n shamt - n')   x pop1   x top top srl   next  ;c

( Basic binary ops.)
code +   ( x t - x+t)   x pop1   x top top add   next  ;c
code -   ( x t - x-t)   x pop1   x top top sub   next  ;c

code and   x pop1   x top top and   next  ;c
code or    x pop1   x top top or    next  ;c
code xor   x pop1   x top top xor   next  ;c

( Stack ops.)
code dup    ( t - t t)  top push1   next  ;c
code drop   ( x t - x)  top pop1    next  ;c
code nip    ( x t - t)  cell sp sp addi   next  ;c

code over   ( w t - w t w)     0 sp w lw   wpush j  ;c
code swap   ( w t - t w)       0 sp w lw   0 sp top sw
                                      begin   w top mv   next  ;c

code rot    ( w x t - x t w)   0 sp   x lw   cell sp w lw
                               0 sp top sw   cell sp x sw   again  ;c

code tuck  (   w t - t w t)    0 sp w lw   0 sp top sw   w push1   next  ;c

: 2dup   over over ;
: -rot    rot  rot ;

( Return stack ops.)
code >r   ( w)    top rpush1   top pop1   next  ;c
code r>   ( - w)     w rpop1   wpush j  ;c
code r@   ( - w)   0 rp w lw   wpush j  ;c

( Memory access.)
code   @   ( a -  w)  0 top top lw    next  ;c
code  h@   ( a -  h)  0 top top lh    next  ;c
code uh@   ( a - uh)  0 top top lhu   next  ;c
code  c@   ( a -  b)  0 top top lb    next  ;c
code uc@   ( a - ub)  0 top top lbu   next  ;c

code !   ( w a)     0 sp w lw   0 top w sw
label poptwo   cell sp top lw   2 cells sp sp addi   next  ;c

code h!  ( h a)     0 sp w lw   0 top w sh   poptwo j  ;c
code c!  ( b a)     0 sp w lw   0 top w sb   poptwo j  ;c

code +!  ( w a)     0 sp w lw   0 top x lw   w x x add   0 top x sw
                    poptwo j  ;c

( The slt/u/i instructions set a register to 1 if the comparison is true,
  and to 0 otherwise. We want to use -1 as a true flag, so we always negate
  the result of the test.)

code 0=               top top seqz   label makeflag   top top neg   next  ;c
code 0<               top top sltz   makeflag j  ;c
code  <    x pop1   x top top slt    makeflag j  ;c
code u<    x pop1   x top top sltu   makeflag j  ;c

( Another useful compare operator - equality!)
: =   xor 0= ;

( Small constants.)
-2 constant -2
-1 constant -1
 0 constant 0
 1 constant 1
 2 constant 2

( Incrementers by small constants. Shared code means they take up very
  little space!)

meta: incr   constant  ;code   0 w w lw   w top top add   next  ;c
 1 incr 1+
 2 incr 2+

-1 incr 1-
-2 incr 2-


ram

( For debugging and interactive execution.)

( The host can push things onto host stack; they get copied to target
  stack, registers popped, words execute, re-push, copy back to host...
  Much easier than stuffing things into register slots on stack frame!)

code bug
   top ip rp ix push4   ebreak  ;c

implements continue-forth  __asm
   top ip rp ix pop4   next  ;c

implements trampoline  ( x0 .. xn cfa - y0 .. ym)
   ]  execute  begin  bug  again  [

__host


( Make it easy to get to the key target registers from meta.)
meta
: sp@   tsp @  3 \m cells  +  ;  ( skip IP, RP, and IX)
: rp@   trp @ ;
: ip@   tip @ ;
forth

( Show some indication of whether a word is still executing. If IP is
  anything other than two cells past trampoline, we've hit "bug" somewhere
  other than the trampoline. Show this by annotating IP with a "*".)

: executing?   tip @  [ \m trampoline @  2 \m cells + ]  - ;

: .ip
   \m ip@ .h32  executing? if  ." * "  ^  then  ( done)  2sp ;

: .sp
   \m sp@  .h32__ ;


-: ( forth version of .regs)
   cr  ."       IX        SP        RP        IP"
       (  00000000  00000000  00000000  00000000 )
   cr      tix .tr       .sp   trp .tr       .ip ;
   is .regs


meta
__meta

comment ~~examples~~
variable inc
: lala  do  i bug drop  inc @ +loop ;

( to demonstrate scripting target execution from the host)
meta: grog  ( start n)  0 do  \t 1+ remote  loop ;
( try: 44 10 grog)

~~examples~~

flash
