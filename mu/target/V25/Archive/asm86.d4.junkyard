: 1mi-rm  ( r r d op | n mem r d op | immediates)
   2 pick reg?  if  ( 0r0) or  over word? opw,  combine r/m,  shunt  then  ;

: 1mi-#a  ( i r op | i n mem op)   over acc?  if
   ( 0r0) 4 +  swap word? tuck   opw,  ,/c,  2shunt  then  ;

: 1mi-#  ( imm r # d op | imm n mem # d op)
   2 pick imm?  if  nip nip   1mi-#a   ( i r op | i n mem op)
   over reg?  ( -1 or 0) 3 +  pick ( imm)  s8?  2 pick word?  ( s8 w)
   if  ( 16bit)  if  "83  else  "81  then  else  drop  "80  then
   ( imm r op 8x | imm d mem op 8x)     dup |c, push ( 8x)
   ( r op | d mem op)  combine r/m,  pop ( 8x)  "81 =  ,/c,  shunt  then  ;

: 1mi   create ,  does>  @ push  canonical-order  ( 2nd is reg or #.  period.)
   pop ( op)  1mi-rm   1mi-#   oops   -;   ( Wow!)

