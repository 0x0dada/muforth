V25 Midi Out

Solenoid (note) control and timing, basic midi OUT.

18jan96.

1 is LOAD









( Midi Out LOAD block)

CR  ." (( Midi Out "    4 14 +THRU  ." )) "













































( Note timing)                             DECIMAL
VARIABLE zero         ( index of zero duration list)
128 CARRAY durations  ( array of heads of duration lists)
128 CARRAY coevals    ( array of pointers to next note)

SKIP
Because durations has 128 entries, the max "velocity" we can use
is 127.  Arithmetic on "zero" must be mod 128.


Ports:
P0 =  S/-R   d6  d5  d4  d3  d2  d1  d0  ( set/reset, data)
P1 =  /perc  /hold   X   X   X   X   X   X   ( strobes)



( Latch strobes)                                  HEX
CODE ON+   ( thing - thing+fON)  8000 #, top OR,  NEXT,  C;

CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   AH AL OR,  ( AH = 80 for on, 00 for off)
   ES: AL F00 ) MOV, ( out port0)   ( ES = i/o)
   ES: BL F08 ) XOR, ( strobe low)
   ES: BL F08 ) XOR,  ( strobe hi)
   BX POP,  NEXT,  C;                            DECIMAL






( Note timing)                               DECIMAL
CODE LOG  ( note# dur - note#)      ( note# is 0-127)
   DX POP, ( note#)
   ' coevals >DATA #, DI MOV,  DX DI ADD,   ( DI=coevals[note])
   255 #, 0 [DI] CMP,  0=, IF,   ( 255 = nil)
 ( only put into list if not already; ie, NIL link)
 ( LIE!! could be last in the list!!!)
   ' zero >DATA ) AX MOV,  top AX ADD,  127 #, AX AND,
   ( mod 128)  ' durations >DATA #, top MOV,  AX top ADD,
   0 [top] AL MOV, ( old head)  AL 0 [DI] MOV, ( link)
   DL 0 [top] MOV, ( new head)  THEN,
   DX top MOV,  NEXT,  C;




( Note timing)                               DECIMAL
CODE UNLOG  ( a - a' note# more? )
   255 #, AX MOV,  ( AL=nil; AH=0)
   0 [top] AL XCHG,  ' coevals >DATA #, top MOV,
   AX top ADD,  top PUSH, ( a')  AX PUSH, ( note# or nil)
   1 #, AL ADD,  ( if AL=255, set CY)  AX AX SBB,  AX NOT,
   AX top MOV, ( more?)  NEXT,  C;


SKIP  I think it'd look something like this...
: UNLOG  ( a - a' note# more?)
   DUP C@  -1 ROT C!  DUP coevals +UNDER  255 -  ;




( Note timing)                          DECIMAL
CODE ?TICK  ( dtime dnow - dtime+1 'first OR dtime -)
    ( EXIT if nothing to do)   AX POP, ( nowL)  DX POP, ( timeH)
   CX POP, ( timeL)  ( BX=nowH)  CX AX XOR,  DX top XOR,
   AX top OR, ( 0=)  DX top MOV, ( BX=timeH)
   0=, IF,  CX PUSH,  SWITCH,  ip POP,  SWITCH,  NEXT,  THEN,
   $83 C, $C1 C, 1 C, ( 1 #, CX ADD,)   CX PUSH,
   $83 C, $D3 C, 0 C, ( 0 #, top ADC,)  top PUSH, ( time+1)
   ' durations >DATA #, top MOV,
   ' zero >DATA ) top ADD,  ( 'index of first)
   ' zero >DATA ) INC,  127 #, ' zero >DATA ) AND,
   NEXT,  C;




( Note timing)                           DECIMAL
: NOTE-ON  ( status note vel -)  LOG  ON+  $C0 STROBE  DROP  ;
: NOTE-OFF ( status note -)                $40 STROBE  DROP  ;

: CLEAR
   0  128 FOR   DUP $C0 STROBE  1+  NEXT  DROP
   zero OFF  durations 128 -1 FILL  coevals 128 -1 FILL  ;

: AGE  ( time - time')   NOW  ?TICK
    BEGIN   UNLOG   WHILE   $80 STROBE   REPEAT   2DROP  ;

: AGES   ACTIVATE  NOW  ( time)
     BEGIN  PAUSE  AGE  AGAIN  ;  RECOVER



( Serial out interrupt)                          HEX
KCODE LABEL serial-out-irq     SI PUSH,
   ( call with BX=queue, DI='ser-port; caller pushed BX DI)
   2 [BX] SI MOV, ( +rd)  4 [BX] SI CMP,  0=, ~,  IF,  AX PUSH,
   8 [BX+SI] AL MOV, ( ch from Q)  ES: AL 2 [DI] MOV, ( xmit)
   AX POP,  SI INC,  0 [BX] SI AND, ( wrap)  SI 2 [BX] MOV,
   6 [BX] SI MOV, ( task)  0 [SI] W-PTR DEC, ( Up semaphore)
   ELSE,  ( Q empty)  ES: 7f #, 8 [DI] AND, ( disable tx)  THEN,
   SI POP,  DI POP,  BX POP,  FINT,  IRET,  C;
                                              DECIMAL
SKIP
 mask +rd +wr task data
  0    2   4   6    8
We use +rd = +wr as queue empty, so writer cannot fill the Q to
full capacity.

( Midi queues)                          DECIMAL
32  QUEUE midi-out

EPROM  ( stack:  ch -
: MIDI!   1 AWAIT  midi-out Q!
   1 SERIAL  +Tx   0 SERIAL ;
     ( this first def will be skipped in EPROM mode)

DEBUG  (
: MIDI!   1 AWAIT  midi-out Q!  +Tx  ;
     ( skipped in DEBUG mode)

SKIP In this case we are using AWAIT to wait for ROOM in the Q
and not a char available.


( midi out)
: SEND-ON   ( note vel -)  PUSH  $90 DUP MIDI! ( status)  SWAP
   DUP MIDI! ( note)  R@ MIDI!  POP  ( vel)  NOTE-ON  ;

: SEND-OFF  ( note -)  $90 DUP MIDI! ( status)  SWAP
   DUP MIDI! ( note)  0 MIDI! ( vel)  NOTE-OFF  ;










( Midi interrupt    DEBUG )      EPROM SKIP
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  ' midi-out >DATA #, BX MOV, ( Q)
   $f70 #, DI MOV, ( serial1)   serial-out-irq jump,  C;

: +MIDI-IRQ   1 SERIAL  -IRQ
   31250 BPS  8N1  ( no +Rx, +Tx!!)
   lit serial-out-midi 18 INSTALL  +IRQ  0 SERIAL  ;

: +MIDI   1 SERIAL  7 TxIRQ IO!  0 SERIAL  ;






( Midi interrupt    EPROM )      DEBUG SKIP
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  ' midi-out >DATA #, BX MOV, ( Q)
   $f60 #, DI MOV, ( serial0)   serial-out-irq jump,  C;

: +MIDI-IRQ   0 SERIAL  -IRQ
   31250 BPS  8N1  ( no +Rx, +Tx!!)
   lit serial-out-midi 14 INSTALL  +IRQ  ;

: +MIDI   7 TxIRQ IO!  ;






