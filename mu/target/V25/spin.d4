( Generic V25 Spinner, v2.0)

( Created 3-may-2000 from DOS/Pygmy sources. Combined the `load file' and
  application into this one file.)

decimal

( need EPROM -type- NOT size! I thought this would be easier ;-)
256 constant eprom-type

jiffies

ld v25/devel86.d4  ( load dev system)

target[

[with] debug [if] with serial1-config [then]
ld v25/kernel.d4
ld v25/latches.d4


with MIDIfilter  ld v25/MIDIcore.d4


( Application goes here)
cr s" Spinner "  file[

sign" Generic V25 MIDI Spinner v2.0. "
sign" Copyright (c) 1995, 1996, 2000 "
sign" David Frech & Remmy Demmy Productions. "
created-on

 0
( #s  #r  #u)
 128 128  32  BACKGROUND 1spin
 128 128  32  BACKGROUND 2spin     ( wheel tasks)
 128 128  32  BACKGROUND Operator
 128 128  32  BACKGROUND father-time  ( AGES)
 128 128  32  BACKGROUND slave
[with] debug [if]  128 128  32  BACKGROUND debug   [then]
                                        CIRCLE 1spin


( Ports)   hex

( Bogus V25 hack! Without this external ls244 the V25 won't reset properly.
  Apparently the inputs on port 1 changing during reset causes the chip to
  hang. Complelely BOGUS.)

f10 CONSTANT enable   ( enables ls244 that protects encoder inputs
                        from power-up glitching)
f38 CONSTANT inputs   ( port T)


: PORTS   0 latches IO!  c0 strobes IO!  ( data low, strobes hi)
          0 enable  IO!    ( buffer enable)
       0 latches 1+ IOW!   ( port0 is data, oooo/oooo)
    003f strobes 1+ IOW!   ( port1 is data, ooii/iiii)
       0 enable  1+ IOW!   ( port2 is data, oooo/oooo)
              8 f3b IO!    ( portT: threshold @ Vcc/2)  ;  decimal

( Ports:
P0  =  S/-R  d6  d5  d4  d3  d2  d1  d0          set/reset, data
P1  =  /perc  /hold  B2  B1  A2  A1  X  X    strobe, irqs
P1' =  /perc  /hold  pause  X   A2  A1  X  X    strobe, irqs
P2  =  any pin can be use as /buffer; all are 0.
PT  =                B2  B1  X  X  X  X

lights = hi=on, low=off
/midi goes into /int line on FAT header)

hex
0f40 CONSTANT ExMode  ( external interrupt modes - rising or falling)
0f4c CONSTANT ExIRQ0  ( external interrupt request controls)
0f4d CONSTANT ExIRQ1
0f4e CONSTANT ExIRQ2

( We're putting B1 & B2 on the Vth port so we can use P1.5 & P1.4 as outputs.)
10 EQU B1   ( masks for `strobes' port)
20 EQU B2

10 EQU 1edge    ( interrupt #1 edge control)
40 EQU 2edge    ( interrupt #2 edge control)

:O 1edge->B1   ( reg)  drop  ;O  ( nop)
:O 2edge->B2   ( reg)  <asm  1 #  \f rot  SHR,  asm>  ;O

decimal

( Encoder task variables)
2 USER delta       ( current value; integer part)
2 USER fraction    ( current value, frac part)
2 USER incr        ( frac incr added to fraction by IRQ)
2 USER 'action     ( action to take when `encoder' changes)


( Optical wheel interrupt - common code)
LABEL EncoderISR  ( caller pushed AX BX)
   ES: inputs ) AH AND,  AH AL XOR,  SS: incr [BX] AX MOV,  0= IF,  ( add)
   SS: AX fraction [BX] ADD,  LAHF,  SS: 0 # delta [BX] ADC,  ELSE,  ( sub)
   SS: AX fraction [BX] SUB,  LAHF,  SS: 0 # delta [BX] SBB,  THEN,   SAHF,
   carry IF,  SS: RUN # status [BX] MOV,  THEN,
   ( wake task if encoder changed)
   BX POP,  AX POP,  FINT,  IRET,  C;

( Encoder logic:
       A   B   inc      A   B   inc
       R1  0    -       R1  1    +      XOR 0= IF  +  ELSE  -
       F0  0    +       F0  1    -
BX=task; AH=mask, AL=1rising/0falling)

( Optical wheel interrupts)
LABEL 1irq   ( P1)   STI,  AX PUSH,  BX PUSH,
   ES: ExMode ) AL MOV,  ES: 1edge # ExMode ) BYTE XOR, ( fall<->rise)
   1edge # AL AND,  AL 1edge->B1   B1 # AH MOV, ( B1 mask)
   1spin # BX MOV,  EncoderISR ) JMP,  C;

LABEL 2irq   ( P2)   STI,  AX PUSH,  BX PUSH,
   ES: ExMode ) AL MOV,  ES: 2edge # ExMode ) BYTE XOR, ( fall<->rise)
   2edge # AL AND,  AL 2edge->B2   B2 # AH MOV, ( B2 mask)
   2spin # BX MOV,  EncoderISR ) JMP,  C;

( 'code vector# priority IRQpri IRQreg)
  1irq    25     6     ExIRQ0  ExIRQ1   HANDLER IRQ1
  2irq    26     6     ExIRQ0  ExIRQ2   HANDLER IRQ2


( Encoder loop)
: ENCODE   ( incr 'action)
   'action !  incr !   delta OFF  "8000 fraction !  0
   BEGIN  STOP ( until ISR wakes us)
     delta @   DUP NEGATE delta +!   +   'action @EXECUTE  AGAIN  -;

( Except for initialization, encoder values that the interrupt modifies
  can be only changed ATOMICALLY: +!, INC, ADD, etc.)


( spinner encoder tasks)
VARIABLE last   ( last note sent)
VARIABLE vel    ( velocity)

( We're assuming we're the only task generating MIDI, so we're using SEND
  here and not [SEND].)

0 [if]
: NOTE-ON    ( note)  vel @  2DUP +LATCH     SWAP  "90  3 SEND  ;
: NOTE-OFF   ( note)          DUP -LATCH   0 SWAP  "90  3 SEND  ;
[else]
: NOTE-ON    ( note)  vel @  +LATCH  ;
: NOTE-OFF   ( note)         -LATCH  ;
[then]

: NOTE   ( value - value')
   last @ NOTE-OFF  127 AND  DUP  16 + DUP last !  NOTE-ON  ;

: NOTES  ( 'task -)  ACTIVATE   [with] debug [if] 1 [else] 0 [then]  SERIAL
   last OFF   "FFFF  lit NOTE   ENCODE  -;

: VEL!  ( value - value')  127 AND  DUP  vel !  ;
: VELOCITIES  ( 'task -)  ACTIVATE  64 vel !
              "8000  lit VEL!   ENCODE  -;

: +WHEELS
   0 ExMode IO! ( 2 falling, 1 falling)   IRQ1  IRQ2  ;

( MIDI)
[with] debug [if]
: +CHANNEL   ;
: [1SEND]   1 SERIAL  [SEND]  0 SERIAL  ;
: NOTE-ON  ( note vel)  PUSH
   0 SWAP  32 + ( 16 -> 48)  POP  OVER  "90 +CHANNEL  5 [1SEND]  ;

: CONTROL  ( value n)   "b0 +CHANNEL  3 [1SEND]  ;
: PATCH    ( chan)  1+  "c0 +CHANNEL  2 [1SEND]  ;
: VOL     ( volume)      7 CONTROL  ;
: PAN     ( 0=L,127=R)  10 CONTROL  ;
: local   122 CONTROL  ;
: song   ( n)  "f3 2 [1SEND]  ;
: start   "fa  1 [1SEND]  ;
: cont    "fb  1 [1SEND]  ;
: stop    "fc  1 [1SEND]  ;
: MIDIinit   1 MIDIport  0 SERIAL  MIDIout OFF  ;
[then]


: CONFIGURE    0 CHANNEL  ;
: OK   PORTS  CONFIGURE  ;
: TASKS   600 us  father-time AGES  slave MIDI
          1spin VELOCITIES  2spin NOTES   PAUSE  ;
   ( let them run once and do their 1DOWN or STOP)

: BOOT  OK  TASKS  +WHEELS  +IRQ   [with] debug [if]  EXIT  [then]  STOP  -;

[with] debug [if]
: go  BOOT  MIDIinit  ;
[then]

]file


ld v25/chat-target.d4
ld v25/cold.d4

]target  image  ( word-seg)  report  timed  meta



