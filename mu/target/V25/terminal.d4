( Simple terminal and serial expect/send code.)

( Created 5-aug-1999.)

cr s" Terminal "  file[

decimal

( Open serial device.)
z" /dev/ttyS1" 2 0 open  constant ttyTarget
ttyTarget >raw  ( disallows signals)

: bps   ( fd speed)  ( works with 57600 and 115200; any other value sets 9600)
   over here get-termios
   here swap set-speed
  ( fd) here set-termios  ;

: te-slow     ttyTarget   9600 bps  ;
: te-fast     ttyTarget  57600 bps  ;
: te-smokin'  ttyTarget 115200 bps  ;


256 constant #buf
create sib ( serial input buffer) #buf allot


( Select multiplexing.)
142 5 syscall select  ( use `new_select'!)

variable fdmax

: te-select  ( fd0 .. fdn n)
   fds fd-zero  fdmax off
   for  fds over fd-set   fdmax @ max  fdmax !  next
   fdmax @ 1+  fds  0  0  0  select  drop  ;

( Serial input to screen, keyboard input to serial.)
: serial->screen  ( - done?)
   fds ttyTarget fd-is-set? dup if  ttyTarget reads  tty writes
       sib dup  #buf  accept ( #read)  type  then  not  ;

127 constant <DEL>
: key->serial  ( key - done)  dup <DEL> = if  drop 8  then  emit  0  ;


( Key handlers. ASCII codes < 32 are control codes and are dispatched
  thru a table of key handlers. Each handler is passed `key' and returns
  a `done' flag: non-zero means terminate the terminal loop.

  All entries default to `nope' which leaves `key' on stack as a done flag,
  which terminates `te'.)

create ctrl-handlers   32 cells allot
char z 1+  char A -  constant #esc
create  esc-handlers   #esc cells allot  ( A-Z punct a-z)

: reset-key-handlers  ctrl-handlers   32 lit nope  cell-fill
                       esc-handlers #esc lit nope  cell-fill  ;

: set-ctrl-handler  ( code n)             cells ctrl-handlers +  !  ;
: set-esc-handler   ( code ch)  char A -  cells  esc-handlers +  !  ;

 27 constant <ESC>  ( aka ctrl [ )
reset-key-handlers
-:  drop  key  char A -  esc-handlers  vector  ;
                            <ESC>  set-ctrl-handler
' key->serial                <CR>  set-ctrl-handler
' key->serial                <LF>  set-ctrl-handler

: process-key  ( key - done?)
   dup 32 < if  dup ctrl-handlers  vector  exit  then  key->serial  ;

: keyboard->serial  ( - done?)
   fds tty fd-is-set? if  tty reads  ttyTarget writes
       key process-key  exit  then  0  ;

: te-stream
   begin  tty ttyTarget 2 te-select
      serial->screen drop  keyboard->serial  until  tty writes  ;

: <drain  begin  ttyTarget 1 te-select  serial->screen  until
   ttyTarget writes  ;

: te  ( terminal)
   raw ( console)  te-stream  cooked ( console)  ;


( Downloading initial image to target.)

( IDEA: Use this code to stream stuff to the v25 and have it show, on the
  screen, what it's returning. Or simply to consume all the text before or
  after a cmd.)

( Expect/send.)
: |cr-chat   <CR> emit  ;
: send  ( a #)  ( sends a CR after)  type  |cr-chat   ;
: ?prompt  ( ch)  begin  key  over = until  drop  ;

( Execute!)
: pc!  ( n)  radix @ push
   s" r pc" send  char : ?prompt  hex (u.) pop radix !  send  char * ?prompt  ;

( Download!)
: unmap-file  ( fd a len)  munmap drop  close drop   ;
: "mmap-file  ( z" - fd start len)
   0 0 open ( fd)  dup mmap-whole  ( fd a len)  ;
: "download   ( z")  "mmap-file  2dup type  unmap-file  ;


( Load the chat interactive stuff here.)
ld v25/chat-host.d4		( interactive debugging)


( Special keys.)

( Echo ESC [ back to serial port, followed by the rest of the chars in the
  keyboard buffer. This makes AEB-1 autobauding - which works by sending
  `ESC [5n' - status query - and the Linux console answers with `ESC [0n' -
  terminal Ok. By echoing the ESC and [ that were eaten by our ESC-dispatch
  mechanism, we cause the AEB-1 autobaud feature to magically work.)
-:
   <ESC> emit  char [ emit  0  ;           char [  set-esc-handler  ( vt10x)
-:
   te-smokin'  0  ;                        char k  set-esc-handler  ( smoke)
-:
   te-fast  0  ;                           char f  set-esc-handler  ( fast)
-:
   te-slow  0  ;                           char s  set-esc-handler  ( slow)
-:
   ttyTarget reads  ttyTarget writes  te-slow
   |cr-chat  char * ?prompt  s" l" send  z" loader" "download  s" g" send
   char g ?prompt  te-fast
   ( changes target serial speed - can't await prompt)  0  ;
                                           char l  set-esc-handler  ( loader)
-:
   ttyTarget reads  ttyTarget writes
   |cr-chat  char * ?prompt  s" l" send  z" image" "download
   initial-sync  0  ;
                                           char i  set-esc-handler  ( image)
-:
   ttyTarget reads  ttyTarget writes
   |cr-chat  char * ?prompt  |boot @ pc!  s" r" send  0  ;
                                           char b  set-esc-handler  ( boot)
-:
   ttyTarget reads  ttyTarget writes
   |cr-chat  char * ?prompt  s" g" send  <LF> ?prompt
   ( target responds "g CR LF")   chat!  -1 ( quit term)  ;
                                           char g  set-esc-handler  ( go)


00 [if]

( Test code.)
: kb  raw  begin  key  dup <ESC> xor while  u.  repeat  cooked  ;
: wr  ( a #)  ttyTarget -rot write drop  ;
: kb-test
   if  tty keyboard-in 1 read   tty keyboard-in 1 write  2drop  then  ;

: kb    fds fd-zero  fds tty fd-set  raw
   begin  te-select drop  kb-test  again  -;

[then]

]file
