( $Id$

  This file is part of muFORTH; for project details, visit

     http://nimblemachines.com/browse?show=MuForth

  Copyright 1997-2006 David Frech. All rights reserved, and all wrongs
  reversed.

  Licensed under the Apache License, Version 2.0 [the "License"];
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  or see the file LICENSE in the top directory of this distribution.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.)

( This is a bit of a brain-teaser. We want this file to be as recent as any
  other file in the muforth source tree, so it'll be sure to have at least
  as high a revision number as any other file. This number is printed in
  the startup "banner" so the user can quickly tell recent or outdated they
  muforth is.

  The tricky part: how to make sure that this file gets modified [and so gets
  checked in and marked with the new revision] *when any other file gets
  modified*? At first my solution revolved around "make" and "sed", but
  once the C code is totally stable - and there are only very small changes
  to make at this point, I promise - the only checkins will be .mu4 files,
  which don't require that "make" gets run, so the revision file doesn't
  get sedded, and gets old...

  The only solution: to update this file every time that muforth is run.

  Now, what does "update" mean? When we check this file in, its Revision
  keyword is update to the latest revision. But the Forth code that gets
  generated after that, that sets the value of "revision", will still have
  the value it had at the *previous* checkin. But once we run muforth, and
  it updates this file (so the Forth code matches the Revision keyword),
  now the file has *changed*, and if any files get checked in, this one
  does too ... and gets a new Revision keyword, and we start all over
  again!)

{{{
: $Revision:
   token number token 2drop ( match number, then trailing $) ;

$Revision$
}
