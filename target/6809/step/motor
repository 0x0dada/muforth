( motor )

forth target

decimal

 00 const no
-01 const yes

code half  ( x -- x/2 )
  u ) asr     1 u #) ror next end-code

hex
( generic unravel for longer values -- upto 16b )
code unravel ( value latch# count -- )
  3 u #) lda ( latch# )
  5 u #) ldb ( value, low byte )
  b400 # ldx
  begin
( move lsb of value into msb a, out )
    rola   4 u #) lsr rorb   rora   x ) sta  inca
    1 u #) dec
  0= until
  6 u #) leau
  next end-code

( == latch outputs == )
decimal
: rd!     ( run/dir -- ) 48 16 unravel ;
: sw!     ( motor# -- )  64 4  unravel ;  ( 68-71 unused )

( == motor state info == )
16 array dir  ( direction for all motors; -1=up; 0=stop; 1=dn )
08 array ph   ( phase for eight steppers )
08 array +ph  ( phase increments for steppers )

( == limit switches == )
( "c@x" does a c@ and sign extends. )
code c@x   u ) [] ldb  sex   u ) std      next end-code

: dir@  ( motor# -- dir ) dir + c@x ;
: dir!  ( dir motor# -- ) dir + c!  ;

( caller makes sure dir <> 0 )
hex
code (limit?)  ( dir -- f )
  u ) ldd
  0< if   ( dir=-1: up )
    2 # ldd
  endif   ( if dir=1: dn, we're ok )
  b401 ^ andb  ( and with switches )
  u ) std next end-code

decimal
: @limit?  ( motor# dir -- f )  swap sw! (limit?) ;
: moveOk?  ( motor# dir -- f )  @limit? 0= ;


( == dc motors == )

( these two words rely on a 'tricky' relationship. )
( Two relays drive each dc motor: run and direction. )
( The bits that control these motors alternate run,dir. )
( Run is the lower order bit.  Thus if its not ok to move, )
( both bits must be zero.  If it *is* ok, then the low order )
( bit is 1 and the second bit controls the direction: 0=up. )
( The trick: the direction -- -1 for up, 1 for dn -- plus )
( two yields the correct bits. )

code 4* ( a -- 4a )
  1 u #) asl   u ) rol
  1 u #) asl   u ) rol  ( *4 )
  next end-code

( this word checks the four "autorun" dc motors )
: autoRun  ( rdmask -- rdmask' )
  12 15 do  ( last 4 motors )
    4*
    i dir@ i over ( mask dir motor dir ) moveOk? ( mask dir f )
    if 1+ 1+ + else drop endif
  -1 +loop ;

: normRun   ( rdmask -- rdmask' )
  8 11 do  ( motors 8 - 11 )
    4*
    i dir@ ?dup if 1+ 1+ + endif
  -1 +loop ;

: run/dir  0 autoRun normRun rd! ;


( == via == )
hex
b402 equ latch-dir
b40c equ cntl
b404 equ timer1
b40b equ aux-cntl
b40e equ intp-masks

code 0via  ( init via ports )
        0ff # lda
  latch-dir ^ sta  ( all bits of portb are output )
                   ( port A is input )
        0aa # lda
       cntl ^ sta ( ports a & b pulse mode )
      0040  # ldd ( tick = ~16 ms, byte-swapped )
     timer1 ^ std
         40 # lda
   aux-cntl ^ sta   ( continuous interrupts from timer1 )
        0c0 # lda
 intp-masks ^ sta   ( timer1 will generate interrupt )
        0af # andcc ( enable interrupts )
 next end-code


( == steppers == )
hex
b40d equ intp-flags  ( interrupt flags reg )

( sequence for AIRPAX; phi1 is lsb, out is l-to-r )
here  5 c, 9 c, 0a c, 6 c,

firq handler  ( *only* via interrupt )
  ( firq doesn't save *any* registers )
  intp-flags ^ tst  ( high bit set if via interrupt )
  0< if  ( timer int )
    timer1 ^ tst  ( clr interrupt by reading timer1 low )
    << u y x d cc >> pshs  ( cc makes room for count )
    8 # lda  s ) sta       ( initial count; # of steppers )
    asla  ( a=16; initial latch # )
     addr ph # ldy
    addr +ph # ldx    also forth swap toss
  ( phases ) # ldu
    begin
     x )+ ldb  ( ph incr )
     y )  addb ( ph + incr )
      3 # andb ( ph := ph +Êincr mod 3 )
     y )+ stb
  b u r)  ldb  ( get phase bits )
   ( unravel )
    ( 4*: move lsb of value into msb a, out )
     rola rorb rora  b400 ^ sta  inca
     rola rorb rora  b400 ^ sta  inca
     rola rorb rora  b400 ^ sta  inca
     rola rorb rora  b400 ^ sta  inca  ( a:= a+4 )
     s ) dec   ( count )
    0= until
    << u y x d cc >> puls
  endif
nmi handler  ( nmi will just do an rti )
  rti  ( ** timer interrupt exits here ** )
  end-handler

