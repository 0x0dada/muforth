DT next?

; de has IP
xchg  m e mov  h inx  m d mov  h inx  xchg  pchl
4     7        6      7        6      4     6  = 7 B, 40~

d ldax  d inx  a l mov  d ldax  d inx  a h mov  pchl
7       6      4        7       6      4        6  = 7 B, 40~

; call + ret = 28

Tempting to do subroutine threading. Literals are shorter - 3 bytes (lxi)
instead of 4; jumps are shorter - 3 bytes, not 4; tail recursion is easy.
And, frankly, having the system stack be the data stack isn't a big win on
8085. Pushing and popping is much slower than memory access.

Hmm. I take that back. Moving a byte of memory and incrementing takes 13~.
So popping a word this way takes 26~. But pop only takes 10~. Similarly,
pushing by storing and incrementing takes 26~, but push only takes 12~.

Maybe I'll just stop worrying about it and do DTC.

Let's see:

Let's do and. Add is a special case - we can use dad - so it's harder to
compare.

label and  ( DTC, system stack)
   b pop  h pop  c a mov  l and  a l mov  b a mov  h and  a h mov  h push  next
   10     10     4        4      4        4        4      4        12      40
( 16B, 96~)

label and  ( "native", HL is stack ptr)
   m a mov  h inx  m b mov  h inx  m and  a b mov  h inx
   7        6      7        6      7      4        6
   m a mov  b and  a m mov  h dcx  b m mov  ret
   7        4      7        6      7        10  (+18 for call)
(13B, 102~)

Hmm. Not so clear.