( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

" ARM memory allocation "  file[#

forth

( A single memory space.)
256 Ki constant #image
#image buffer image

( NOTE: @ and ! assume host & target have same cell size & endianness!)
: image+  image  +  ;  ( convert relative target address to address inside image)

( Read and write image memory.)
meta
: @   image+  @ ;
: c@  image+  c@ ;
.ifdef debug-meta-store
: !   radix preserve hex
      fd-out preserve >stderr
      cr 2dup u. u.
      image+  ! ;
.else
: !   image+  ! ;
.then
: c!  image+  c! ;
: +!  dup \m @ rot + swap \m ! ;

: cells  2 << ;  ( target cells are 32 bits)
: cell/  2 >> ;  ( signed)
1 \m cells constant cell
: cell+  \m cell + ;
: cell-  \m cell - ;
forth


( We keep a bitmap of which cells need relocation.)
#image       ( num of bytes in image)
   \m cell/  ( num of bits in bitmap - one per target cell)
   5 >>      ( num of cells in bitmap - 32 bits per host cell)
   constant #reloc-bitmap

#reloc-bitmap array reloc-bitmap

( Mark a target address as needing relocation.)
: index>bit  ( index - mask cell-offset)
   dup 31 and  1 swap <<  ( mask)
   swap 5 >>  ( offset) ;

: 'reloc  ( target-addr - mask a)
   \m cell/  ( convert to cell index)
   index>bit  reloc-bitmap ( mask a) ;

( Mark an address - a cell - as relocated.)
: reloc  ( a)   'reloc  dup  @  rot  or  swap  ! ;

( Is an address relocated?)
: reloc?  ( a)  'reloc       @      and ;


( Hook our image into the muFORTH memory dumper, and decorate relocated
  cells with a prefix `+'.)

\m cell  |cell !
.meta. chain' c@  is  |c@
.meta. chain'  @  is  |@

: decorator  ( reloc? - char)  if  char +  ^  then  bl ;
: decorate  ( a+ n #spaces - a+ n)
            1- spaces  over cell- reloc? decorator  emit ;
' decorate is decorate-cell


( Basic dictionary words.)
meta
variable h  ( dictionary pointer)
: here  \m h  @ ;
: aligned  [ \m cell 1- ] + [ \m cell negate ] and ;
: align   \m here  \m aligned  \m h ! ;
: allot   \m h +! ;
: c,   \m here  \m c!      1  \m allot ;
: ,    \m here  \m !  \m cell \m allot ;
: a,   ( address that needs relocation)  \m here  reloc  \m , ;

( Sometimes, esp when making linked lists, we want to treat 0 specially.
  Non-zero values should be compiled using a, to make them relocated; but 0
  should remain 0, so we compile it with the plain , )

: z,  ( n)  =if  \m a,  ^  then  \m , ;  ( if 0, use , otherwise a, )

forth

#]file
