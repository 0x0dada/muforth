( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

" ARM memory allocation "  file[#

( A single memory space.)
256 Ki constant #image
#image buffer image

forth
( NOTE: @ and ! assume host & target have same cell size & endianness!)
: image+  image  +  ;  ( convert relative target address to address inside image)

( Read and write image memory.)
: image-@   image+  @ ;
: image-c@  image+  c@ ;
: image-!   image+  ! ;
: image-c!  image+  c! ;

meta
: @   image-@ ;
: c@  image-c@ ;
: !   image-! ;
: c!  image-c! ;
: +!  dup \m @ rot + swap \m ! ;

: cells  2 << ;  ( target cells are 32 bits)
: cell/  2 >> ;  ( signed)
1 \m cells constant cell
: cell+  \m cell + ;
: cell-  \m cell - ;
forth

( We keep a bitmap of which cells need relocation.)
#image       ( num of bytes in image)
   \m cell/  ( num of bits in bitmap - one per target cell)
   5 >>      ( num of cells in bitmap - 32 bits per host cell)
   constant #reloc-bitmap

#reloc-bitmap array reloc-bitmap

( Mark a target address as needing relocation.)
: index>bit  ( index - cell-offset mask)  dup 5 >>  swap 31 and  1 swap << ;

: 'reloc  ( target-addr - mask a)
   \m cell/  ( convert to cell index)
   index>bit  swap  reloc-bitmap ( mask a) ;

: reloc  ( a)
   'reloc  dup  @  rot  or  swap  ! ;

( Basic dictionary words.)
meta
variable h  ( dictionary pointer)
: here  \m h  @ ;
: aligned  [ \m cell 1- ] + [ \m cell negate ] and ;
: align   \m here  \m aligned  \m h ! ;
: allot   \m h +! ;
: ,    \m here  \m !  \m cell \m allot ;
: a,   ( addresses that needs relocation)  \m here  reloc  \m , ;
: c,   \m here  \m c!  1  \m allot ;

( Sometimes, esp when making linked lists, we want to treat 0 specially.
  Non-zero values should be compiled using a, to make them relocated; but 0
  should remain 0, so we compile it with the plain , )

: z,  ( n)  =if  \m a,  ^  then  \m , ;  ( if 0, use , otherwise a, )

forth

#]file
