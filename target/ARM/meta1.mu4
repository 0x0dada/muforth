( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

cr " ARM meta compiler (one) "  file[#

forth  decimal

( Metacompiler vocabs)
sealed .meta.             ( used outside of target definitions - the `meta' forth)
sealed .meta-compiler.    ( used inside target definitions - the `meta' compiler)
sealed .assembler.        ( the host-resident target assembler)
sealed .target.           ( the target words - like `forth' on the host)
sealed .target-compiler.  ( the target-resident compiler words - like `compiler' on the host)

: meta                        .meta. definitions ;
: meta-compiler      .meta-compiler. definitions ;
: assembler              .assembler. definitions ;
: target                    .target. definitions ;
: target-compiler  .target-compiler. definitions ;

compiler
: \m   ( compile from meta)                        .meta. \chain ;
: \mc  ( compile from meta-compiler)      .meta-compiler. \chain ;
: \a   ( compile from assembler)              .assembler. \chain ;
: \t   ( compile from target)                    .target. \chain ;
meta-compiler
: \tc  ( compile from target-compiler)  .target-compiler. \chain ;

forth
( The various token consumers for each mode.)
-:  ."  (assembling)"  ;
-:  .assembler. find  if  execute ^  then
         .meta. find  if  execute ^  then  ( equates are in .meta.)
        .forth. find  if  execute ^  then  ( utility words in .forth.)
                                           number ;
mode __asm

-:  ."  (assembling a macro)"  ;
-:
    .assembler. find  if  compile, ^  then  ( the assembler's if/then/begin ...)
     .compiler. find  if  execute  ^  then  ( ... trump the compiler's)
         .meta. find  if  compile, ^  then  ( equates are in .meta.)
                                            number literal ;
mode __macro

-:  ."  (meta)"  ;
-:     .meta. find  if  execute ^  then
      .forth. find  if  execute ^  then  number ;
mode __meta

meta
variable 'number   ( convert token to a number, specific to target)
variable 'literal  ( compile a target literal)
: {   \ [ ;  ( escape back to the host forth)
forth

( Execution behaviour of .target. words is to compile themselves!)
-:  ."  (meta-compiling)"  ;
-:  .meta-compiler. find  if  execute ^  then
           .target. find  if  execute ^  then
           \m 'number @execute  \m 'literal @execute ;
mode __meta-compile

( Common things we'll always want when meta-colon compiling.)
meta-compiler
: (     \f ( ;   ( comments are nice!)
: --    \f -- ;  ( ditto!)

: .if      \ .if   ;  ( and conditional compilation is nice too)
: .else    \ .else ;
: .then    \ .then ;
: .ifdef   \ .ifdef ;
: .ifndef  \ .ifndef ;
: .def     \ .def ;

forth
: \m  ( execute a meta word from forth)  .meta. chain' execute ;
: }   __meta ;  ( return to meta)

#]file
