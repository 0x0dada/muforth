( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)


" ARM meta compiler (two) "  file[#

meta decimal

( Forward references for fundamental words.)

( These are pointers to target CODE words.)
variable (branch)
variable (0branch)
variable (=0branch)
variable (for)
variable (?for)
variable (next)
variable lit
variable ^
variable (")
variable type
variable (;code)   ( the target-resident version!)

forth

( Define useful colon compilers:
      meta:  for defining new target defining words!
     macro:  for defining assembler macros
  compiler:  for defining meta-compiler words

  We define the another colon compiler - the actual target colon - in the
  kernel, using our meta-defining words!)

meta

: meta:      current preserve  meta     :  __definer ;
: definer:   current preserve  definer  :  __definer ;

forth

: macro:     current preserve  meta     :  __macro ;

( Making [ and ] work, finally.)
variable saved-state      ( interpreter mode we came from)
variable which-literal    ( the kind of literal to make when ] executes)

meta

: -]   saved-state @  state ! ;  ( return to saved state)
:  ]   \m -]  which-literal @execute ;

forth

: _[   ( 'literal)
        state @  saved-state !    ( so we know how to get back)
        which-literal !           ( so ] knows how to make a literal)
        __meta ;                  ( switch to __meta, not to host forth)

( Now define the different ways of leaving a colon compiler.)
definer
: [          ['] literal  _[ ;   ( when we return, make a host literal)
: ;    \ ^   __meta ;

meta-compiler
: [    'target-literal @  _[ ;   ( when we return, make a target literal)
: ^    \m ^ @  \m a, ;   ( compile target's ^ - EXIT)
: ;    \mc ^  __meta ;

forth

#]file

