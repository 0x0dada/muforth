( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)


" ARM meta compiler (three) "  file[#

forth decimal

( Compile a linked name field into the target image.)

( The distinction between last and last-code is a bit subtle. last captures
  the cfa of the last word defined, no matter what kind of word it was.
  last-code captures the cfa of code fields that have a "bl" instruction
  compiled there, and that can be possibly "repointed" by a later ;code or
  does>. Keeping them separate makes me feel better.)

variable last        ( cfa of last word defined)
variable last-code   ( for ;code and does> to fix up)
2variable last-link  ( address of vocab, link to newest word)

meta

-- : show   last-link 2@ ! ( finally link in last word) ;

( code, doesn't bother to compile a bl since we're doing to patch the code
  field later. We just need to make room and to set last-code so patch can
  find us.)

: code,   \m here last-code !  ( make a code field)  0 \m , ;

: token,  ( a u)  dup 1+ \m aligned  \m allot  ( room for name+len+padding)
          dup \m here 1- \m c! ( len)  \m here over 1+ -  image+ swap cmove ;

: 'link   current @  suffix>link cell+  ( parallel link field) ;
: link,   \m here  \m 'link  dup  @  \m z,  !  ( last-link 2! ) ;

: name,  ( a u)  \m token,  \m link,  \m here last ! ;



( At metacompile time, do something with target words. We can't -execute-
  them, because they are self-compiling. However, we can ' them and pull
  out their guts, if we know what we're doing...)

: '   ( - target-cfa)
      .target. chain' >body @ ;  ( can't execute them; they are self-compiling)
: addr   \m '  \m cell+ ;  ( find word, skip cfa, return pfa)
: value  \m addr  \m @ ;   ( find word, skip cfa, read out value)

: literal   \m lit @  \m a,  \m , ;  ( make a target literal)

meta-compiler
: [']  \m '  \m literal ;
meta

.meta. chain' literal  'target-literal !  ( patch colon compiler)
            ' number   'target-number  !  ( ditto - use host's number)

: assemble     pair off  __asm ;  ( init and run assembler)

: equ   current preserve  meta  constant ;

: name   token  2dup \m name,  ( compile name into image)
         \m here  -rot (constant)  ( NOTE: uses current unchanged)
         does> ( target-cfa)  ( compile itself!)  \m a, ;

: label     \m here  \m equ  \m assemble ;
: code      \m name  \m assemble ;
: new       \m name  \m code, ;  ( for words with code fields)

( looks up a forward-reference variable, executes it to push its address,
  and stores the address of the last cfa there.)

: lookup  ( look up next token as forward-ref variable or label)
   .meta. chain' execute ( get addr) ;

: implements  last @  \m lookup  ! ;


( Support for making new defining words.)
forth
( patch rewrites the bl instruction at cfa to call to 'code.)
: patch     ( 'code cfa)  tuck >branch-offset  "eb000000 or ( op)
            swap \m ! ;

( This word, which is followed inline by a target cfa constant, patches the
  last code word compiled with a bl to the inline target cfa. It
  essentially "repoints" previously defined words - defined by create,
  variable, constant, etc - to point to new code. It gets called indirectly
  by both ;code and does>.)

: (;code)   pop @  last-code @  patch ;

( <;code> is used to switch from compiling -host- code [that will later run
  on the host, and build the target word] to compiling -target- code, that
  will run when words defined by this defining word later execute. In order
  to connect the two worlds, and to be able to patch up code fields to
  point to this newly-defined behaviour, <;code> captures the target's
  "here" value.  Remember, we are about to start compiling target code at
  "here".

  Even though the host's colon compiler - really the __definer compiler -
  is running when <;code> executes - it is called from does> and ;code,
  which are both .compiler. words - it doesn't bother to "stop" the host's
  colon, since both does> and ;code immmediately switch to another compiler
  - or assembler! - loop.)

: <;code>  compile (;code)  \m here  h, ;


definer
-- : does>   <;code>  save-lr  \m dodoes @ \a bl  \m -] ( start meta-colon) ;
: ;code   <;code>  \m label  \m assemble ( start assembler) ;

meta-compiler
( This version of ;code compiles code an the target, for target-resident
  defining words. Since we've already defined the basic code sequences for
  variables, constants, and colon words, this ;code fetches the value from
  a label, and compiles code to fix up the last cfa, followed by the
  variable. Very much like what we do above for the host, but this time it
  all lives on the target.)

: ;code   \m (;code) @  \m a,  \m lookup  \m a,  __meta ;

forth

( It's nice to know where a code field is pointing. Actually this takes the
  address of any b or bl instruction and shows its destination - with some
  junk in the high-order bits that can be ignored.)

: >code  ( a code-field)  2 +  2 <<  + ; 

meta

: .code  ( a)  dup \m @  >code  u. ;

forth

: field-width  #field @ cells ;

: picky-type  ( a u)  ( print only "letter" characters)
   ?for  dup 1+  swap c@  >letter emit  next  then  drop ;

( Right justify in field of width #field @ * 4)
: |_field_cell|   ( a u)  #field @ cells  over -  spaces  picky-type ;

( Print a name from a cell value.)
: .name-cfa  ( cfa)  ( cell is cfa; print its name)
   \m cell-  image+ link>name  field-width  min  |_field_cell| ;

: .name-code-field  ( a+ bl-to-code - a+)
   ( bl-to-code is the contents of a code field; follow bl and print name!)
   over cell- swap >code .hex-cell  ( don't have code names yet)
   ;

( The address passed is one past the address from which n was fetched.)
: .image-name  ( a+ n - a+)
   dup #image    u< if  .name-cfa   ^  then
   dup "eb000000 u< if  drop field-width spaces   ^  then   ( prob chars, not an address)
   .name-code-field ;

' .image-name is .name  ( hook into memory dumper)

assembler
: ;c   __meta ;


( Compiling strings.)
meta
( Compile a counted string, without a zero terminator.)
: string,  ( a u)  dup \m c, ( len)
           \m here  over \m allot  \m align
           image+ swap cmove ;

meta-compiler
: ."   \m (") @  \m a,                   ( compile (")
       char " parse  ( a u)  \m string,  ( compile the counted string)
       \m type @  \m a, ;                ( compile type)

: "    \m (") @  \m a,                    ( compile (")
       char " parse  ( a u)  \m string, ; ( compile the counted string)


( Control structures.)

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)

( NOTE: when using absolute addresses for branches, we must mark them as
  needing relocation, so we use a, . If instead we used relative branch
  addresses we should use , .)

meta
: <resolve  ( dest src)  \m ! ;
: resolve>  ( src dest)  swap  \m <resolve ;
: mark>   \m here  0 \m a, ;  ( mark addresss as relocating!!)

meta-compiler
: =if   ( - src)        \m (=0branch) @  \m a,  \m mark> ;
: if    ( - src)        \m  (0branch) @  \m a,  \m mark> ;
: then  ( src)          \m here \m resolve> ;
: else  ( src0 - src1)  \m   (branch) @  \m a,  \m mark>
                        swap  \mc then ;

: begin   ( - dest)  \m here ;
: =until  ( dest -)  \mc =if  \m <resolve ;
: until   ( dest -)   \mc if  \m <resolve ;
: again   ( dest -)  \m (branch) @  \m a,  \m mark>  \m <resolve ;
: =while  ( dest - src dest)  \mc =if  swap ;
: while   ( dest - src dest)   \mc if  swap ;
: repeat  ( src dest -)   \mc again  \mc then ;

( n for .. next         goes n times; 4 billion+ if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

: for     ( - dest)      \m  (for) @  \m a,            \mc begin ;
: ?for    ( - src dest)  \m (?for) @  \m a,  \m mark>  \mc begin ;
: next    ( dest -)      \m (next) @  \m a,  \m mark>  \m <resolve ;

forth

#]file
