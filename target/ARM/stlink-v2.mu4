( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

.ifndef >hilo  ld target/common/16bit.mu4  .then

loading ARM target support:

hex

0483 3748 usb-find-device  .if   constant stlink  .else
   ." None found"                                 .then

( On OSX in particular, if you don't do this, the next time around the
  board wedges... Weird.)

: done   stlink  usb-close ;

: uread   ( buf len - #read)  1  stlink  usb-read ;
: uwrite  ( buf len)          2  stlink  usb-write ;

( A simple buffer for chatty communication protocols. Words for putting
  values into a buffer - at pad - and taking them out again.)

variable cp  ( chat pointer)
: !chat  pad  cp ! ;
: #chat  cp @  pad - ;
: +cp    1 cp +! ;

( XXX Note: this is different from how I named these in
  target/HC08/bdm-usb-host.m4. Change those as well?)

: >b  ( byte)    cp @  c!  +cp ;
: b>  ( - byte)  cp @  c@  +cp ;

( Little-endian 16-bit values. In the ARM world these are "halfwords".)
: >h  ( hword)    >hilo  >b >b ;
: h>  ( - hword)          b> b>  lohi> ;

( Little-endian 32-bit values. In the ARM world these are "words".)

( Split and join halfwords into words.)
: w>hilo  ( w - hhi hlo)  dup 10 u>>  swap  [ 1 10 << 1- ] and ;
: lohi>w  ( hlo hhi - w)  10 << or ;

: >w  ( word)    w>hilo  >h >h ;
: w>  ( - word)           h> h>  lohi>w ;

: Send1    !chat  >b ;
: Send2    Send1  >b ;
: Send3    Send2  >b ;

: ?expect  ( expected read)
   2dup  -  if  swap  ." expected "  u.  ." got "  u.  ^  then  2drop ;

: _expect-check  ( #expect)
   pad over ( expect)  uread  !chat  ?expect ;

: _expect  ( #expect - #read)
   pad swap  uread  !chat ;

: expect  _expect-check ;

: Expect1   1 expect  b> ;
: Expect2   2 expect  b> b> ;

( Debug)
variable spy
: c@+  ( a - a+1 byte)  dup 1+  swap c@ ;
: .cmd   spy @ if
   radix preserve  hex
   cr  pad  8 for  c@+ u.  next  drop  then ;

( For sending commands, we want to zero out the buffer - 16 bytes' worth -
  and then always send 16 bytes.)

: <cmd   pad 10 erase  !chat ;
: cmd>   .cmd  pad 10 uwrite ;

: cmd1  ( b0)        <cmd  >b        cmd> ;
: cmd2  ( b1 b0)     <cmd  >b >b     cmd> ;
: cmd3  ( b2 b1 b0)  <cmd  >b >b >b  cmd> ;

( Check vid and pid but don't print them out.)
: .ver  ( bits vid pid - jtag-version)
   3748 =  swap 0483 =  and  if  ( matches)
      radix preserve  decimal
      dup  #12 u>>  ." ST-LINK/V" u.
             6 u>>  3f and  dup ( jtag-version)  ."  JTAG v" u.  ^
   then
   drop ( bits)  0 ( jtag version)
   ." Weird. Is this an ST-LINK/V2?" ;

: ver             0f1 cmd1  6 expect  b> b>  hilo>  ( big-endian!)   h> h> ;
: dbg  ( subcmd)  0f2 cmd2 ;
: dfu>         07 0f3 cmd2 ;  ( exit dfu mode)
: get-mode        0f5 cmd1  2 expect  b> ;


( Do this ASAP so we know if we can use v2 debug api commands.)
ver .ver  #10 > .if  -d apiv2  .then


( Weird exception: only debug command that requires _three_ command bytes.)
: >swd    0a3 20 0f2 cmd3 ;
: swd>        21     dbg ;

: coreid    22 dbg  4 expect  w> ;

( Memory accesses.)
: mem  ( a u subcmd - u+)
   <cmd  0f2 >b  ( subcmd) >b  swap >w  dup >h  cmd>
   1+ -2 and ;

( XXX - try writing multiple bulk buffers for a single transaction.
  These endpoints can move 64 bytes at a time.)

: read-bytes   ( buf a u)   0c mem  tuck  uread  ?expect ;
: write-bytes  ( buf a u)   0d mem  uwrite ;

: read-words   ( buf a u)   4 *  07 mem  tuck  uread  ?expect ;
: write-words  ( buf a u)   4 *  08 mem  uwrite ;


( Say hello.)
: .mode  ( mode#)
   dup 0=  if  drop  ." DFU"  ^  then
   dup 1 = if  drop  ." Mass"  ^  then
   dup 2 = if  drop  ." Debug"  ^  then
   drop              ." Unknown" ;

: tell-mode  ( - mode)
   get-mode  dup  .mode  ."  mode " ;

: chat  ( connect to device)
   cr  tell-mode
   dup  0=  if  drop  ." => "  dfu>  tell-mode  then
   dup  1 = if  drop  ." => "  >swd  tell-mode  then
        2 - if  ." Tried, but didn't succeed. "  then ;
