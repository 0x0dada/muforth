( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2013 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading ARM Cortex-M interaction

variable chatting

( XXX Don't define chat words unless there is support in a connected
  device.)

.ifdef t.chat

: +chat  chatting on ;

: chat-@  ( target - word)  t.getaddr on-exit t.setaddr  t.setaddr  t.readw ;

: >chat  ['] t.setaddr  is |p!
         ['] t.getaddr  is |p@
         ['] t.readb    is |c*
         ['] t.readw    is |cell*
         ['] chat-@     is |@
                         4 |addr !  ( size of addr)
                         4 |cell !  ( size of cell) ;

: chat  +chat  >chat  t.chat ;

.else  ( NO CONNECTED CHAT TARGET!)

: chat  error" No connected chat-capable target." ;
: >chat ;

.then


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array cortex-seekeys

( Default key action is to run host key code)
host-seekeys cortex-seekeys  128 cells cmove

cortex-seekeys 'seekeys !    ( switch over to our bindings)

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes
   dup  |p! |cell*  -4 and  ea !  ( default ea: fetch cell and round down)
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

: dumping
   ['] skip+  advance!
   ['] skip-  retreat!
   ['] 1dump  inspect! ;

: disasming
   ['] dis+    advance!
   ['] dis-    retreat!
   ['] 1dis    inspect! ;

key: d  ( a - a 0)   dumping    -4 and  0 ;
key: i  ( a - a 0)   disasming  -2 and  0 ;

( Fetch a vector and start disassembling the code it points to. Treat it
  like a "call" - key c - and push the i-stack.)

key: v  ( 'vector - vector 0)  disasming  dup |p! |cell*  -2 and  i-push  0 ;

: >target
   cortex-seekeys 'seekeys !    ( switch over to our bindings)
   chatting @ if   >chat  else  >image  then  ( set up memory access)
   ;

( Interactive)
( make an alias so we can still get to host's du)
: _du  du ;

: du  ( a - a')
   >target  dumping  inspect ;

: dis  ( a - a')
   >target  disasming  inspect ;


( Batch mode)
( Redirect to stdout to make it easier to write output to a file.)
defer dump-line
: batch-dump  ( start limit cfa)  is dump-line
   >target
   out-channel preserve  >stdout
   radix preserve
   isp preserve  isp off
   begin  swap  dump-line drop  swap  2dup u< 0=  until  2drop ;

( XXX create/does> instead?)
-: ( a - a' 0)  dup 1dump  16 advance ;
: dumps  ( start limit)   [ ]  batch-dump ;

-: ( a - a' 0)  dup 1dis   dis+ ;
: disses  ( start limit)  [ ]  batch-dump ;

( Pollute the dict a bit less...)
undef dump-line
undef batch-dump
