( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2013 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading ARMv6-M memory image

( Space for compiling into. ARMs can get big; the biggest devices at this
  writing have 1MB of flash. For now let's limit ourselves
  to 256KiB of flash, and 32KiB of RAM. And though not all parts have
  EEPROM, let's define a space for it anyway.)

( XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Default some memory sizes and origins.)
( XXX FIXME KLUDGE)  "6000_0000 constant @eeprom  2 Ki constant #eeprom

( On most Cortex-M devices, flash starts at 0. STM32 are different; their
  flash starts at "0800_0000. But since we wrap the addresses, our local
  image can assume flash starts at 0. But we'll use @flash when setting up
  the origin for the code that we're compiling.)

.ifndef @flash
   0 constant @flash
.then
.ifndef #flash
   32 Ki constant #flash
.then

( On all Cortex-M devices, SRAM starts at "2000_0000. Well, mostly. On
  Freescale's Kinetis K and L series - and maybe others there is SRAM at
  "2000_0000 but also at the end of the code region, ie at "1fff_f000. For
  debugging we can simply assume on all devices that there will be SRAM at
  "2000_0000.)

"2000_0000 constant @ram
.ifndef #ram
   8 Ki constant #ram
.then

: power-of-two?  ( n)
   begin  dup 1 and 0=  while  u2/  repeat  1 = ;

( Memory images are prefixed by their length and origin - the target
  address that they start on. When we push an image, we push the address of
  its first byte, but the previous cells contain the length and origin,
  if we want to do bounds checking or address wrapping.)

variable image  ( image buffer pointer)
: make-image
   create  ( #bytes origin)  ,  dup power-of-two?  0= if
      error" image size not a power of 2"  then
      dup  ( size)  ,  allot
   does>  image ! ;

( XXX is clamping the size of flash and ram like this going to cause problems?)
#flash 256 Ki min  0        make-image  flash-image
#ram    64 Ki min  @ram     make-image  ram-image
#eeprom  4 Ki min  @eeprom  make-image  eeprom-image

( Simple but inefficient!)
: @image  image @  @  ( origin) ;
: #image  image @  cell+ @  ( get byte count) ;
: 'image  image @  cell+ cell+  ( get address) ;

( XXX no eeprom right now...)
: target>image  ( target)  ( find an image based on target addr)
   0 "2000_0000 within  if  flash-image ^  then  ram-image ;

: wrap   #image 1-  and ;
: image+  ( target - host)
   dup target>image  @image -  wrap  'image + ;

( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .debug-c!   cr  ( byte addr)  2dup .hcell_  .h8 ;
: .debug-w!   cr  ( word addr)  2dup .hcell_  .hcell ;
.else
: .debug-c! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( ARMs are almost always little-endian.)
: image-@  ( a - w)           image+  lew@ ;
: image-!  ( w a)  .debug-w!  image+  lew! ;

: image-c*  ( - byte)   p@  dup 1+   p!  image-c@ ;
: image-*   ( - cell)   p@  dup 4 +  p!  image-@ ;

defer |@  ( fetch cell from image/target)

: >image   ['] image-c*  is |c*
           ['] image-*   is |cell*
           ['] p!        is |p!
           ['] p@        is |p@
           ['] image-@   is |@
                          4 |addr !  ( size of addr)
                          4 |cell !  ( size of cell) ;
>image

( Dictionary operators.)
variable h   ( image dictionary pointer pointer; points to one of:)
   2variable 'ram     ( ram pointer, origin)
   2variable 'flash   ( flash pointer, origin)
   2variable 'ee      ( eeprom pointer, origin)

: ram     'ram     h ! ;
: flash   'flash   h ! ;
: eeprom  'ee      h ! ;
: in-flash?  h @  'flash = ;
: in-ram?    h @  'ram = ;
: org    ( a) ( set dict pointer)  h @  ! ;

meta
( XXX alignment policy? Should , always align? Should allot? Should we even
  have two spaces? We will never, in this architecture, want to , or c,
  into ram; we will only need "ram here" and "ram allot".)

: here  ( - a)  h @ @ ;
: haligned   1+  -2 and ;  ( halfword aligned)
: halign    \m here \m haligned  org ;
: aligned   3 +  -4 and ;  ( word aligned)
: align     \m here \m aligned  org ;
: allot ( n)    h @ +! ;
: c,    ( ch)   .debug-comma  \m here image-c!  1 \m allot ;
: ,     ( w)    ( \m align)  >3210  \m c,  \m c,  \m c,  \m c, ;

forth
( return the origin & number of bytes in current region)
: region  ( - a u)  h @  2@  ( origin ptr)  over - ;

( Initialization.)
: fferase  'image #image  "ff fill ;
: wipe   flash-image fferase
         ram-image fferase
         eeprom-image fferase ;

: ram!      ( ram-origin)  dup 'ram   2!  ( set ptr and origin to origin) ;
: flash!  ( flash-origin)  dup 'flash 2!  ( set ptr and origin to origin) ;
: ee!    ( eeprom-origin)  dup 'ee    2!  ( set ptr and origin to origin) ;

: clean-slate
   wipe  @ram ram!  @flash flash!  @eeprom ee!  flash  @flash org ;

clean-slate

( testing)
hex
1111_1111 0 image-!  ( first cell of flash)
2222_2222 #flash  4 -  image-!  ( last cell)
a110_aa20 4 image-!

3333_3333 @ram image-!  ( first cell of ram)
4444_4444 @ram #ram +  4 -  image-!
