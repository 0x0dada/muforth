( This file is part of muFORTH: http://pages.nimblemachines.com/muforth

  Copyright 1997-2008 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

( Assembler for AVR 8 bit microcontroller.)

hex

( Weird encodings.)
: Rr  ( reg - bits)  dup 0f bic 5 <<  swap 0f and  or ;
: Rd  ( reg - bits)  01f and  4 << ;
: K8  ( const - bits)  dup 0f bic  4 <<  swap 0f and  or ;
: K6  ( const - bits)  dup 30 and  2 <<  swap 0f and  or ;
: Kjmp  ( addr - lo hi)  dup  #16 u>>  dup  3e and 3 <<  swap 1 and or ;

( Once again, issues of using the manufacturer's mnemonics - which are
  absolutely terrible - or inventing my own.)

: 2op  ( Rs Rd -)  constant does> @  ( Rs Rd op)  Rd Rs op, ;
: 1op  ( Rd -)     constant does> @  (    Rd op)  Rd    op, ;
: bi   ( Rd imm -)
( 2opw - pppp pppp dddd rrrr. d,r >> 1)
: movw  ( Rs Rd -)  u2/ 4 <<  swap u2/ or  0100 or op, ;

( 2ops - pppp pprd dddd rrrr)
0400 2op cpc  ( cmpc)
0800 2op sbc  ( subc)
0c00 2op add
1000 2op cpse ( cmpskipeq)
1400 2op cp   ( cmp)
1800 2op sub
1c00 2op adc
2000 2op and
2400 2op eor
2800 2op or
2c00 2op mov

( bi - byte immed. pppp kkkk dddd kkkk - r16-31)
3000 bi cpi  ( cmpi)
4000 bi sbci ( subci)
5000 bi subi
6000 bi ori
7000 bi andi
e000 bi ldi

( 1op - pppp pppd dddd pppp)
9403 1op inc
940a 1op dec
9400 1op com
9405 1op asr
900f 1op pop
920f 1op push
9407 1op ror
9401 1op neg
9406 1op lsr
( lsl == add rd,rd
  rol == adc rd,rd)
: lsl  dup \a add ;
: rol  dup \a adc ;

( long jump and call - pppp pppk kkkk pppk, kkkk kkkk kkkk kkkk)
940c ljmp jmp
940e ljmp call

( 1001 000d dddd 0000, followed by kkkk kkkk kkkk kkkk)
: lds  9000 xxx ;  ( Rd <- [k])

9001 1op ldz+
9002 1op ld-z
9201 1op stz+
9202 1op st-z

( There is a lame redundant encoding for "r0 lpmz" which we don't encode.)
9004 1op lpmz
9005 1op lpmz+

9009 1op ldy+
900a 1op ld-y
9209 1op sty+
920a 1op st-y

900c 1op ldx   ( rd <- [x])
900d 1op ldx+  ( rd <- [x], x <- x + 1)
900e 1op ld-x  ( x <- x - 1, rd <- [x])
920c 1op stx   ( rd <- [x])
920d 1op stx+  ( rd <- [x], x <- x + 1)
920e 1op st-x  ( x <- x - 1, rd <- [x])

( ppqp qqpd dddd pqqq)
( Atmel uses "ldd" and "std" - load/store with displacement?)
8008 1op ldy,  ( rd <- [y + q])
: ldy  0 ldy, ;
8208 1op sty,  ( rd <- [y + q])
: sty  0 sty, ;

8000 1op ldz,  ( rd <- [z + q])
: ldz  0 ldz, ;
8200 1op stz,  ( rd <- [z + q])
: stz  0 stz, ;

( wi - word immed. pppp pppp kkdd kkkk. dd=0..3 -> r24,26,28,30)
9600 wi adiw  ( addiw)
9700 wi sbiw  ( subiw)

( iobit - set/clear bit in io space - pppp pppp aaaa abbb)
9800 iobit cbi   ( clear bit io)
9900 iobit sbic  ( skip if bit io clear)
9a00 iobit sbi   ( set bit io)
9b00 iobit sbis  ( skip if bit io set)

( io - pppp paar rrrr aaaa)
b000 io in    ( Rr <- io[a])
b800 io out   ( io[a] <- Rr)

( rel jump and call - pppp kkkk kkkk kkkk kkkk)
c000 rjmp rjmp
d000 rjmp rcall

( conditional branches; test status reg bit; branch if set/clear)
( br bit clear: 1111 01kk kkkk ksss)
( br bit set:   1111 00kk kkkk ksss)
( Status: ITHS VNZC)
: br  f400 xxx ;
: not  400 xor ;  ( toggle sense of condition code)
: cond  constant ;
0 cond 
