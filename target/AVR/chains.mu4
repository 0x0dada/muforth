( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

-- loading AVR meta-compiler (chains)

forth  decimal

( Metacompiler vocabs)

( .meta. is where meta-compiler specific words go - esp if they would
  otherwise shadow a host word of the same name. @ is a good example - the
  meta version writes into the target image, using a local, image-relative
  address. .meta. contains special versions of : to compile macros [though
  I'm thinking of deprecating or removing this] and to define new defining
  words during target compilation. It will also, once the kernel starts
  loading, contain a : that compiles target colon words!

  .meta. also contains any chip equates or other constants that are needed
  at compile or interact time, but do not have an executable representation
  on the target.

  .assembler. contains definitions of instructions, registers, addressing
  modes, and words to build control structures. It is searched when
  building code words, and also when compiling macros.

  .target. contains all the words that have an executable representation on
  the target, and all labels and chip equates - which are mostly the
  addresses of i/o registers on the selected device. Words in target are
  constants, but depending on their type - code, colon, equ, label, etc -
  they may also have a special behaviour attached. For example, executable
  words - code and colon words, eg - compile themselves.

  But since we often want simply the constant, and not the special
  behaviour, many token consumers will use >value instead of execute. >value
  fetches the constant value from the body of a create'd word.

  .meta-compiler. is like .compiler. but for the _target_ colon compiler.
  This will contain target versions of [ ; if then begin while etc. It is
  sealed since we don't want to get any host words by accident.)

sealed .meta.           ( the `meta' version of .forth.)
sealed .meta-compiler.  ( the `meta' version of .compiler.)
sealed .assembler.      ( the host-resident target assembler)
sealed .target.         ( the target words)
sealed .lex.            ( comments and conditional interpretation)

: meta                        .meta. definitions ;
: meta-compiler      .meta-compiler. definitions ;
: assembler              .assembler. definitions ;
: target                    .target. definitions ;
: lex                          .lex. definitions ;

compiler
: \m   ( compile from meta)                        .meta. \chain ;
: \mc  ( compile from meta-compiler)      .meta-compiler. \chain ;
: \a   ( compile from assembler)              .assembler. \chain ;
: \t   ( compile from target)                    .target. \chain ;
forth

meta
: \f               ' execute ;  ( execute a forth word from meta)
forth
: \m   .meta. chain' execute ;  ( execute a meta word from forth)

lex
( Comments are nice to have!)
: (     \ ( ;
: --    \ -- ;

( And conditional intepretation is nice to have too.)
: .if     \ .if ;
: .else   \ .else ;
: .then   \ .then ;

: .def     \ .def ;
: .ndef    \ .ndef ;
: .ifdef   \ .ifdef ;
: .ifndef  \ .ifndef ;
: .contains  \ .contains ;

( For combining conditional tests.)
: .or   .or ;
: .and  .and ;
: .not  .not ;
forth
