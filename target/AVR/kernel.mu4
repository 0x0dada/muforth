( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading AVR Forth kernel

__meta

label kstart  ;c

( Stack ops.)
code dup  ( a - a a)
   t dpushw  ret  ;c

code over  ( a b - a b a)
   kl ld 0 ,y  kh ld 1 ,y  ( fall thru)

label push-literal
   t dpushw  k t movw  ret  ;c

code nip  ( a b - b)
   k dpopw  ret  ;c

code 2drop
   here 2 + rcall
   ( fall thru)
code drop
   t dpopw  ret  ;c

code swap  ( a b - b a)
   k dpopw  push-literal rjmp  ;c

( Return stack ops.)
code >r
   g0 popw  ( ra)  t pushw  g0 pushw  drop rjmp  ;c

code r>
   g0 popw  ( ra)  k popw   g0 pushw  push-literal rjmp  ;c

code -rot  ( a b c - c a b)
   here 2 + rcall  ;c
   ( fall thru)

: rot  ( a b c - b c a)   >r swap  r> swap ;


( Unary ops.)
code invert
   tl com  th com  ret  ;c

code negate
   tl neg  begin  g0 g0 eor  th g0 sbc  g0 th mov  ret  ;c

0 .if
code dnegate
   2 dpopw  2 neg  0 0 eor   3 0 sbc   0 3 mov  2 dpushw
                   0 0 eor  tl 0 sbc  0 tl mov   again  ;c
.then


( Binary ops.)
code -
   ' negate c  ( fall thru)  ;c

code  +
litop +     kl tl add  kh th adc  ret  ;c

code  and
litop and   kl tl and  kh th and  ret  ;c

code  or
litop or    kl tl or   kh th or   ret  ;c

code  xor
litop xor   kl tl eor  kh th eor  ret  ;c

label kend  ;c

kstart kend replicate-kernel

( XXX test code)
: d0   "000f and ;
: d1   "00f0 and ;
: d2   "0f00 and ;
: d3   "f000 and ;
