( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading AVR memory image

( Space for compiling into. AVRs can get big; for now let's limit ourselves
  to 64k address space. Since the program space is word-addressed, this
  means 32k words.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

64 Ki constant #image
#image buffer 'image

: wrap   [ #image 1- ] and ;
: +a  ( a1 a2 - sum)  +  wrap ;  ( add and wrap to 16bit address)

: image+  ( target - host)  wrap  'image + ;
: image-  ( host - target)        'image -  wrap ;

( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .debug-c!   cr  ( byte addr)  2dup .hcell_  .h8 ;
: .debug-w!   cr  ( word addr)  2dup .hcell_  .hcell ;
.else
: .debug-c! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( AVRs are little-endian.)
: image-@  ( a - w)           image+ lew@ ;
: image-!  ( w a)  .debug-w!  image+ lew! ;

: image-p!  image+ p! ;
: image-p@         p@ image- ;

: target-*   ( - cell)  c* c* lohi> ;  ( little-endian 16-bit word)

: >image  ['] image-p!  is |p!
          ['] image-p@  is |p@
          [']       c*  is |c*
          ['] target-*  is |cell*
                         2 |cell !  ( size of cell) ;
>image

( Dictionary operators.)
variable h   ( image dictionary pointer pointer; points to one of:)
   2variable 'ram     ( ram pointer, origin)
   2variable 'flash   ( flash pointer, origin)

: ram     'ram    h ! ;
: flash   'flash  h ! ;
: in-flash?  h @  'flash = ;
: in-ram?    in-flash? not ;
: org    ( a) ( set dict pointer)  h @  ! ;

meta
( XXX alignment policy? Should , always align? Should allot? Should we even
  have two spaces? We will never, in this architecture, want to , or c,
  into ram; we will only need "ram here" and "ram allot".)

: here  ( - a)  h @ @ ;
: aligned  1+  -2 and ;
: align    \m here \m aligned  org ;
: allot ( n)    h @ +! ;
: c,    ( ch)   .debug-comma  \m here image-c!  1 \m allot ;
: ,     ( w)    ( \m align)  >hilo  \m c, ( lo)  \m c, ( hi) ;

forth
( return the origin & number of bytes in region)
: region  ( 'region - a u)  2@  ( origin ptr)  over - ;

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill ;

: ram!      ( ram-origin)  dup 'ram   2!  ( set ptr and origin to origin) ;
: flash!  ( flash-origin)  dup 'flash 2!  ( set ptr and origin to origin) ;

( Erase image, default origins: ram to @ram, and flash to @flash.)
( XXX FIXME KLUDGE)  0 constant @flash
wipe  @ram ram!  @flash flash!
