( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading AVR meta-compiler (main)

( The various token consumers for each mode.)

-:  ."  (assembling)"  ;
-:
    .assembler. find  if  execute  ^  then
       .target. find  if  >value   ^  then  ( equates, labels, and target words)
         .meta. find  if  execute  ^  then
        .forth. find  if  execute  ^  then  ( utility words in .forth.)
                                            number ;
mode __asm

-:  ."  (compiling inlne assembler)"  ;
-:
    .assembler. find  if  ,        ^  then  ( find assembler's if/then etc)
     .compiler. find  if  execute  ^  then  ( need } and ; to exit this mode)
         .meta. find  if  ,        ^  then
        .forth. find  if  ,        ^  then  ( utility words in .forth.)
                                            number literal ;
mode __inline-asm

( The meta-interpreter. We're in this mode when we're building the target
  image, and when in between [ and ] when running the target colon
  compiler.)

-:  ."  (meta)"  ;
-:
         .meta. find  if  execute  ^  then
       .target. find  if  >value   ^  then  ( equates, labels, and target words)
        .forth. find  if  execute  ^  then
                                            number ;
mode __meta

( XXX move these back to after target literal and target compilation - call
  are defined, and remote is defined, resp)

( The target colon compiler.)

-:  ."  (compiling a target word)"  ;
-:
    .meta-compiler. find  if  execute  ^  then
           .target. find  if  execute  ^  then  ( self-compiling!)
                                                number  compile-literal ;
mode __target-colon

( Interacting with a chatty, connected target.)

defer remote ( target-cfa)
-:  error" not connected to a target device" ;  is remote

-:  ."  (interacting with target)"  ;
-:
      .meta. find  if  execute  ^  then
    .target. find  if  >value  remote  ^  then
.ifdef no-number                                complain ;
.else                                           number ;
.then
mode __target


: tag!  ( tag-byte)  \m here  image-c! ;
: tag@               \m here  image-c@ ;
: notag  0 tag! ;

( Support for inline asm in any colon word.
  NOTE: compiles code to reset tag to 0 when colon word is later executed.)

compiler
: asm{   __inline-asm ;  ( start assembler)
: }      compile notag  -] ;  ( exit assembler mode and restart colon compiler)


( So, let's get to work, defining some macros that will be useful either in
  programming in assembler but in a forth "style", or in writing an actual
  forth kernel.)

( On AVR the top 8 registers, when taken in pairs, make 4 16-bit registers,
  the top three pairs being useful as pointers. Atmel defines them as
  follows:

  X = r27:r26
  Y = r29:r28
  Z = r31:r30

  I'm going to call r25:r24 W and use it as top, keeping all the pointer
  registers free for other uses. This is not a problem since using movw it's
  possible to set any of the pointer pairs from W in one cycle.

  Also, since Y can be accessed post-increment, pre-decrement, and with an
  offset, let's use it as the data stack pointer.

  Since we can load immediate data only into the top 16 registers, let's
  set aside the pair r23:r22 to hold literal values.

  Since we want a multitasker, we should keep the user pointer in a
  register pair as well. It doesn't have to be immediate-loadable, so let's
  call it r14, r15.)


assembler
( 0 and 1 used by mul instructions)
 2 constant g0  ( general purpose scratch - low)
 3 constant g1
 4 constant g2
 5 constant g3
( XXX do we need more than this?
( 6-13 free)
14 constant u   ( user pointer low, or the pair)
15 constant uh  ( user pointer high)
16 constant h0
17 constant h1
18 constant h2
19 constant h3
( 20 free)
( 21 free)
22 constant lit   ( literal -- immediate -- low, or the pair)
23 constant lith  ( literal high)
   ( XXX call lit k and kh? for konstant?)
22 constant k   ( literal -- immediate -- low, or the pair)
22 constant kl  ( literal -- immediate -- low, or the pair)
23 constant kh  ( literal high)
24 constant t   ( top low, or the pair)
24 constant tl  ( top low, or the pair)
25 constant th  ( top high)
26 constant x
26 constant xl
27 constant xh
28 dup constant y    constant s   ( data stack pointer low, or the pair)
28 dup constant yl   constant sl  ( data stack pointer low, or the pair)
29 dup constant yh   constant sh  ( data stack pointer high)
30 constant z
30 constant zl
31 constant zh
forth

( Basic stack macros.)
: dpush  ( reg)  asm{  st -y } ;  ( XXX switch when I fix asm)
: dpop   ( reg)  asm{  ld y+ } ;

( These should be passed an even number!)
: dpushw  ( pair)  asm{  dup  1+ dpush  dpush } ;
: dpopw   ( pair)  asm{  dup  dpop  1+ dpop } ;

( Also push words -- register pairs -- onto system stack.)
: pushw  ( pair)  asm{  dup  1+ push  push } ;  ( assembler's push!)
: popw   ( pair)  asm{  dup  pop  1+ pop } ;    ( .. and pop!)

( Macros that make sense for Forth:)
: <dup>   asm{  t dpushw } ;  ( push top onto D stack)
: <drop>  asm{  t dpopw } ;   ( pop top of D stack into top)


-- ------------------------------------------------------------------------
-- Literal loading.
-- ------------------------------------------------------------------------

forth

: load-literal  ( n)
   >hilo  asm{  k ldi  kh ldi } ;

( With a literal in k and kh push it onto the D stack.)
( XXX push-literal should be a routine!)
: push-literal   asm{  t dpushw  k t movw } ;

( something like this:
variable push-lit
: push-literal   push-lit @  asm{  c } ;
)

( Pop top of D stack into lit and lith just as if they were loaded by
  load-literal. This is used to make versions of binary operations that
  work either with true literals, or with a value sitting on the D stack.)

: pop-literal   asm{  t dpopw } ;


( Tag bits: K J C L
  K = 1 if literal loaded
  J = 1 if jump
  C = 1 if call
  L = 1 if long - 2 word - jump or call)

-- ------------------------------------------------------------------------
-- Smart jump and call, tail call elimination
-- ------------------------------------------------------------------------

assembler
: c  ( dest)  ( smart call - compile rcall if possible, otherwise call)
   "1000 inrange? if  \a rcall  %010 tag! ^  then  \a call  %011 tag! ;

: j  ( dest)  ( smart jmp - compile rjmp if possible, otherwise jmp)
   "1000 inrange? if  \a rjmp   %100 tag! ^  then  \a jmp   %101 tag! ;

forth

( If last code compiled was a call, rewrite it to a jump and return true;
  else return false.)

: replace  ( addr toggle)
   over  image-@  xor  swap  image-! ;

: retag  ( oldtag newtag - f)  tag!  drop  -1 ;

: tail?  ( - f)
   tag@ dup  %010 = if  ( short call)
   \m here 2 -  "1000 replace  %100 retag  ^  then
        dup  %011 = if  ( long call)
   \m here 4 -  "0002 replace  %101 retag  ^  then
   drop  0 ;

meta-compiler
: ^   tail? if ^ then  asm{  ret } ;

meta
: compile,  ( target-cfa)  \a c  ( compile call) ;
: literal  ( n)  load-literal  push-literal  %1000 tag! ;

.meta. chain' literal  is compile-literal  ( fixup forward ref)

forth
( XXX when push-literal becomes a call, this will be short to uncompile,
  but could still be 4 bytes - if call r.t. rcall.)
: lit?   ( f)
   tag@ %1000 = dup if  -6 \m allot ( uncompile lit push)  notag  then ;

: _litop  current preserve  meta-compiler  create  __asm
          does>  lit?  if  cell+  then  @  \m compile, ;

( XXX testing)
meta-compiler
: xx  lit? . ;  ( test backing up over literals)

meta
: litop
   _litop
      \m here  ( stack entry point)  ,
      asm{  pop-literal }
      \m here  ( literal entry point)  , ;

: relop
   _litop
      \m here  ( literal entry point)
      asm{  push-literal }
      \m here  ( stack entry point)  ,  , ;

forth


( Interrupt vectors and handlers.)
: vector,  ( vector# dest)  ( compile jmp or rjmp to handler)
   swap  #flash  16 Ki u< if
     ( use rjmp)    org  \a rjmp  ^  then
     ( use jmp)  2* org  \a jmp ;

meta
: handler  ( vector#)  \m here  dup push  vector,  pop org  __asm ;


( Create a new target names. A name is a target word which is defined as a
  _constant_ equal to its code field address, and which compiles itself
  when executed.)

: name    \m here  equ  does> @  \m compile, ;
: code    \m name  __asm ;
: :       \m name  __target-colon ;
: label   \m here  equ  __asm ;  ( equ creates a constant in .target.)

: -]   __target-colon ;
:  ]   \m literal  \m -] ;  ( XXX smart literal from ARM meta?)

( For forward references)
: forward    rjmp, ( src)  equ ;
: resolve    ( src)  \m here  \a resolve> ;

: '  .target. chain' >value ;  ( fetch target word's constant value)

: __host   \ [ ;  ( return to host forth mode)
: {        \m __host ;  ( useful for bracketing a few  host forth words)

forth
: }    __meta ;  ( return to meta)

assembler
: ;c   __meta ;

meta-compiler
: [   __meta ;
: ;   \mc ^  \mc [ ;  ( return to meta)

compiler
: ;m   \ ^  __meta ;     ( exit macro compilation and return to meta-compiler)

forth


( Alloting RAM space to variables. This does not create true Forth
  variables with executable code!)
( XXX keep?)
meta
: var   ( bytes)
   'ram @  dup equ  +  dup 'ram ! ( allot)
   @ram #ram +  swap u<  if error" No available ram"  then ;

forth

( Make it easy to check if a device register has been defined. If device
  equates move to somewhere other than .target. update this too.)
compiler
: .reg   .target. \ .contains ;
forth
: .reg   \ .reg ;

.ifdef later-gator  ( XXX move me!!)

-- start ARM meta copy ----------------------------------------------------------

( Forward references for fundamental words.)

labels

( These are pointers to target CODE words.)
variable (branch)
variable (0branch)
variable (=0branch)
variable (for)
variable (?for)
variable (next)
variable (do)
variable (loop)
variable (+loop)
-- variable lit
variable ^
-- variable (")
-- variable type
-- variable (;code@)   ( for target-resident defining words)

forth

( looks up a label or forward-reference variable, and executes it to push
  its value or address)

: lookup  ( look up next token as forward-ref variable or label)
   .labels. chain' execute ( get addr) ;

( Fetch value of variable on stack - a primitive - and compile it if
  defined, and complain if not yet defined.)

: (p,)  ( var)  @  =if  \m a,  ^  then  error" primitive not yet defined" ;

compiler

( p, is a helper word that makes writing compiling words easier. It is used
  to compile a target primitive into a target word. But it doesn't do all
  the work at once. p, runs at the compile time of the compiling word. In
  that phase it consumes a token from the input, assumes it is a variable
  for a forward-referenced primitive, and compiles it; then it compiles
  (p,) ( which will do the rest of the work at the -run-time- of the
  compiling word!)

: p,   .labels. \chain  compile (p,) ;

forth


( Looking up and changing values of target words.)
meta
: '   ( - target-cfa)  .target. chain' ;
: addr   \m '  \m cell+ ;  ( find word, skip cfa, return pfa)
: value  \m addr  \m @ ;   ( find word, skip cfa, read out value)
: is  ( target-cfa)    \m addr  \m ! ;


( Compile a linked name field into the target image.)

( The distinction between last and last-code is a bit subtle. last captures
  the cfa of the last word defined, no matter what kind of word it was.
  last-code captures the cfa of code fields that have a "bl" instruction
  compiled there, and that can be possibly "repointed" by a later ;code or
  does>. Keeping them separate makes me feel better.)

forth

variable last        ( cfa of last word defined)
variable last-code   ( for ;code and does> to fix up)
2variable last-link  ( address of vocab, link to newest word)

meta

-- : show   last-link 2@ ! ( finally link in last word) ;

( code, doesn't bother to compile a bl since we're doing to patch the code
  field later. We just need to make room and to set last-code so patch can
  find us.)

: code,   \m here last-code !  ( make a code field)  0 \m , ;

: token,  ( a u)  dup 1+ \m aligned  \m allot  ( room for name+len+padding)
          dup \m here 1- \m c! ( len)  \m here over 1+ -  image+ swap cmove ;

( called from metac to fix up the target image variables .forth. and
  .compiler. to point to the most recent names in the parallel host
  dictionaries, .target. and .target-compiler. resp.

  It looks up the following target chain name and stores the link field from
  the host.)

: parallels  ( host-chain)  >parallel @  \m addr  dup reloc  \m ! ;

: 'link   current @  >parallel ;
: link,   \m here  \m 'link  dup  @  \m z,  !  ( last-link 2! ) ;

( name, creates a name, compiling the name string and a link field.)

: name,  ( a u)  \m token,  \m link, ;

: literal    p, lit  \m ,  ;  ( make a target literal)
: aliteral   p, lit  \m a, ;  ( make a target address literal,
                                which is relocated!)

meta-compiler
: [']  \m '  \m aliteral ;
meta

.meta. chain' literal  'target-literal !  ( patch colon compiler)
            ' number   'target-number  !  ( ditto - use host's number)

: assemble     pair off  __asm ;  ( init and run assembler)

: equ   current preserve  labels  constant ;


( name creates a name -both- in the host's .target. chain, and in the
  actual target memory image.

  On the host, in .target., name creates a word that compiles itself into
  the target image. At create time, this target word captures \m here - the
  target cfa - and makes a "constant" out of it. At runtime, it fetches the
  constant and compiles it, as a relocated value, into the target
  dictionary [image].)

: name   token  2dup \m name,  ( compile name into image)
         (create)  ( NOTE: uses current unchanged)
         \m here  dup ,  last !  ( create constant, and set last)
         does> @ ( target-cfa)  ( compile itself!)  \m a, ;

: label     \m here  \m equ ;
: code      \m name  \m assemble ;
: new       \m name  \m code, ;  ( for words with code fields)

( implements looks up a forward-reference variable and stores the address
  of the last cfa there.)

: implements  last @  \f lookup  ! ;


( Support for making new defining words.)
forth
( (patch) ( rewrites the bl instruction at cfa to call to 'code.)
: (patch)   ( 'code cfa)  tuck >branch-offset  "eb000000 or ( op)
            swap \m ! ;

: patch   last-code @  (patch) ;

( This word, which is followed inline by a target code address, patches the
  code field of the last last word compiled with a bl to the inline target address. It
  essentially "repoints" previously defined words - defined by create,
  variable, constant, etc - to point to new code. It gets -compiled- indirectly
  by both ;calls and does>.)

: (;code@)   pop @  patch ;


( <;code> is used to switch from compiling -host- code [that will later run
  on the host, and build the target word] to compiling -target- code, that
  will run when words defined by this defining word later execute. In order
  to connect the two worlds, and to be able to patch up code fields to
  point to this newly-defined behaviour, <;code> captures the target's
  "here" value. Remember, we are about to start compiling target code at
  "here".

  <;code> runs at the compile time of a defining word, but it leaves it up
  to its caller - ;calls or does> - to change the interpreter mode.)

: <;code>   compile (;code@)  \m here  , ;


compiler
-- : does>   <;code>  save-lr  \m dodoes @ \a bl  \m -] ( start meta-colon) ;
: ;code   <;code>  \m assemble ( start assembler) ;

meta-compiler
( ;calls is like ;code, but it is for creating target-resident defining
  words that correspond to the defining words that were already defined in
  the meta-compiler.

  The issue is that the compilation of the defining word into the
  meta-compiler already assembled the target machine code for this class of
  word - whether docolon, dovar, doconst, or dodoes. We don't want to
  repeat the code, so when we compile target-resident versions of the
  defining words - : variable constant etc - we want to -refer- to the
  previously assembled machine code, rather than assemble it again.

  Thus this word is called ;calls rather than the more "usual" ;code,
  because it is not followed by machine code, but instead by a -label- that
  points to machine code.

  Under the hood, it is the same as the metacompiler's ;code: both compile
  -their version of- the word (;code@) ( which is followed by an inline
  constant, which is the address of machine code - docolon, dovar, etc.
  (;code@) ( patches the code field of the most-recently-defined word to
  point to this machine code. It's simple - it just takes a lot of words to
  explain!)

: ;calls   p, (;code@)  \f lookup  \m a,  __meta ;

forth

( It's nice to know where a code field is pointing. Actually this takes the
  address of any b or bl instruction and shows its destination - with some
  junk in the high-order bits that can be ignored.)

: >code  ( a code-field)  2 +  2 <<  + ; 

meta

: .code  ( a)  dup \m @  >code  u. ;

forth

: field-width  #field @ cells ;

: picky-type  ( a u)  ( print only "letter" characters)
   ?for  dup 1+  swap c@  >letter emit  next  then  drop ;

( Right justify in field of width #field @ * 4)
: |_field_cell|   ( a u)  #field @ cells  over -  spaces  picky-type ;

( Print a name from a cell value.)
: .name-cfa  ( cfa)  ( cell is cfa; print its name)
   \m cell-  image+ link>name  field-width  min  |_field_cell| ;

: .name-code-field  ( a+ bl-to-code - a+)
   ( bl-to-code is the contents of a code field; follow bl and print name!)
   over cell- swap >code .hex-cell  ( don't have code names yet)
   ;

( The address passed is one past the address from which n was fetched.)
: .image-name  ( a+ n - a+)
   dup #image    u< if  .name-cfa   ^  then
   dup "eb000000 u< if  drop field-width spaces   ^  then
   ( prob chars, not an address)  .name-code-field ;

' .image-name is .name  ( hook into memory dumper)

assembler
: ;c   __meta ;


( Compiling strings.)
meta
( Compile a counted string without a zero terminator.)
( Length is a cell, not a byte!)
: string,  ( a u)  dup \m , ( len - cell!)
           \m here  over \m allot  \m align
           image+ swap cmove ;

meta-compiler
: "    p, (")   ( compile (")
       char " parse  ( a u)  \m string,  ( compile the counted string) ;

: ."   \mc "    ( compile string)
       p, type  ( compile type) ;


( Control structures.)

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)

( NOTE: when using absolute addresses for branches, we must mark them as
  needing relocation, so we use a, . If instead we used relative branch
  addresses we should use , .)

meta
: <resolve  ( dest src)  \m ! ;
: >resolve  ( src dest)  swap  \m <resolve ;
: >mark   \m here  0 \m a, ;  ( mark addresss as relocating!!)

meta-compiler
: =if   ( - src)        p, (=0branch)  \m >mark ;
: if    ( - src)        p,  (0branch)  \m >mark ;
: then  ( src)          \m here \m >resolve ;
: else  ( src0 - src1)  p,   (branch)  \m >mark
                        swap  \mc then ;

: begin   ( - dest)  \m here ;
: =until  ( dest -)  \mc =if  \m <resolve ;
: until   ( dest -)   \mc if  \m <resolve ;
: again   ( dest -)  p, (branch)  \m >mark  \m <resolve ;
: =while  ( dest - src dest)  \mc =if  swap ;
: while   ( dest - src dest)   \mc if  swap ;
: repeat  ( src dest -)   \mc again  \mc then ;

( n for .. next         goes n times; 4 billion+ if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

: for     ( - dest)      p,  (for)            \mc begin ;
: ?for    ( - src dest)  p, (?for)  \m >mark  \mc begin ;
: next    ( dest -)      p, (next)  \m >mark  \m <resolve ;

( do, loop, +loop)
: do      ( - src dest)   p, (do)     \m >mark  \mc begin ;
: loop    ( src dest)     p, (loop)   \m >mark  \m <resolve  \mc then ;
: +loop   ( src dest)     p, (+loop)  \m >mark  \m <resolve  \mc then ;
forth


( Making [ and ] work, finally.)
variable saved-state      ( interpreter mode we came from)
variable which-literal    ( the kind of literal to make when ] executes)

meta

: -]   saved-state @  state ! ;  ( return to saved state)
:  ]   \m -]  which-literal @execute ;

forth

: _[   ( 'literal)
        state @  saved-state !    ( so we know how to get back)
        which-literal !           ( so ] knows how to make a literal)
        __meta ;                  ( switch to __meta, not to host forth)

( Now define the different ways of leaving a colon compiler.)

( "Fix" host forth's [ and ; so they return to __meta)
compiler
: [          ['] literal  _[ ;   ( when we return, make a host literal)
: ;    \ ^   __meta ;
: [']  \m '  literal ;

meta-compiler
: [    'target-literal @  _[ ;   ( when we return, make a target literal)
: ^    p, ^  ;   ( compile target's ^ - EXIT)
: ;    \mc ^  __meta ;

forth

.then ( later-gator)
