( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2009 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

( This will get moved into target/hc08 in due time. I just wanted to
  quickly test the bootloader on my MC908QB8 chips.)

cr " Bootloader/HC08 "  file[#

( Open target serial port.)
z" /dev/ttyS0" r/w  open-file  constant fd-target

( Set to raw?)
fd-target target-raw

: bps   ( speed)
   fd-target ram get-termios drop ( returns size of struct)
    ( speed) ram set-termios-speed
   fd-target ram set-termios ;

( For HC08 devices, use 9600.)
9600 bps
1000000000 9600 / constant bit-time ( ns)
: pause  0 bit-time 4 *  nanosleep ;

( Spying on the protocol.)
variable spy  spy off

( Hex output, from lib/see.mu4)
: .h8_   .h8 space ;
: .hcell_  .hcell space ;

( Recv from, send to target.)
: _send  fd-target >emit ;
: recv   fd-target <key  spy @ if dup .h8_ then ;

( The hardware we're using means that we should recv sent chars _twice_ -
  once because of hardware loopback, and again because the target is
  - hopefully - echoing them.)
: expect  ( ch)  push ( expected)
   spy @ if  cr ." expected " r@ .h8_ r@ .  ." received "  then
   recv recv ( loopback, target)
   r@ =  swap pop = and if ^ then  error"  - mismatch" ;

: send  ( byte -)  ( Send a byte, read back echoed and verify)
   dup _send  expect ;

( Flush anything that's sitting in our input queue.)
: flush  begin  recv .h8_  again ;  ( will timeout and throw)

comment
==========================================================================
Target commands.
READ: Send 4a hiaddr loaddr, recv byte
WRITE: Send 49 hi lo data
IREAD: Send 1a, recv byte
IWRITE: Send 19 byte
READSP: Send 0c, recv sphi, splo
RUN: Send 28
==========================================================================
hex
: security  ( send 8 security bytes, initally FF)  8 for  0ff send  next
   recv u. ( target sends break after security bytes recvd) ;

: >lohi  ( w - lo hi)  dup 0ff and  swap 8 u>> ;
: hilo>  ( hi lo - w)  swap  8 << or ;
: addr>  ( a)  >lohi send send ; 

( Target monitor commands.)
: tgRead    ( a - byte)  4a send  addr>  recv ;
: tgWrite   ( byte a)    49 send  addr>  send ;
: tgIread   ( - b0 b1)   1a send  recv recv ;
: tgIwrite  ( byte -)    19 send  send ;
: tgReadSp               0c send  recv recv  hilo> ;
: tgRun                  28 send ;
decimal

variable tsp    ( target's SP)
variable taddr  ( current address for the bootloader's indexed write and
                  read commands)
taddr off

( One of the following words - the empty one - is a no-op, so lines
  starting with it will be parsed. The other - with -- - comments out the
  rest of the line. Move the slashes to choose a Variation that suits you!)

: A       ;
: B  \ -- ;

comment
==========================================================================
  Variation A
  
  When we read from the target, always read two bytes, starting from an
  even address. Read the first two using tgRead; then, for sequential
  access after that, use tgIread, which returns two bytes. Keep a buffer
  two bytes long that contains the last two bytes read; taddr contains the
  address in the target's indexed memory pointer; it thus contains the
  address two byte _past_ the address of the first byte in the cache.

  Using A#2 to represent A truncated to a multiple of two (A and -2), if an
  address A#2 matches (taddr-2), then the byte it points to in the target
  memory is already in the cache.

  Note again that after the cache is filled the chip's indexed read & write
  pointer will be pointing just _after_ the cache, and taddr will point
  there as well.
--------------------------------------------------------------------------
  Variation B

  As in the above method, taddr follows the chip's indexed addr exactly,
  and the byte cached is always at address taddr - 1. By convention, taddr
  == 0 will mean that the cache is invalid (empty).

  Also note: unlike in the above case, when we refill the cache, we're
  really storing a remainder there. Thus we don't always read valid data
  out of the cache, refilling beforehand as necessary. Instead the
  read-and-refill routine returns the valid read value, and "behind the
  scenes" stocks the leftovers in the fridge.

  This approach is pretty good, but fails to be optimal in one case. If the
  address requested is taddr+1 - perfectly in the range of _one_ tgIread
  operation - it will use tgRead instead. The above approach - with a 2
  byte cache and modulo addressing, can use tgIread instead.

  For the hell of it, I'm using a metaphor of beer, beer runs, and fridges.
  Beers are bytes, fridge is the cache, a beer run is a "cache line" fetch.
==========================================================================

: +wrap  ( a n - a+n; fitting in 16 bits)  + "0ffff and ;
: fridgeEmpty?  ( - f)  taddr @ 0= ;
: useIread?   ( a - f)  taddr @ =  fridgeEmpty? not  and ;

variable fridge  ( holds leftovers from tgRead or tgIread)

A : inFridge?    ( a - f)  -2 and  taddr @  -2 +wrap  = ;
B : inFridge?    ( a - f)          taddr @  -1 +wrap  = ;
  : beerRun?     ( a - f)  inFridge? not  fridgeEmpty?  or ;

A : beerRun  ( a - a a#2 b0 b1)  dup  -2 and
A    dup useIread? if                tgIread ( b0 b1)  ^ then
A            dup tgRead  over 1 +wrap tgRead ( b0 b1) ;

B : beerRun  ( a - a +a b0 b1)
B    dup useIread? if  2 ( +a)       tgIread ( b0 b1)  ^ then
B                  dup 1 ( +a) swap  tgRead dup ( b0 b0) ;

A : refillFridge  ( a a#2 b0 b1 - a)  fridge 1+ c!  fridge c!     2 +wrap taddr ! ;
B : refillFridge  ( a +a b0 b1 - b0)                fridge c!  -rot +wrap taddr ! ; 

A -: ( a - byte)  dup beerRun? if  beerRun refillFridge   then  1 and fridge + c@ ;
B -: ( a - byte)  dup beerRun? if  beerRun refillFridge ^ then   drop fridge   c@ ;

( We want to redefine |cell, |c@ and |@ so the memory dump will work.)
2 |cell !
-: ( a - word)  dup |c@ ( hi) 8 <<  swap 1+ |c@ ( lo) or ;        is |@
( word from one of two caching approaches)                        is |c@
: |c!  ( byte a)  ;

( Once we have the target SP we can read & write the "exception stack
  frame" which contains all the 08 registers.

  readsp returns SP+1, which points _at_ - not below - the bottommost
  register. The order, low to high: H CC A X PCH PCL)

: reg  ( offset)  constant does> tsp @ + ;  ( self-index)
00 reg H
01 reg CC
02 reg A
03 reg X
04 reg PC
04 reg PCH
05 reg PCL

: .b  ( a)  |c@ .h8_ ;
: .w  ( a)  |@  .hcell_ ;
: .regs  tgReadSp tsp !  ." CC  A  H  X   SP   PC" cr
    CC .b  A .b  H .b  X .b  tsp @ .hcell_  PC .w ;

#]file
