( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2011 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HC908 Flash programming

hex

( Code to utilise the on-chip ROM-resident Flash programming routines in
  Freescale's HC908 microcontroller.)

( Read AN2635 and AN2874 for details.)

ld target/HC08/908flash-defs.mu4

: flash-setup  ( 'target 'len 'code)
   push
   control-block c.SetHX
       0 c.WriteNext ( page erase)
     #18 c.WriteNext ( running @ 18.432M) 
     over + 1-  >lohi  c.WriteNext  c.WriteNext  ( last addr)
   ( write HX and PC to stack frame:)
   ( 'target) hx!  pop ( PC) pc! ;

( Flash a chunk of 16 bytes or less.)
: program-chunk  ( 'target len)
   cr ." program-chunk "  2dup swap u. u.
   'program-range flash-setup  chat-run ;

( The length - from which we calc last-addr for the control block - doesn't
  matter for erase-range. The ROM routine always erases an entire page;
  also HX can point anywhere in the page.)

( On 908, erasing the vectors means erasing the TRIM byte, so we copy it
  before erasing the last page.)

: copy-trim  ( save from the wrecking ball)
   cr ." copy-trim"
   0ffc0 dup c.SetHX  c.ReadNext  swap image-c! ;

( If target address is in the last page of flash, return true)
: last-page?  ( 'target - f)
   /page negate and  ( round down to start of page)
   [ #64 Ki /page - ]  = ;

: erase-page  ( 'target)
   dup last-page? if  ( erasing last page)  copy-trim  then
   cr ." erase-page " dup u.
   1 'erase-range flash-setup  chat-run ;

: blank-check  ( addr len - flag)
   cr ." blank-check "  2dup swap u. u.
   swap c.SetHX  0ff swap  for  c.ReadNext and  next  0ff = ;

: copy-chunk  ( 'image len)
   cr ." copy-chunk "  2dup swap u. u.
   write-buffer c.SetHX  for  c@+ c.WriteNext  next  drop ;

: erased  ( 'target len - 'target len)
   2dup blank-check  if ^ then  over erase-page ;

( For each chunk check if blank, erase if necessary, then copy chunks over
  to buffer and program them!)

: chunk  ( 'target len - 'target+len)
   2dup + push  erased
   over |+ ( 'target to 'image)  over  ( 'image len)  copy-chunk
   program-chunk  pop ;

: flash-region  ( a len)
   /chunk /mod  ( r q)  swap push  ?for  /chunk chunk  next  then
                              pop  =if   ( rem) chunk  drop ^  then  2drop ;

: flash-image   flash  |region ( a u)   flash-region ;

: flash-trim   ( re-flash saved trim value)
   0ffc0 image-c@  
   write-buffer c.SetHX  c.WriteNext
   0ffc0 1 'program-range flash-setup  chat-run ;

: flash-vectors
   write-buffer c.SetHX
   \o swi   @ >lohi  c.WriteNext c.WriteNext
   \o reset @ >lohi  c.WriteNext c.WriteNext
   0fffc 4 'program-range flash-setup  chat-run ;
