( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2011 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HCS08 Flash programming (target)

hex

( Posts from the 8-bit forum about programming S08 flash:
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&thread.id=14410
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&message.id=9610
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&message.id=627)

comment tonyp  Bomb-proof working code from tonyp:

;*******************************************************************************
; Purpose: RAM routine to do the job we can't do from Flash
; Input  : A = value to program
; Output : None
; Note(s): This routine is modified in RAM by its loader at @2,3 and @5
;        : Stack needed: 20 bytes + 2 for JSR/BSR

?RAM_Execute       sta       EEPROM              ;Step 1 - Latch data/address
                                                 ;EEPROM (@2,@3) replaced
                   lda       #mByteProg          ;mByteProg (@5) replaced
                   sta       FCMD                ;Step 2 - Write command to FCMD

                   lda       #FCBEF_
                   sta       FSTAT               ;Step 3 - Write FCBEF_ in FSTAT
                   lsra                          ;min delay before checking FSTAT
                                                 ;(FCBEF -> FCCF for later BIT)
?RAM_Execute.Loop  bit       FSTAT               ;Step 4 - Wait for completion
                   beq       ?RAM_Execute.Loop   ;check FCCF_ for completion
                   rts

;after exit, check FSTAT for FPVIOL and FACCERR

?RAM_Needed        equ       *-?RAM_Execute

XXX: add the short - sometimes-it-works code as well.

comment tonyp

__meta

h @  ( save memory region)

.ifndef USB

zram

( Target code to write to and erase the Flash. By "pasting in" different
  values for flash-command and flash-status, it's possible to do regular
  byte programming, burst programming, or page/mass erase.

  A note on timing: according to Freescale docs there should be _at least_
  four bus cycles between the write to FSTAT that starts the command, and
  the first test of FSTAT for command completion and error status. Based
  on this code and the machine-cycle diagrams shown, there are four cycles
  between the two.

  Ending this with "bgnd" works, but only because we get lucky. In chat
  mode bgnd causes a reset, but since that simply re-starts the chat
  protocol it's almost like executing an SWI. Of course, if we're executing
  the chat code from RAM, then we _don't_ get lucky. We reset into an empty
  last page, and now we've lost the trim, and the chip is also now secure,
  and it's a pain to unsecure it!)

label flash-byte
   0 ,x sta   ( store byte into Flash array)
label flash-command
   0 # lda  FCMD ) sta  80 # lda  FSTAT ) sta  .a lsr
   begin  FSTAT ) bit  0!= until 
label flash-exit
   rts   ;c   ( Gets rewritten every time we run flash-setup. If flashing)
              ( via BDM, this will get rewritten to a bgnd instruction.)

.else  ( USB flash support is a bit different)

ram

label flash-byte-usb
   ( This routine is prefixed by code that does the 0 ,x sta and lda imm;
     the nop is replaced by the flash command byte.)
   nop  FCMD ) sta  80 # lda  FSTAT ) sta  .a lsr
   begin  FSTAT ) bit  0!= until  rts  ;c

.then

h !  ( restore memory region)


__host

( Use this to initially set the value of "our" trim - the one that trims
  the internal osc to 9.216M.)
: set-trims ( ours factory-ftrim factory)
   0ffaf image-c!  0ffae image-c!  0ffad image-c! ;

( Set value of NVOPT, which is loaded into FOPT at reset. We set it so
  security is off, and vector redirection is _enabled_.)
: set-unsecured
   0be 0ffbf image-c! ;  set-unsecured

: >nvprot  ( protected-addr - byte)
   1-  8 >>  0fe and ( clears FPDIS bit to enable protection!) ;

: protect-flash  ( protected-addr)
   dup vector-offset !  ( oddly, protected addr is mod 64k vector offset!)
   >nvprot 0ffbd image-c! ;  -- 0fe00 protect-flash

.ifdef S08JS
( Bypass checksum check on JS parts.)
: bypass-checksum   0  0ffba image-c! ;  bypass-checksum
.then

