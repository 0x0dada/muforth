( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2009 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

cr " HCS08 BDM support (bit routines for S08) " file[#

( Support for Freescale's Background Debug Mode - or BDM.)

( These are bit send and receive commands for an S08 processor running at
  11.0592M - bus speed of 5.5296M - and talking to S08 targets running at
  4M and 8M.

  These routines are a bit different from their cousins for the 908 for
  several reasons:

  * the clock speeds are different - I can't run the S08 from the same
    18.432M crystal, but I want a good speed for baud rates; I was able to
    dig out a few 11.0592M crystals, so I'm using these;

  * the instruction timings are different - not only how many cycles an
    instruction takes, but the positioning and read and write cycles is
    quite different between the 908 and S08;

  * I don't have the same 5v-to-3v translation issues, so driving the BKGD
    pin on another S08 _from_ an S08 - both at 3v - is easy.)

__outside

( We are using PortA0 to talk to the target's BKGD pin. PA0 is also TPMCH0,
  so we use the timer for measuring pulses or doing PWM.

  To transmit, we set DirA0 high for the duration of the _byte_, and simply
  toggle the data value on PA0.

  To receive, we set PA0 low for the duration of the byte, and toggle the
  DirA0 to either drive a start bit, or listen for the target's response.)

code BdmDriveLow
   0 PortA bclr
   0 DirA bset
   rts  ;c

code BdmHiZ
label BdmInit
   0 DirA bclr  ( make sure A0 tri-stated)
   rts  ;c


( BDM code for host S08 running at 5.5296M, and target at 4M.)

code SetTx1_4M
   SetTx1 bsr  ;c   -- pushes address of following routine on stack!

( Send one bit via BDM)
code tx1_4m  ( tx bit in A0)
   0 PortA bclr              ( rfwpp  - drive start bit)
   0 ,x tst                  ( rfp    - delay 2 cycles)
   PortA ) sta               ( wpp    - drive data bit)
   0 ,x tst                  ( rfp    - delay 3 cycles)
   0 ,x tst                  ( rfp    - delay 3 cycles)
   nop                       ( p      - delay 1 cycle)
   0 PortA bset              ( rfwpp  - drive stop bit)
   rts  ;c

code SetRx1_4M
   SetRx1 bsr  ;c   -- pushes address of following routine on stack!

( Recv one bit via BDM)
code rx1_4m  ( recvd bit in A0)
   0 DirA bset               ( rfwpp  - drive start bit)
   nop                       ( p      - delay 1 cycle)
   0 DirA bclr               ( rfwpp  - tri-state BKGD)
   0 ,x tst  nop  nop        ( rfppp  - wait for target to drive its bit)
   PortA ) lda               ( rpp    - sample bit)
   rts  ;c

( BDM code for host S08 running at 5.5296M, and target at 8M.)

code SetTx1_8M
   SetTx1 bsr  ;c   -- pushes address of following routine on stack!

( Send one bit via BDM)
code tx1_8m  ( tx bit in A0)
   0 PortA bclr              ( rfwpp  - drive start bit)
   PortA ) sta               ( wpp    - drive data bit)
   nop                       ( p      - delay 1 cycle)
   0 PortA bset              ( rfwpp  - drive stop bit)
   rts  ;c

code SetRx1_8M
   SetRx1 bsr  ;c   -- pushes address of following routine on stack!

( Recv one bit via BDM)
code rx1_8m  ( recvd bit in A0)
   .a clr   ( sta is two cycles faster than bclr)
   0 DirA bset               ( rfwpp  - drive start bit)
   DirA ) sta                ( wpp    - tri-state BKGD)
   nop                       ( p      - delay 1 cycle)
   PortA ) lda               ( rpp    - sample bit)
   rts  ;c

( Send one byte via BDM.)
( NOT the usual X stack discipline with two slots free!)
code BdmTx  ( tx byte at 0,x)
   ( loop 8; generate bits MSB first)
   8 # lda   .a psh
   0 PortA bset ( idle A0 high)
   0 DirA bset  ( drive A0 for the duration of the byte)
   begin
      0 ,x rol  .a rol  ( bit into A0)
      BdmTx1 ) jsr
   0 ,s decz?  until
   0 DirA bclr  ( done xmitting; tri-state A0)
   .a pul
   1 # aix   rts  ;c

( Recv one byte via BDM.)
( NOT the usual X stack discipline with two slots free!)
( BdmRx1 leaves received bit in C.)
code BdmRx  ( recvd byte to 0,x)
   ( loop 8; recv bits MSB first; bit is 80)
   8 # lda   .a psh   0 ,x clr
   0 PortA bclr ( start bit is zero)
   0 DirA bclr  ( make sure A0 tri-stated)
   begin
      BdmRx1 ) jsr  .a ror ( A0 -> C)  0 ,x rol
   0 ,s decz?  until
   .a pul
   1 # aix   rts  ;c

#]file

