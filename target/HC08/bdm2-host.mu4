( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2010 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HCS08 BDM support v2 (host)

( Host-side - ie PC - code to drive the BDM-over-SCI implementation in
  target/HC08/bdm2.mu4

  This is "version 2" which means I re-imagined it to be more like the
  byteloader protocol, where the target is never waiting for more than one
  byte.)

( NOTE: Before loading this file, load an S08 variant device file. This
  code requires several of the register defines, and needs to know where to
  find the clock trim register.)

( BDM code on the 908 supports the following commands:
  0 Bye - escape back to byteloader
  1 Idle - do nothing; re-sync
  2 WriteFirst - reset count and pointer, then do WriteNext
  3 WriteNext - write next byte to buffer, incr count and pointer
  4 ReadNext - from Sync or BDM
  5 Write buffered bytes to BDM, read nothing, return junk byte
  6 ditto, read 1 byte, return it
  7 ditto, read 2 bytes, return first
  8 run Sync pulse, return high byte
  9 Hold BKGD pin low
 10 Hold BKGD pin high
 11 Tri-state BKGD pin
 12 Set BDM rate to 4M
 13 Set BDM rate to 8M)

__forth
forth

decimal

( End session, return to chat command loop)
: b.Bye     00 send  recv drop ( should recv flags from SWI entry) ;
: b.Idle    01 send ;

( Core commands that generate BDM traffic)
: Send1     02 send  send ;
: SendNext  03 send  send ;
: Send2    Send1  SendNext ;
: Send3    Send2  SendNext ;
: Send4    Send3  SendNext ;

: RecvNext  04 send  recv ;
: Expect0   05 send  recv drop ;
: Expect1   06 send  recv ;
: Expect2   07 send  recv  RecvNext ;

( Misc commands)
: b.Sync      08 send  recv  RecvNext  hilo> ;
: b.BkgdLow   09 send ;
: b.BkgdHiZ   10 send ;
: b.Clock4M   11 send ;
: b.Clock8M   12 send ;
: b.Clock16M  13 send ;

hex

( Non-intrusive)
: b.Background                                90 Send1  Expect0 ;
: b.WriteByte     ( byte a)           >lohi  0c0 Send4  Expect0 ;
: b.WriteByteS    ( byte a - status)  >lohi  0c1 Send4  Expect1 ;
: b.WriteControl  ( status)                  0c4 Send2  Expect0 ;
: b.ReadByte      ( a - byte)         >lohi  0e0 Send3  Expect1 ;
: b.ReadByteS     ( a - status byte)  >lohi  0e1 Send3  Expect2 ;
: b.ReadStatus    ( - status)                0e4 Send1  Expect1 ;

( Active - must be in "active BDM" mode to use.)
: b.Go           08 Send1  Expect0 ;
: b.Trace        10 Send1  Expect0 ;
: b.ReadA        68 Send1  Expect1 ;
: b.ReadCC       69 Send1  Expect1 ;
: b.ReadPC       6b Send1  Expect2  hilo> ;
: b.ReadHX       6c Send1  Expect2  hilo> ;
: b.ReadSP       6f Send1  Expect2  hilo>  1+ ( normalised!) ;
: b.ReadNext     70 Send1  Expect1 ; ( inc HX, then read byte)
: b.ReadNextS    71 Send1  Expect2 ; ( inc HX, read status, read byte)

: b.WriteA               48 Send2  Expect0 ;
: b.WriteCC              49 Send2  Expect0 ;
: b.WritePC       >lohi  4b Send3  Expect0 ;
: b.WriteHX       >lohi  4c Send3  Expect0 ;
: b.WriteSP   1-  >lohi  4f Send3  Expect0 ; ( normalised!)
: b.WriteNext            50 Send2  Expect0 ; ( inc HX, write byte)
: b.WriteNextS           51 Send2  Expect1 ; ( inc HX, write byte, read status)

comment Commands
d = delay 16 BDM cycles
r = read one byte
w = write one byte

Non-intrusive
=============
Background   90 d
ReadStatus   e4 r
WriteControl c4 w
ReadByte     e0 w w d r    -- write addr, read byte
ReadByteS    e1 w w d r r  -- write addr, read status, read byte
ReadLast     e8 r r        -- read status, read last byte read
WriteByte    c0 w w w d
WriteByteS   c1 w w w d r  -- write addr, write byte, read status
ReadBkpt     e2 r r
WriteBkpt    c2 w w

Active mode
===========
Go           08 d
Trace        10 d
ReadA        68 d r
ReadCC       69 d r
ReadPC       6b d r r
ReadHX       6c d r r
ReadSP       6f d r r
ReadNext     70 d r         -- inc HX, then read byte
ReadNextS    71 d r r       -- inc HX, read status, read byte
WriteA       48 w d
WriteCC      49 w d
WritePC      4b w w d
WriteHX      4c w w d
WriteSP      4f w w d
WriteNext    50 w d         -- inc HX, write byte
WriteNextS   51 w d r       -- inc HX, write byte, read status

comment Commands

( Execute a byte of code - useful for setting up and tearing down SWI stack
  frames, rather than emulating the SWI and RTI instructions.)

: trace1  ( instruction)
   b.ReadSP  -1 +wrap  dup b.WritePC  b.WriteByte  b.Trace
   begin  b.ReadStatus 40 and  until ( ready for commands) ;

( Before we force the target to execute our code, read and save the PC)
: do-swi  ( execute SWI & PSHH to create SWI frame)
   b.ReadPC ( before we clobber it)
   "83 ( swi)  trace1  "8b ( psh h) trace1
   b.ReadSP chat-sp !  pc!  ( using captured SP) ;

: do-rti  ( execute PULH & RTI to pop SWI frame)
   "8a ( pul h) trace1  "80 ( rti)  trace1 ;

( To make interworking with chat code easier, and to allow interaction with
  the target without upsetting the contents of registers - let's emulate
  SWI and RTI instructions as we enter and leave active BDM.

  SWI frame, low memory to high: H CC A X PCH PCL)

: emulate-swi  ( read regs via BDM and push onto SWI stack frame)
   b.ReadHX >lohi ( before we clobber it)
   b.ReadSP 6 - dup b.WriteSP  1- b.WriteHX  ( alloc frame, point HX at it)
   ( X H)  b.WriteNext  b.ReadCC b.WriteNext
   b.ReadA b.WriteNext  b.WriteNext ( X)
   b.ReadPC >lohi  b.WriteNext  b.WriteNext ;

: emulate-rti  ( pop regs off SWI frame and write into registers via BDM)
   b.ReadSP dup  1- b.WriteHX
   b.ReadNext ( H)  b.ReadNext ( CC) b.WriteCC
   b.ReadNext ( A)  b.WriteA
   b.ReadNext ( X)  b.ReadNext b.ReadNext ( PCH PCL) hilo> b.WritePC
   ( H X)  hilo>  b.WriteHX  ( do this last!)
   ( SP)  6 + b.WriteSP ;

( BDM versions of interact operations)

: b.SetAddr  -1 +wrap  b.WriteHX ;

: b.GetRegs
   ( get the regs on stack in the right order to "comma" them into frame:
     PCL PCH X A CC H)

   b.ReadPC >lohi  b.ReadHX >lohi push ( H)  b.ReadA  b.ReadCC  pop ( H)
   chat-frame  6 for  c!+  next  drop  b.ReadSP  chat-sp ! ;

: b.SetRegs
   chat-sp @  b.WriteSP

   chat-frame  6 for  c@+ swap  next  drop  ( H CC A X PCH PCL)
   hilo> b.WritePC  push ( X)  b.WriteA  b.WriteCC
   pop ( H X) hilo> b.WriteHX ;

comment another-way
   c@+ swap ( H)
   c@+ b.WriteCC  c@+ b.WriteA
   c@+ swap ( X)  c@+ c@+ hilo> b.WritePC  drop
   hilo> b.WriteHX ;
comment another-way

: b.Run  b.Go  begin  b.ReadStatus  40 and until ;

: ResetSP
   @ram #ram +  b.WriteSP ;

( Bollocks! Even this is different between variants. The JS/JM/SH uses two bits
  to select which kind of watchdog; setting both to zero is required to
  disable it. It looks like it's safe to write both bits 7 and 6 to zero to
  disable the dog on the parts I've looked at...

  It looks like newer parts are using this more sophisticated watchdog.
  Rather than just write to a memory location, you have to write 55 then
  AA.)

: NoWatchdog
   \o SOPT1 b.ReadByte  3f and  \o SOPT1 b.WriteByte ;

( I've decided we shouldn't do this. It's too complicated. Not only do
  different parts use different clocks - ICG, ICS, MCG - but even the parts
  that have ICS put the registers in different places! So ICSTRM is _not_
  always at 003a.

  How about instead we simply leave the part untrimmed, in its BDIV=2 state
  - running at half speed - and set FCDIV so that no matter what, its value
  makes sense.

  Using a divisor of 25 seems safe. The untrimmed speed of the DCO should
  fall between 16M and 20M, putting the bus clock between 4M and 5M. A
  divisor of 25 puts the flash clock into the range of 160k to 200k, which
  is perfect.

  But this is specific to the QG! I need a table of values somewhere...

  Another approach is to have the device file set TRIM to ICSTRM, ICGTRM,
  MCGTRM. I still need to know what each part's POR bus clock speed and BDM
  clock are... put these into the device file!)

( Trim internal oscillator to factory setting; on QG parts this is 31.25k,
  which results in 16M FLL frequency; this is divided by two to give a
  default BDM freq of 8M, and divided by two again - because of reset BDIV
  setting - to give a reset bus clock of 4M.)

: TrimOsc
   0ffaf ( factory trim) b.ReadByte  \o TRIM b.WriteByte ;

( Set FCDIV to correspond to bus clock at power-on-reset. As an added
  bonus, we don't subtract one from the divisor, so it's one bigger than it
  needs to be; this gives us a bit of cushion in case the factory trim has
  the clock running fast. In the case of QG parts - 4M bus clock out of POR
  - this puts the Flash clock at 190k instead of 200k.)

: SetFCDIV
   \o FCDIV b.ReadByte  80 and if ^ then  ( already set)
   [ \o POR-bus-clock #199 + #200 / ]  ( divide freq by 200k, rounding up)
   \o FCDIV b.WriteByte ;

comment misguided
( Based on what we get back from b.Sync, match BDM clock)
( XXX - this is currently based on 908's 4.608M clock)
: MatchBDMClock
   b.Sync 70 - 21 u< if  ( within +-"10 of 80 - running at 4M)
      b.Clock4M ^ then
   b.Clock8M ;

: FastBusClock
   ( assume osc trimmed)
   MatchBDMClock
   \o ICSC2 b.ReadByte  3f and ( clear BDIV)  \o ICSC2 b.WriteByte
   b.Clock8M ;

comment misguided

( Get target into a known, safe state. Chat code will have done this for
  itself at reset, so this is only necessary for BDM targets.)

: b.Hi
   TrimOsc  SetFCDIV  NoWatchdog  ResetSP ;

: pwrcycle  b.BkgdLow  ." power cycle S08, then press a key..."  key drop
            b.BkgdHiZ   b.Sync u.  b.ReadStatus u. ;

( Get start address of BDM code.)
: bdm-start  ( - a)
   c.Id 0ff = if  0de00  ( 908, flash version)   ^ then

   .ifdef run-in-ram   0066  ( S08, ram version)
               .else  0e000  ( S08, flash version)   .then ;
decimal

: bdm
   115200 bps
   -- b.Idle b.Bye  ( exit BDM loop, if running)

   bdm-start pc!  t.SetRegs  t.Go   ( start bdm chat loop)
   b.Clock4M  ( assume bus clock of 4M, forced active mode)
   pwrcycle  b.Hi

   ( Wire our versions into the interact code.)
   ['] b.Run is t.Run
   ['] b.Go is t.Go
   ['] b.GetRegs is t.GetRegs
   ['] b.SetRegs is t.SetRegs
   ['] b.SetAddr is t.SetAddr
   ['] b.ReadNext is t.Read
   ['] b.WriteNext is t.Write

   _chat ;
