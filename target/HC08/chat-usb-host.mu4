( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2012 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

( A "chat-like" driver for talking to the USB byteloader. Unfortunately,
  the approach I had to take with USB is sufficiently different that this
  is nothing like the chat, BDM, or 908 monitor "chat" drivers. Hopefully I
  can make this square peg fit ok!)

loading HCS08 USB chat (host)

hex

( We need a different approach when programming flash via USB. For one
  thing, it's very difficult to create an on-stack buffer for the bytes to
  be programmed. On the other hand, the bytes to program are sitting in the
  USB packet buffer ... why not just read and program them from there?

  The idea is that we create a "hook" in the loop that processes OUT
  tokens. Normally, for each byte pulled out of the buffer, it will simply
  execute "sta 0,x", but when we are programming flash, we want to execute
  a "program byte" routine. The OUT loop calls "write-byte" - which either
  points to "sta 0,x rts" or the flash routine. It's pretty simple, really.

  The routine to program a byte or run an erase command follows. One
  difference with the previous code is that it is not compiled into RAM
  space. Rather, it is compiled into the "high register" space, which is
  normally never copied over to the target. This way we can copy it over as
  needed, and it isn't always taking up space in RAM. [It will generally
  alternate with the routine to execute a piece of code, setting the
  registers to known values beforehand, and returning their values
  afterwards.])

: usb  ( bmRequest bRequest wValue wIndex wLength 'buffer)
   usb-target  usb-request ;

( Commands)
: u.Read   ( target-addr length buffer)  2push
           0c0 00 rot 0 2pop  usb ;

: u.Write  ( target-addr length buffer)  2push
            40 01 rot 0 2pop  usb ;

: u.Flash  ( target-addr length buffer cmd)  -rot 2push 2push
            40 01 2pop 2pop   usb ;

: u.Run     40 02 0 0 0 0   usb ;

: u.ReadSp  ( buffer)  push
            0c0 03 0 0 2 pop   usb ;

variable uaddr  ( current memory access address)
10 buffer ubuf  ( for short reads and writes)
variable uptr   ( pointer into ubuf)

: !ubuf  ubuf uptr ! ;
: +uptr  1 uptr +! ;
: #ubuf  uptr @  ubuf - ;

: b>  ( byte)    uptr @  c!  +uptr ;
: b<  ( - byte)  uptr @  c@  +uptr ;

: w>  ( word)    >lohi  b> b> ;         ( Big endian!)
: w<  ( - word)         b< b<  hilo> ;  ( ditto!)

: usb-c@  ( addr - byte)              1  ubuf  u.Read  ubuf c@ ;
: usb-c!  ( byte addr)  swap ubuf c!  1  ubuf  u.Write ;

: usb-sp  ( - sp)  ubuf u.ReadSp  !ubuf  w< ;

: u.SetAddr  uaddr ! ;
: u.GetAddr  uaddr @ ;
: u.ReadNext   u.GetAddr usb-c@  1 uaddr +! ;
: u.WriteNext  u.GetAddr usb-c!  1 uaddr +! ;

: u.GetRegs  ( buf - sp)
   usb-sp  dup push  6 rot  u.Read  pop ;

: u.SetRegs  ( buf)
   usb-sp  6  rot  u.Write ;

( Order of regs in memory: H CC A X PC)
( XXX this is a huge kludge)
: u.SetPC  ( pc)
   usb-sp  4 +  swap  !ubuf  w>
   2 ubuf  u.Write ;

.ifdef t.Id  ( if we've loaded interact support)

: u.FlashChunk   ( 'target len buffer cmd - status)
   30 \l FSTAT usb-c!  ( clear flash errors)
   u.Flash
   \l FSTAT usb-c@  ( return status) ;

: u.Id   \l SDIDL usb-c@ ;

.ifdef usb-debug-via-serial
: chat-usb  ( to distinguish between the usb and serial versions)
.else
: chat
.then
   ( Wire our versions into the interact code.)
   ['] u.Id is t.Id
   ['] u.Run is t.RunWait
   ['] u.Run is t.Run
   ['] u.SetRegs is t.SetRegs
   ['] u.GetRegs is t.GetRegs
   ['] u.SetAddr is t.SetAddr
   ['] u.GetAddr is t.GetAddr
   ['] u.ReadNext is t.Read
   ['] u.WriteNext is t.Write
   ['] u.Read is t.ReadChunk
   ['] u.Write is t.WriteChunk
   ['] u.FlashChunk is t.FlashChunk

   +chat  hi ;

.then
