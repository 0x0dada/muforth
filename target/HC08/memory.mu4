( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2011 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HC08 memory image

( Space for compiling into. HC08s can get big; for now let's limit ourselves
  to 60k address space. This is where most of the varieties I'm interested
  in max out.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Represent the entire address space. This way we don't worry about any
  translation issues - like forcing target address fc00 to refer to first
  byte of the image buffer.)

64 Ki constant #image
#image buffer 'image
: image+  'image + ;
: image-  'image - ;

: image-c@  image+ c@ ;
: image-c!  image+ c! ;

: +a  ( a1 a2 - sum)  +  "0ffff and ;  ( add and wrap to 16bit address)

( HC08s are big-endian, like all Motorola/Freescale processors!)
: >lohi  ( w - lo hi)  dup "0ff and  swap 8 u>> ;
: hilo>  ( hi lo - w)  swap  8 << or ;

: image-!  ( w a)  push  >lohi  r@ ( hi) image-c!  pop 1 +a ( lo) image-c! ;
: image-@  ( a - w)  dup image-c@ ( hi)  swap 1 +a image-c@ ( lo)  hilo> ;

: image-p!  image+ p! ;
: image-p@         p@ image- ;

: target-*   ( - cell)  c* c* hilo> ;  ( big-endian 16-bit word)

: >image  ['] image-p!  is |p!
          ['] image-p@  is |p@
          [']       c*  is |c*
          ['] target-*  is |cell*
                         2 |cell !  ( size of cell) ;
>image

( Dictionary operators.)
variable h   ( image dictionary pointer pointer; points to one of:)
   2variable 'xram    ( xram pointer, origin)
   2variable 'zram    ( zram pointer, origin)
   2variable 'ram     ( ram pointer, origin)
   2variable 'flash   ( flash pointer, origin)

: xram    'xram   h ! ;  ( critical variables, zero page)
: zram    'zram   h ! ;  ( zero page)
: ram     'ram    h ! ;  ( non-zero page)
: flash   'flash  h ! ;
: in-flash?  h @  'flash = ;
: in-ram?    in-flash? not ;
: org    ( a) ( set dict pointer)  h @  ! ;

0 .if
( XXX - necessary?)
meta
: aligned  1 +  -2 and ;
: align  h @ \m aligned  h ! ;
forth
.then

( DEBUG: show code as it's compiled)
.ifdef show-comma
: .debug  dup  radix preserve  hex <# # # #> type space ;
.else
: .debug ;
.then

meta
: here  ( - a)  h @ @ ;
: allot ( n)    h @ +! ;
: c,    ( ch)   .debug  \m here image-c!  1 \m allot ;
: ,     ( n)    ( \m align)  dup 8 >> \m c, ( hi)  \m c, ( lo) ;

forth
( return the origin & number of bytes in region)
: region  ( - a u)  h @   2@  ( origin ptr)  over - ;

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill ;

: xram!    ( xram-origin)  dup 'xram  2!  ( set ptr and origin to origin) ;
: zram!    ( zram-origin)  dup 'zram  2!  ( set ptr and origin to origin) ;
: ram!      ( ram-origin)  dup 'ram   2!  ( set ptr and origin to origin) ;
: flash!  ( flash-origin)  dup 'flash 2!  ( set ptr and origin to origin) ;

( xram is a bit odd. Sometimes we need to set aside a few bytes of zram
  for flash-based code - like the USB chat and BDM code - and never
  allocate these bytes to code or variables that we need while doing
  interactive development.

  My solution is to break the zero-page ram into two spaces: zram and xram.
  zram is "application" ram, and is allocated bottom up, from the @ram
  origin. xram is the "system" ram and is allocated top down, from 0100.

  Routines that might be necessary, say for programming flash, are by
  default placed at the "ram" origin - 0100. In the case of the USB code,
  we take advantage of this fact, and allow the write memory USB request to
  specify a wIndex value. 0 means "just copy the byte into memory";
  non-zero means "run the flash code at 0100 using wIndex as the command
  byte". This way it is almost trivial to run flash programming and erase
  commands via USB.

  But having these things be at arbitrary addresses seemed brittle and
  error-prone. This way they are at least somewhat fixed, and the memory
  allocation code checks to see if zram runs into xram.

  The best way to use these is to always load the "system" code even if
  it's already in flash, just so your code "knows" how much xram is
  allocated.)

( Erase image, default origins: zram to @ram, ram and xram to "100, and
  flash to @flash.)
wipe  @ram zram!  "100 dup xram! ram!  @flash flash!
