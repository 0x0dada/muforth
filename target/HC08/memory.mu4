( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2011 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HC08 memory image

( Space for compiling into. HC08s can get big; for now let's limit ourselves
  to 60k address space. This is where most of the varieties I'm interested
  in max out.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Represent the entire address space. This way we don't worry about any
  translation issues - like forcing target address fc00 to refer to first
  byte of the image buffer.)

64 Ki constant #image
#image buffer 'image
: |+  'image + ;

: image-c@  |+ c@ ;
: image-c!  |+ c! ;

: +a  ( a1 a2 - sum)  +  "0ffff and ;  ( add and wrap to 16bit address)

( HC08s are big-endian, like all Motorola/Freescale processors!)
: >lohi  ( w - lo hi)  dup "0ff and  swap 8 u>> ;
: hilo>  ( hi lo - w)  swap  8 << or ;

: image-!  ( w a)  push  >lohi  r@ ( hi) image-c!  pop 1 +a ( lo) image-c! ;
: image-@  ( a - w)  dup image-c@ ( hi)  swap 1 +a image-c@ ( lo)  hilo> ;

variable image-p
: image-p!  ( addr)    image-p ! ;
: image-p@  ( addr)    image-p @ ;
: image-c*  ( - byte)  image-p @  dup 1 +a image-p !  image-c@ ;
: image-*   ( - cell)  image-p @  dup 2 +a image-p !  image-@ ;

: >image  ['] image-p!  is |p!
          ['] image-p@  is |p@
          ['] image-c*  is |c*
          ['] image-*   is |*
                         2 |cell !  ( size of cell) ;
>image

( Dictionary operators.)
variable h   ( image dictionary pointer pointer; points to one of:)
   2variable 'flash   ( flash pointer, origin)
   2variable 'ram     ( ram pointer, origin)

: ram     'ram    h ! ;
: flash   'flash  h ! ;
: in-ram?    h @  'ram = ;
: in-flash?  h @  'flash = ;
: org    ( a) ( set dict pointer)  h @  ! ;

0 .if
( XXX - necessary?)
meta
: aligned  1 +  -2 and ;
: align  h @ \m aligned  h ! ;
forth
.then

( DEBUG: show code as it's compiled)
.ifdef show-comma
: .debug  dup  radix preserve  hex <# # # #> type space ;
.else
: .debug ;
.then

meta
: here  ( - a)  h @ @ ;
: allot ( n)    h @ +! ;
: c,    ( ch)   .debug  \m here image-c!  1 \m allot ;
: ,     ( n)    ( \m align)  dup 8 >> \m c, ( hi)  \m c, ( lo) ;

forth
( return the origin & number of bytes in region)
: region  ( - a u)  h @   2@  ( origin ptr)  over - ;

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill ;

: ram!      ( ram-origin)  dup 'ram   2!  ( set ptr and origin to origin) ;
: flash!  ( flash-origin)  dup 'flash 2!  ( set ptr and origin to origin) ;

( Erase image, default origins to @ram and @flash, resp.)
wipe  @ram ram!  @flash flash!
