( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2011 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

loading HC08 memory image

( Space for compiling into. HC08s can get big; for now let's limit ourselves
  to 60k address space. This is where most of the varieties I'm interested
  in max out.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Represent the entire address space. This way we don't worry about any
  translation issues - like forcing target address fc00 to refer to first
  byte of the image buffer.)

64 Ki constant #image
#image buffer 'image
: |+  'image + ;

: image-c@  |+ c@ ;
: image-c!  |+ c! ;

( HC08s are big-endian, like all Motorola/Freescale processors!)
: >lohi  ( w - lo hi)  dup "0ff and  swap 8 u>> ;
: hilo>  ( hi lo - w)  swap  8 << or ;

: image-!  ( w a)     |+  push  >lohi  r@ ( hi) c!  pop 1+ ( lo) c! ;
: image-@  ( a - w)   |+  dup c@ ( hi)  swap 1+ c@ ( lo)  hilo> ;

: >image   ['] image-c@  is  |c@
           ['] image-@   is  |@
           2 |cell !  ( size of cell) ;
>image


( Dictionary operators.)
variable |h   ( image dictionary pointer pointer; points to one of:)
   2variable |flash   ( flash pointer, origin)
   2variable |ram     ( ram pointer, origin)
: ram     |ram    |h ! ;
: flash   |flash  |h ! ;
: in-ram?    |h @  |ram = ;
: in-flash?  |h @  |flash = ;
: org    ( a) ( set dict pointer)  |h @  ! ;

0 .if
( XXX - necessary?)
: |aligned  1 + -2 and ;
: |align  |h @ |aligned |h ! ;
.then

( DEBUG: show code as it's compiled)
: .h  radix preserve  hex <# # # #> type space ;

: |here  ( - a)  |h @ @ ;
: |allot ( n)    |h @ +! ;
: |c,    ( ch)   dup .h  |here image-c!  1 |allot ;
: |,     ( n)    ( |align)  dup 8 >> |c, ( hi)  |c, ( lo) ;

( return the origin & number of bytes in region)
: |region  ( - a u)  |h @   2@  ( origin ptr)  over - ;

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill ;

: ram!      ( ram-origin)  dup |ram   2!  ( set ptr and origin to origin) ;
: flash!  ( flash-origin)  dup |flash 2!  ( set ptr and origin to origin) ;

( Erase image, default origins to @ram and @flash, resp.)
wipe  @ram ram!  @flash flash!

forth
