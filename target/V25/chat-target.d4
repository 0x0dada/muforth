( Chat!  The V25 communications software. Copyright c 1995,1999 David Frech.)

( 16-aug-1999. Converted for dforth.)

cr s" Chat-target "  file[

[with] eprom [if]  ." skipping for EPROM "  [else]

( Gotta use serial0 because that's what the ROM monitor
  uses for initial code download.  Drag.)

: >host  ( word)  >HILO  EMIT EMIT  ;
: <host  ( - w)   KEY KEY  LOHI>    ;

( debugging)
: +SERIAL-CHAT  "17 RxIRQ IO!  ;
: IRQs   +SERIAL-CHAT ( V25 monitor has turned it off) ;

: FINAGLE   POP POP  SWAP  PUSH PUSH  BRK  ;
: *DEBUG*  -2 >host  ( -CLOCK)   FINAGLE  ( exits to debugged word)
           ( .. which EXITs to here)  IRQs  ;

: mon   -2 >host
   ( -CLOCK)  BRK ( goes into V25 monitor)  IRQs  ;

( low level)
CODE CODE!+  ( b a - a+1)   ( store into CS)
   AX POP,  CS: AL 0 [t] MOV,  t INC,  NEXT,  C;

CODE WORD!+  ( w a - a+2)   ( store into DS)
   AX POP,      AX 0 [t] MOV,  t INC,  t INC,  NEXT,  C;

( chat comm words)
: gets   SP!        <host ( #)  ?FOR  <host  NEXT  THEN  ;
: puts   DEPTH DUP  >host ( #)  ?FOR  >host  NEXT  THEN  ;
: codes  <host <host ( a #bytes)
             FOR  KEY   ( a b)  SWAP CODE!+   NEXT   DROP  ;
: words  <host <host ( a #words)
             FOR  <host ( a w)  SWAP WORD!+   NEXT   DROP  ;

( Set up the host pointers to this strange code.)
 ' gets   RESOLVES 'gets
 ' puts   RESOLVES 'puts
 ' codes  RESOLVES 'codes
 ' words  RESOLVES 'words


00 [if]
( NMI support)
VARIABLE #nmi  ( `semaphore' so only first trigger runs)

: +NMI
   1 #nmi !   $F40 IO@  -2 AND
   lit [[ HERE ]] nope 2  ( patched by nmi)
   -IRQ  INSTALL  $F40 IO!  ( nmi falling)  +IRQ  ;
   ( interrupts off for as short as possible)
[then]

( chat comm words)
: ?STACK  ( - f)  DEPTH 0< DUP IF  SP! -3 THEN  ;  ( underflow)
: ack  ?STACK >host  ;  ( acknowledge the receipt of pfa)
: OBEY
   RP!  BEGIN  ack  <host ( pfa)  ( +NMI)  EXECUTE  AGAIN  -;

: +CHAT-SERIAL
   0 SERIAL  [ 57600 ] BPS  +Tx +Rx 8N1
   input0  ReceiveISR0  ;

-1 [if]
: BOOT  +CHAT-SERIAL  IRQs  +IRQ  OBEY  -;
  ( Careful! Don't set time except from task that needs to wake up!)
   ( simple, eh?)
[then]


( chat debug )
VARIABLE bogus  ( task that `crashed')
: 'i  ( - 'var)  bogus @  top HERS @  ;  ( use @ or !)
: 'r  ( - 'var)  'i 2+  ;
: -@  ( a - a-2 w)  2- DUP  @  SWAP  ;

: stack@  ( - x1 .. xn)
   SP!  bogus @ bottom HERS @  2- DUP  ( bot Dstack)
   'i 4 + ( skip saved ip,rp)  - 2/  ( #w)
   ?FOR  -@  NEXT THEN  DROP  ;

: ret@  ( - x1 .. xn)
   SP!  bogus @  DUP  ( bottom Rstack)
   'r @  - 2/  ( #w)  ?FOR  -@  NEXT THEN  DROP  ;

00 [if]
( NMI handler for debugging)
CODE nmi                        ' nmi SWAP !  ( fixup +NMI)
   ' #nmi >DATA ) W-PTR DEC, ( nmi semaphore)
   0=, IF,  SI PUSH,  DI PUSH,  SP DI MOV, ( save)
   ' Operator >DATA #, SI MOV,  4 [SI] SP MOV, ( S0)
   -1 #, 0 [SI] W-PTR MOV,  ( STATUS)
   $68 C, $AAAA ,  SI PUSH,  $68 C, ' OBEY ,  ( top rp ip)
   SP 6 [SI] MOV, ( TOP)   DI SP MOV, ( old)
   DI POP,  SI POP,  THEN,  IRET,  C;

SKIP  Let the tasker run the newly configured Operator task.
This is a `soft' NMI.  If we just clobbered the currently-run-
ning task and tried to save its context we might screw up its
stack since we don't know at the moment of the interrupt if
Forth or native machine code is running.  This is the only safe
way.   ** ASSUMES DS = SS = RAM and is OK!! **
[then]

[then]

]file
