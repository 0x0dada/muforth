TARGET COMPILER for V25.  Headaches galore!! See DISCUSS.SCR
for more info on the hairiness of it all.

1   is load block

Enjoy!!










( Load block for Target Compiler)

CR ." (( Target compiler "    02 32 +THRU    ." )) "













( little bit of DEBUG)
: where  ( target-addr - offset nfa)  PUSH  6 HASH  0
   BEGIN  DROP  @  DUP WHILE  R@ OVER nfa pfa 1+ @ ( t-pfa)  -
   ( offset)  DUP 0< 0= UNTIL  POP DROP  SWAP nfa  EXIT
   THEN  DROP  POP  " ????"  ;

: bk  ( x1..xn -)  ( stack backtrace; usage: ret@ bk)
   DEPTH FOR  where  CR COUNT TYPE  ."  + "  .  NEXT  ;








( Signatures)
: SIGN"    '" WORD  DUP COUNT ( a a+1 #)
            PUSH SWAP R@  CMOVE   POP H +!  ( rom allot)  ;
            ( for putting signature in Kernel)












( primitives )
VARIABLE 'lit       VARIABLE 'does        VARIABLE 'evokes
VARIABLE 'branch    VARIABLE '0branch     VARIABLE 'exit
VARIABLE 'for       VARIABLE '?for        VARIABLE 'next












( mINTERPRET  mQUIT    meta versions)
: RECOVER   -2 ALLOT  ;          ( RECOVERs final EXIT)
DEFER remote           ( execute remotely)

: mINTERPRET  ( blk# offset -)      ( *** META ***)
  >IN 2!    BEGIN  6 -' ( target FORTH) IF
                         2 -FIND  ( host FORTH) IF
                            NUMBER   ELSE   EXECUTE  THEN
                    ELSE  remote   THEN      AGAIN ;  RECOVER

: mQUIT    R0 @ RP!    ( *** META ***)
  BEGIN CR  QUERY
     0 0 ( blk offset) INTERPRET  ." Ok"  AGAIN ;   RECOVER

' mQUIT IS QUIT  ( uses deferred INTERPRET)

( LITERAL  ]               *** META ***)
DEFER compile          ( compile into target image)

COMPILER
: LITERAL   ( n -)  'lit @ ,  ,  ;
FORTH

: ]          BEGIN  4 -' ( meta COMPILER) IF
                         6 -FIND ( target FORTH) IF
                    NUMBER \ LITERAL   ELSE   compile  THEN
                    ELSE    EXECUTE   THEN     AGAIN ;  RECOVER





( HOST    switching INTERPRETers )
: HOST     >IN 2@  hINTERPRET  ;

COMPILER  ( use this pair for [[ calculate ]] LITERAL)
: [[    HOST  ;  ( until following `]')
FORTH
: ]]    POP DROP  ;

SKIP
HOST runs a subordinate HOST interpreter, like  : runs a sub-
ordinate compiler.  Both are exited by POP DROP.  In : land this
happens in ;  and in HOST land in C; since we only ever want to
be in HOST land for target code words.



( Intel hex)
CODE SPLIT  ( w - hi lo)  AX AX XOR,  BH AL MOV,  AX PUSH,
   BH BH XOR,  NXT,  END-CODE

: byte  ( sum c - sum) DUP +UNDER .B ;
: >word ( sum b1 b2 - sum)  PUSH byte  POP byte ;
     ( sends b1 then b2)
: word  ( sum w - sum) SPLIT SWAP >word ;  ( LITTLE endian)
: addr  ( sum w - sum) SPLIT >word ;       ( BIG endian)
: chunk ( sum a # - sum)
    FOR C@+  SWAP PUSH  byte POP NEXT  DROP ;
: check ( sum - )  NEGATE  .B  CR  ;
: header ( # - sum)  ': EMIT  0 ( sum) SWAP byte ;



( Intel hex)
      (  : count    vaddr    tag       data         checksum )
      ( =====================================================)
: data  ( 'host 'target # -)
  PUSH R@ header  SWAP addr  0 byte  SWAP POP chunk  check ;
: end   0 header     0 addr  1 byte                  check ;
: seg   ( seg -)
        2 header     0 addr  2 byte      SWAP addr   check  ;








( Serial       chat mode)    DECIMAL
( all communication is LITTLE-ENDIAN.)
CODE JOIN  ( lo hi - w)
   AX POP,  BL BH MOV,  AL BL MOV,  NXT,  END-CODE

: B>  ( b -)   SER-OUT  ;
: B<  ( - b)   BEGIN  SERIAL Q? 0= WHILE
                           KEY?    UNTIL  (KEY  DROP QUIT
                                   THEN   SERIAL Q@  ;

: W>  ( w -)  SPLIT  ( hi lo)  B>  B>  ;
: W<  ( - w)  B<  B<  ( lo hi) JOIN  ;

: CHECK  BEGIN  W<  .  AGAIN  ;


( Serial       chat mode)    DECIMAL
( target pfas for communication)
VARIABLE 'gets   ( gets a bunch of numbers from host to stack)
VARIABLE 'puts   ( puts target stack, one by one, to host)
VARIABLE 'loads  ( loads memory to target, word by word)

: _PUSH  ( n -)  ( push under top of return stack)
         POP ( our return addr)  POP ( top of R stack)
         ROT ( n to top)  PUSH  PUSH  PUSH  ;

: _POP   ( - n)  ( pop from under top of return stack)
         POP ( our return addr)  POP ( top of R stack)
         POP ( our n)  ROT ROT  PUSH  PUSH  ;



( Serial       chat mode)    DECIMAL
: hi   SERIAL QRESET  ( empty)
       0 SERIAL Q!  0 SERIAL Q!  ;  ( fake the first `ack')

: unusual  ( response -)
    DUP -1 =  IF  ." Reboot"  EXIT  THEN
    DUP -2 =  IF  ." Break"  DUMB  EXIT  THEN
        -3 =  IF  hi  -1 ABORT" TARGET stack underflow."
           ELSE  ( hi)  -1 ABORT" Lost sync."  THEN  ;

: listen  W<  ?DUP IF  unusual  THEN  ;
: do  ( pfa -)  listen ( previous)  W>  ;
: ?stack  ( host check)  DEPTH 0< ABORT" HOST stack underflow"
   DEPTH 20 > ABORT" HOST stack too deep."  ;


( Serial       chat mode)    DECIMAL
: push  ( stack to target)  ?stack ( make sure it's reasonable)
     DEPTH DUP  FOR  SWAP _PUSH  NEXT  ( push to return stack)
     'gets @ do  ( depth) DUP W>   FOR  _POP W>  NEXT  ;

: pop   ( stack from target)
     S0 @ SP!  'puts @ do  W< DUP ( depth)  FOR  W< _PUSH  NEXT
     ( depth)  FOR  _POP  NEXT  ;

: ?Even   DUP 1 AND ABORT" download count not even." ;
: @+  ( a - a+2 w)  DUP 2 +  SWAP @  ;

: download  ( 'host 'target # -)  ( memory to target)  ?Even
     2/  ( #words)  'loads @ do
     SWAP W> ( 'target)   DUP W> ( #words)
     FOR  @+ W>  NEXT  DROP  ;
( memory mismanagement)
VARIABLE r        ( ram allocation pointer)
: ALLOT  ( n -)  r +!   ;  ( advance ram allocation pointer)
: RAM    ( - a)  r @    ;  ( next available ram)
: .RAM   CR  ." Ram usage is "  r @ .  ." bytes. "  ;

( memory alignment )
: ALIGN              HERE 1 AND   IF $90 C, THEN ;  ( use NOP)
: -ALIGNED?  ( - f)  HERE 1 AND NEGATE ;
: -ALIGN             -ALIGNED? NOT  IF $90 C, THEN ;

( USER variables)
VARIABLE #u   ( bytes allocated)
: UALLOT  ( n -)  #u +!  ;  ( analogous to RAM, ALLOT)
: #USER   ( - #)  #u @   ;
: .USER   CR  ." User area is "  #USER .  ." bytes. "  ;
( image memory      CODE )
CODE wash  ( addr # word -)     CLD,  CX POP, ( #)  DI POP,
   CS AX MOV,  $2000 #, AX ADD,  AX ES MOV,  ( image seg)
   BX AX MOV,  REP, AX STOS,  BX POP,  NXT,  END-CODE

CODE stroke  ( sk im # -)  ( sketch to image)
   CS AX MOV,  $2000 #, AX ADD,  AX ES MOV,  ( image seg)
   CLD,  SI DX MOV,  BX CX MOV,  DI POP,  SI POP,
   REP, AL MOVS,  BX POP,  DX SI MOV,  NXT,  END-CODE

CODE -stroke  ( sk im # -)   ( sketch from image)
   CS AX MOV,  $2000 #, AX ADD,  AX DS MOV,  ( image seg)
   CS PUSH,  ES POP,  ( dest)
   CLD,  SI DX MOV,  BX CX MOV,  SI POP,  DI POP,
   REP, AL MOVS,  BX POP,  DX SI MOV,
   CS PUSH,  DS POP, ( restore DS)  NXT,  END-CODE
( image memory      Reading)
: 'sketch  EDGE @  ;
  ( ok to use for other things if we've painted)

: ditto  ( 'target # - 'sketch 'target #)
    PUSH    'sketch OVER R@ -stroke  ( read image)
    'sketch SWAP   POP   ;

( host and target spaces)
: host     dA @    IF } THEN ;
: ?host    dA @  ABORT" not in host space."  ;
: target   host   {    ;




( image memory     updating )
( EDGE and H' are $C000, H' reloc is 0 on startup)

: ZERO   ( - a)       H' 2 + ;       ( target relocation)
: THERE  ( - offset)  H' @    ZERO @  -  ;
: painted  ( - #)     EDGE @  ZERO @  -  ;
: sketched ( - #)     H' @    EDGE @  -  ;
: wipe                EDGE @  H' !  ;

: paint  ( sketch to image)   ?host  ( just in case)
   {  ALIGN  }                DEPTH 0= IF
   sketched PUSH  ( #)
   EDGE @  painted  R@  stroke
   POP ( #) NEGATE  ZERO +!   wipe   THEN  ;


( image memory     updating )             SKIP
Here is a picture of what's happening.  The thing starting at
EDGE is the buffer that we compile into.  H' tells how far we
have gone since the last `paint'.  ZERO is a phantom pointer
that is useful for calculating our total image size -- its
distance from EDGE = count of bytes in image.  This way,
H'   - ZERO = offset into image segment (the word `THERE').
EDGE - ZERO = # of bytes in image (`#image').
                                           D = defined
 ZERO         EDGE          H'             U = undefined
 |$$$$$$$$$$$$|DDDDDDDDDDDDD|UUUUUUUUUUUUUUUUUUUUUUUUUUU...
 ????         $C000                                     ~$EE00

Note that none of these values is valid except in host space,
since switching to target swaps these values with the regular
pygmy ones.
( image memory     host/target sync )  DECIMAL
: tidbit  ( 'target # -)  ditto  download   '. (EMIT  ;

: gossip  ( 'target # -)
  BEGIN   DUP 1024 > IF  OVER 1024 tidbit  1024 +UNDER  1024 -
       ELSE   tidbit 0    THEN   DUP 0= UNTIL    DROP ;

VARIABLE chatted         ( # bytes chatted to target)

: sync   paint  ( send last bit to image)
         painted  chatted @ -  ?DUP IF PUSH ( #)
         chatted @  R@  gossip
         POP  chatted +!  THEN  ;



( image memory     initial download   Image)    DECIMAL
'S $40 - CONSTANT XOFF   'Q $40 - CONSTANT XON
: AWAIT   ( ch -)   BEGIN  B<  OVER = UNTIL  DROP  ;
: (PACE  ( for EP-1)  BEGIN  SERIAL Q?  WHILE  SERIAL Q@
   DUP XOFF =  IF  DROP  XON AWAIT  ELSE  (EMIT  THEN  REPEAT ;
DEFER PACE   ' NOP IS PACE
: fragment  ( 'target # -)   ditto  data   '. (EMIT  ;
: chunks    ( 'target # -)
  BEGIN   DUP 16 > IF   OVER 16 fragment   16 +UNDER  16 -
       ELSE   fragment 0   THEN  PACE  DUP 0= UNTIL  DROP ;
: ?Stack  DEPTH ABORT" : lingering stack data; can't paint." ;
: Image     paint   0 painted chunks
      painted chatted !   ( get us up-to-date)  ;

: <SEND   ['] B>     IS EMIT  ['] (PACE IS PACE  HEX  ;
: SEND>   ['] (EMIT  IS EMIT  ['] NOP   IS PACE  DECIMAL  ;
( image memory     initial download   Image)    DECIMAL
VARIABLE 'boot    ( initial boot address)

: AWAIT   ( ch -)   BEGIN  B<  OVER = UNTIL  DROP  ;
: echo    ( ch -)  ( send, wait for echo)  DUP  B>  AWAIT  ;
: ECHO    ['] echo   IS EMIT    ;
: <cr>  13 echo  10 AWAIT  ;
: GO   ECHO  <cr>  ." g="  'boot @  .W  <cr>  SERIAL QRESET  ;

: .BOOT   ." Boot address: "  BASE @ HEX
   'boot @  .W  SPACE  BASE !  ;

: hello   ( initial download)   host   ?Stack
   <SEND   $a0 seg  Image   end   ( GO)  SEND>   {
   CR .BOOT   DUMB  hi  ;

( image memory        EPROM BURN  )            DECIMAL
 $200 CONSTANT 8k     $400 CONSTANT 16k   ( memory sizes)
 $800 CONSTANT 32k   $1000 CONSTANT 64k   ( in paragraphs)
: >seg  ( mem-size - seg)  NEGATE  ;

: Reset  ( mem-size -)    target  ( depends on 'sketch empty!)
  $EA C,  'boot @ ,  DUP  >seg ,   ( far jump to RESET code)
  'sketch  SWAP 16 * 16 -  5 data  ( send)  host wipe  ;

: ^Z  26 EMIT  ;
: BURN   ( mem-size -)   DEPTH 1 - ABORT" needs size."  PUSH
   host  ?Stack
   <SEND   0 seg   Image   POP Reset   end   ^Z  SEND>
   ." Burned."  CR   {  DUMB  ;


( image memory     Hex image to a FILE  )            DECIMAL
VARIABLE image-handle
: FEMIT  ( ch -)  PAD C!  PAD 1 image-handle @  FILE-WRITE  ;
: <FILE  ( str -)  FMAKE  ABORT" couldn't create image file"
   image-handle !  ;
: FILE>  image-handle @ FCLOSE  ;

: <IMAGE   ['] FEMIT IS EMIT  HEX  ;
: IMAGE>   ['] (EMIT IS EMIT  DECIMAL  ;







( image memory     Hex image to a FILE  )            DECIMAL
: IMAGE"  ( mem-size -)
   DEPTH 1 - ABORT" needs size."  PUSH
   host  ?Stack
   '" WORD ( a)  DUP ( file)
      COUNT +  0 SWAP C! ( null term for DOS)
   <FILE  <IMAGE
             0 seg   Image   POP Reset   end   ^Z
                                               IMAGE>  FILE>
   CR ." Image file written."  CR   {  ;






( image memory     clearing )
: new  ( new memory image)
   host ( otherwise, possible disaster)
   wipe   EDGE @ ZERO !  ( setup origins)
   0 $8000 $5555 wash  ( clear image seg)
   chatted OFF  ( init sync)
   r OFF ( start ram allocation at 0)
   #u OFF  ( reset count of user area)
   S0 @    ( this last is so `paint' won't be confused; it )
   SP!  ;  ( normally checks DEPTH and if non-zero, doesn't )
           ( paint, assuming some inter-word jump address is )
           ( on the stack.  A little bit of a kludge, but it's )
           ( the only way.)

: .MEM   .USER  .RAM  ;

( host shadow vocab words )
           ( host entry stores target addr)
: (compile  ( hostpfa -)  1+ @ ( target-pfa) , ;

: (remote   ( hostpfa -)    host   1+ @ ( target-pfa)  PUSH
           push  sync  POP do  pop   {  ;
' (compile  IS compile
' (remote   IS remote      ( make mINTERPRET and ] work)

: ''   '  ;   ( alias for host's ' )
: '    6 -' ABORT" not defined in TARGET"  1+ @ ( target-pfa) ;

: >DATA  ( target-pfa - 'data)  host
     DUP painted U< IF  ( in image)
     PAD SWAP 2 -stroke  PAD @   ELSE  ( still in sketch)
     painted -   'sketch +  @  THEN  {  ;
( meta structures   UNTIL AGAIN IF THEN etc       )
COMPILER
: BEGIN   ( - back)  HERE ;
: UNTIL   ( back -)   '0branch @ ,  ,A  ;
: AGAIN   ( back -)   'branch  @ ,  ,A  ;
: THEN    ( fwd -)  HERE dA @ - SWAP ! ;
: IF      ( - fwd)  '0branch @ ,  HERE   0 , ;
: WHILE   ( back - fwd back)  \ IF  SWAP ;
: REPEAT  ( fwd back -)  \ AGAIN   \ THEN ;
: ELSE    ( fwd0 - fwd1)  'branch @ ,  HERE  0 , SWAP  \ THEN ;
: FOR     ( - back) 'for @ ,  \ BEGIN ;  ( u times; 64k for 0)
: ?FOR    ( - fwd back)  '?for @ ,  HERE 0 ,   \ BEGIN  ;
: NEXT    ( back -)  'next @ ,  ,A ;
FORTH
( n FOR .. NEXT        goes n times; 64k if n=0 )
( n ?FOR .. NEXT THEN  goes n times; 0 if n=0 )
( LAST     hide     show )
: LAST   ( vocab - nfa)  HASH  @ nfa ;
: hide   ( vocab -) LAST DUP C@ $20 OR  SWAP C! ;
: show   ( vocab -) LAST DUP C@ $20 BIC SWAP C! ;

SKIP  now defined in Pygfix
: nfa    ( lfa - nfa)  2 + ;
: pfa    ( nfa - pfa)  COUNT + ;








( compiler helpers    ;CODE  DOES>  EVOKES>  )
: TARGET   6 CONTEXT ! ;  ( target FORTH vocab)
             ( paint ALIGNs)
: head     }   paint   TARGET HEAD FORTH
           $90 C, ( non-magic)   THERE 2 + , ( pfa)  {  ;

: patch    POP @  6 LAST pfa 1+ @  2 -  dA @ +  !  ;
           ( patch code ptr)
: ::       host  :  ;  ( HOST space, host :)

: ;code    2 show   COMPILE patch   THERE , ( for patch)
           {  ;  ( in target space)



             (  host  { target }  host  )
( ;;   ;CODE   DOES>   EVOKES>  )
: does>    { -ALIGN }  ;code  ;
: offset,  ( a op -)  C,  } THERE { 2 + - , ;  ( 3 bytes long)
: call,    ( a -)  $E8 offset,  ;
: jump,    ( a -)  $E9 offset,  ;
        ( if we -ALIGN before the call, code after is ALIGNED)

COMPILER
: ;;       POP DROP  CONTEXT @ show  COMPILE EXIT  {  ;
: ;CODE    POP DROP  ;code   ASM-RESET  HOST  ;
: DOES>    POP DROP  does>  'does @ call,   ]  ;  ( readonly)
: EVOKES>  POP DROP  does>  'evokes @ call, ]  ;  ( volatile)
           ( all execute in host space)
FORTH

             (  host  { target }  host  )
( CODE stuff )
: w   DI ;    : [w]    [DI] ;
: ip  SI ;    : [ip]   [SI] ;
: top BX ;    : [top]  [BX] ;

: CODE    head   HERE 2 + ,A  ( code ptr)  ASM-RESET  HOST  ;
: KCODE   ASM-RESET   ( for headerless support words) HOST  ;
: NEXT,   CS: AX LODS,  w AX XCHG,  CS: -2 [w] JMP,  ;
: LABEL   }  THERE CONSTANT  {  ;  ( defined in FORTH!)
: EQU     }  CONSTANT  {  ;
: C;      POP DROP  ;  ( stay in target space, exit HOST interp)

: FINT,    $0F C,  $92 C,  ;  ( V25: finish interrupt)
: IRETRB,  $0F C,  $91 C,  ;  ( V25: ret from reg bank irq)
: REPEAT,  ( fwd back -)  $EB UNTIL,  ( AGAIN)  THEN,  ;

( last entry in metacompiler)
COMPILER
:  ;       POP DROP  6 show    'exit @ ,  ;  ( stay in target)
FORTH

  '' mINTERPRET  IS  INTERPRET  ( into target mode..)

( Phew!  That wasn't so bad...)

SKIP  call, and jump, use absolute addresses in the target
image and not addresses relative to HERE, like the assembler
looping and jumping words.  This is so we can jump across words
that will have been already copied from HERE to the image.
Yuck.


