( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2013 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)


( Let's model the bit-by-bit shift-and-subtract divide algorithm so we can
  see how it works.)

: .group   # # # # char _ hold ;
: .b33  radix preserve binary  <# 8 for  .group  next  # #>  type ;
: .h9   radix preserve hex     <# 2 for  .group  next  # #>  type ;
: .show  cr dup .b33  3 spaces  .h9 ;

: divstep  ( ddend dsor - 'ddend 'dsor)  push
   "0ffff_ffff and  ( strip off any high bits - carry can only be one bit)
   2* dup .show  r@ -  dup .show  dup 0< if  ( borrowed)  r@ +  pop  ^  then  1+  pop ;

: um/mod  ( uddend udsor - urem uquot)
   16 <<  ( shift divisor up)
   16 for  divstep  over .show  cr  next  drop
   dup 16 >> ( urem)  swap "0ffff and ( uquot) ;

hex
7fff dup *
7fff um/mod
